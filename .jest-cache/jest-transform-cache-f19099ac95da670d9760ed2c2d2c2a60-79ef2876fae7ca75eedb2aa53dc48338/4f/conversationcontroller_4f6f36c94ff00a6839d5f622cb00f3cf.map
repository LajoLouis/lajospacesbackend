{"version":3,"names":["cov_2h4veyi5k","actualCoverage","s","mongoose_1","require","Conversation_1","Match_1","User_model_1","logger_1","appError_1","catchAsync_1","exports","createConversation","catchAsync","req","res","f","userId","user","_id","participantIds","conversationType","b","title","description","matchId","propertyId","body","AppError","Array","isArray","length","allParticipants","Set","toString","existingConversation","Conversation","findOne","participants","$all","$size","status","$ne","json","success","data","conversation","message","users","User","find","$in","participantDetails","map","participantId","Types","ObjectId","joinedAt","Date","role","isActive","lastSeenAt","unreadCount","isMuted","id","undefined","settings","allowFileSharing","allowLocationSharing","allowPropertySharing","maxParticipants","autoDeleteMessages","requireApprovalForNewMembers","analytics","totalMessages","totalParticipants","averageResponseTime","lastActivityAt","messagesThisWeek","messagesThisMonth","save","populatedConversation","findById","populate","match","Match","systemMessage","Message","conversationId","senderId","receiverId","messageType","content","metadata","systemMessageType","updateLastMessage","logger","info","error","getUserConversations","page","limit","search","query","$or","$regex","$options","pageNum","parseInt","limitNum","skip","conversations","totalCount","Promise","all","sort","lean","countDocuments","formattedConversations","userParticipantDetail","pd","otherParticipant","p","pagination","total","pages","Math","ceil","getConversationById","params","formattedConversation","toObject","canSendMessage","canUserSendMessage","updateConversation","updates","allowedUpdates","updateData","forEach","field","updatedConversation","findByIdAndUpdate","$set","new","runValidators","archiveConversation","findOneAndUpdate","deleteConversation","toggleMuteConversation","mutedUntil","participantDetail"],"sources":["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\conversation.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { Types } from 'mongoose';\r\nimport { Conversation, Message } from '../models/Conversation';\r\nimport { Match } from '../models/Match';\r\nimport { User } from '../models/User.model';\r\nimport { logger } from '../utils/logger';\r\nimport { AppError } from '../utils/appError';\r\nimport { catchAsync } from '../utils/catchAsync';\r\n\r\n/**\r\n * Create a new conversation\r\n */\r\nexport const createConversation = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { \r\n    participantIds, \r\n    conversationType = 'direct',\r\n    title,\r\n    description,\r\n    matchId,\r\n    propertyId \r\n  } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    // Validate participants\r\n    if (!participantIds || !Array.isArray(participantIds) || participantIds.length === 0) {\r\n      throw new AppError('Participant IDs are required', 400);\r\n    }\r\n\r\n    // Add current user to participants if not already included\r\n    const allParticipants = [...new Set([userId.toString(), ...participantIds])];\r\n\r\n    // For direct conversations, ensure exactly 2 participants\r\n    if (conversationType === 'direct' && allParticipants.length !== 2) {\r\n      throw new AppError('Direct conversations must have exactly 2 participants', 400);\r\n    }\r\n\r\n    // Check if direct conversation already exists\r\n    if (conversationType === 'direct') {\r\n      const existingConversation = await Conversation.findOne({\r\n        conversationType: 'direct',\r\n        participants: { $all: allParticipants, $size: 2 },\r\n        status: { $ne: 'deleted' }\r\n      });\r\n\r\n      if (existingConversation) {\r\n        return res.json({\r\n          success: true,\r\n          data: { conversation: existingConversation },\r\n          message: 'Conversation already exists'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Verify all participants exist\r\n    const users = await User.find({ _id: { $in: allParticipants } });\r\n    if (users.length !== allParticipants.length) {\r\n      throw new AppError('One or more participants not found', 404);\r\n    }\r\n\r\n    // Create participant details\r\n    const participantDetails = allParticipants.map(participantId => ({\r\n      userId: new Types.ObjectId(participantId),\r\n      joinedAt: new Date(),\r\n      role: participantId === userId.toString() ? 'admin' : 'member',\r\n      isActive: true,\r\n      lastSeenAt: new Date(),\r\n      unreadCount: 0,\r\n      isMuted: false\r\n    }));\r\n\r\n    // Create conversation\r\n    const conversation = new Conversation({\r\n      participants: allParticipants.map(id => new Types.ObjectId(id)),\r\n      participantDetails,\r\n      conversationType,\r\n      title: conversationType === 'group' ? title : undefined,\r\n      description: conversationType === 'group' ? description : undefined,\r\n      matchId: matchId ? new Types.ObjectId(matchId) : undefined,\r\n      propertyId: propertyId ? new Types.ObjectId(propertyId) : undefined,\r\n      settings: {\r\n        allowFileSharing: true,\r\n        allowLocationSharing: true,\r\n        allowPropertySharing: true,\r\n        maxParticipants: conversationType === 'direct' ? 2 : 50,\r\n        autoDeleteMessages: false,\r\n        requireApprovalForNewMembers: conversationType === 'group'\r\n      },\r\n      analytics: {\r\n        totalMessages: 0,\r\n        totalParticipants: allParticipants.length,\r\n        averageResponseTime: 0,\r\n        lastActivityAt: new Date(),\r\n        messagesThisWeek: 0,\r\n        messagesThisMonth: 0\r\n      }\r\n    });\r\n\r\n    await conversation.save();\r\n\r\n    // Populate conversation with participant details\r\n    const populatedConversation = await Conversation.findById(conversation._id)\r\n      .populate('participants', 'firstName lastName avatar email accountType')\r\n      .populate('matchId', 'compatibilityScore matchType status')\r\n      .populate('propertyId', 'title propertyType location pricing photos');\r\n\r\n    // If conversation is created from a match, create a system message\r\n    if (matchId) {\r\n      const match = await Match.findById(matchId);\r\n      if (match) {\r\n        const systemMessage = new Message({\r\n          conversationId: conversation._id,\r\n          senderId: userId,\r\n          receiverId: allParticipants.find(id => id !== userId.toString()),\r\n          messageType: 'system',\r\n          content: `You matched! Start your conversation here.`,\r\n          metadata: {\r\n            systemMessageType: 'match_created'\r\n          },\r\n          status: 'delivered'\r\n        });\r\n\r\n        await systemMessage.save();\r\n        await conversation.updateLastMessage(systemMessage);\r\n      }\r\n    }\r\n\r\n    logger.info(`Created ${conversationType} conversation ${conversation._id} with ${allParticipants.length} participants`);\r\n\r\n    return res.status(201).json({\r\n      success: true,\r\n      data: { conversation: populatedConversation },\r\n      message: 'Conversation created successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error creating conversation:', error);\r\n    throw new AppError('Failed to create conversation', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Get user's conversations\r\n */\r\nexport const getUserConversations = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { \r\n    page = 1, \r\n    limit = 20, \r\n    status = 'active',\r\n    conversationType,\r\n    search \r\n  } = req.query;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    // Build query\r\n    const query: any = {\r\n      participants: userId,\r\n      status: status === 'all' ? { $ne: 'deleted' } : status\r\n    };\r\n\r\n    if (conversationType && conversationType !== 'all') {\r\n      query.conversationType = conversationType;\r\n    }\r\n\r\n    if (search) {\r\n      query.$or = [\r\n        { title: { $regex: search, $options: 'i' } },\r\n        { description: { $regex: search, $options: 'i' } }\r\n      ];\r\n    }\r\n\r\n    // Pagination\r\n    const pageNum = parseInt(page as string);\r\n    const limitNum = parseInt(limit as string);\r\n    const skip = (pageNum - 1) * limitNum;\r\n\r\n    const [conversations, totalCount] = await Promise.all([\r\n      Conversation.find(query)\r\n        .populate('participants', 'firstName lastName avatar email accountType isOnline lastActiveAt')\r\n        .populate('lastMessage.senderId', 'firstName lastName avatar')\r\n        .populate('matchId', 'compatibilityScore matchType status')\r\n        .populate('propertyId', 'title propertyType location pricing photos')\r\n        .sort({ 'analytics.lastActivityAt': -1 })\r\n        .skip(skip)\r\n        .limit(limitNum)\r\n        .lean(),\r\n      Conversation.countDocuments(query)\r\n    ]);\r\n\r\n    // Format conversations with user-specific data\r\n    const formattedConversations = conversations.map(conversation => {\r\n      const userParticipantDetail = conversation.participantDetails.find(\r\n        (pd: any) => pd.userId.toString() === userId.toString()\r\n      );\r\n\r\n      return {\r\n        ...conversation,\r\n        unreadCount: userParticipantDetail?.unreadCount || 0,\r\n        isMuted: userParticipantDetail?.isMuted || false,\r\n        lastSeenAt: userParticipantDetail?.lastSeenAt,\r\n        // For direct conversations, get the other participant's info\r\n        otherParticipant: conversation.conversationType === 'direct' \r\n          ? conversation.participants.find((p: any) => p._id.toString() !== userId.toString())\r\n          : null\r\n      };\r\n    });\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: {\r\n        conversations: formattedConversations,\r\n        pagination: {\r\n          page: pageNum,\r\n          limit: limitNum,\r\n          total: totalCount,\r\n          pages: Math.ceil(totalCount / limitNum)\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error getting user conversations:', error);\r\n    throw new AppError('Failed to get conversations', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Get conversation by ID\r\n */\r\nexport const getConversationById = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { id } = req.params;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const conversation = await Conversation.findOne({\r\n      _id: id,\r\n      participants: userId,\r\n      status: { $ne: 'deleted' }\r\n    })\r\n    .populate('participants', 'firstName lastName avatar email accountType isOnline lastActiveAt')\r\n    .populate('matchId', 'compatibilityScore matchType status matchReason')\r\n    .populate('propertyId', 'title propertyType location pricing photos amenities');\r\n\r\n    if (!conversation) {\r\n      throw new AppError('Conversation not found', 404);\r\n    }\r\n\r\n    // Get user-specific data\r\n    const userParticipantDetail = conversation.participantDetails.find(\r\n      (pd: any) => pd.userId.toString() === userId.toString()\r\n    );\r\n\r\n    const formattedConversation = {\r\n      ...conversation.toObject(),\r\n      unreadCount: userParticipantDetail?.unreadCount || 0,\r\n      isMuted: userParticipantDetail?.isMuted || false,\r\n      lastSeenAt: userParticipantDetail?.lastSeenAt,\r\n      canSendMessage: conversation.canUserSendMessage(new Types.ObjectId(userId)),\r\n      otherParticipant: conversation.conversationType === 'direct' \r\n        ? conversation.participants.find((p: any) => p._id.toString() !== userId.toString())\r\n        : null\r\n    };\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { conversation: formattedConversation }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error getting conversation:', error);\r\n    throw new AppError('Failed to get conversation', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Update conversation\r\n */\r\nexport const updateConversation = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { id } = req.params;\r\n  const updates = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const conversation = await Conversation.findOne({\r\n      _id: id,\r\n      participants: userId,\r\n      status: { $ne: 'deleted' }\r\n    });\r\n\r\n    if (!conversation) {\r\n      throw new AppError('Conversation not found', 404);\r\n    }\r\n\r\n    // Check if user has permission to update (admin role for group conversations)\r\n    if (conversation.conversationType === 'group') {\r\n      const userParticipantDetail = conversation.participantDetails.find(\r\n        (pd: any) => pd.userId.toString() === userId.toString()\r\n      );\r\n\r\n      if (!userParticipantDetail || userParticipantDetail.role !== 'admin') {\r\n        throw new AppError('Only admins can update group conversations', 403);\r\n      }\r\n    }\r\n\r\n    // Update allowed fields\r\n    const allowedUpdates = ['title', 'description', 'avatar', 'settings'];\r\n    const updateData: any = {};\r\n\r\n    allowedUpdates.forEach(field => {\r\n      if (updates[field] !== undefined) {\r\n        updateData[field] = updates[field];\r\n      }\r\n    });\r\n\r\n    const updatedConversation = await Conversation.findByIdAndUpdate(\r\n      id,\r\n      { $set: updateData },\r\n      { new: true, runValidators: true }\r\n    ).populate('participants', 'firstName lastName avatar email accountType');\r\n\r\n    logger.info(`Updated conversation ${id} by user ${userId}`);\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { conversation: updatedConversation },\r\n      message: 'Conversation updated successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error updating conversation:', error);\r\n    throw new AppError('Failed to update conversation', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Archive conversation\r\n */\r\nexport const archiveConversation = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { id } = req.params;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const conversation = await Conversation.findOneAndUpdate(\r\n      {\r\n        _id: id,\r\n        participants: userId,\r\n        status: { $ne: 'deleted' }\r\n      },\r\n      { status: 'archived' },\r\n      { new: true }\r\n    );\r\n\r\n    if (!conversation) {\r\n      throw new AppError('Conversation not found', 404);\r\n    }\r\n\r\n    logger.info(`Archived conversation ${id} by user ${userId}`);\r\n\r\n    return res.json({\r\n      success: true,\r\n      message: 'Conversation archived successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error archiving conversation:', error);\r\n    throw new AppError('Failed to archive conversation', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Delete conversation\r\n */\r\nexport const deleteConversation = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { id } = req.params;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const conversation = await Conversation.findOneAndUpdate(\r\n      {\r\n        _id: id,\r\n        participants: userId,\r\n        status: { $ne: 'deleted' }\r\n      },\r\n      { status: 'deleted' },\r\n      { new: true }\r\n    );\r\n\r\n    if (!conversation) {\r\n      throw new AppError('Conversation not found', 404);\r\n    }\r\n\r\n    logger.info(`Deleted conversation ${id} by user ${userId}`);\r\n\r\n    return res.json({\r\n      success: true,\r\n      message: 'Conversation deleted successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error deleting conversation:', error);\r\n    throw new AppError('Failed to delete conversation', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Mute/unmute conversation\r\n */\r\nexport const toggleMuteConversation = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { id } = req.params;\r\n  const { isMuted, mutedUntil } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const conversation = await Conversation.findOne({\r\n      _id: id,\r\n      participants: userId,\r\n      status: { $ne: 'deleted' }\r\n    });\r\n\r\n    if (!conversation) {\r\n      throw new AppError('Conversation not found', 404);\r\n    }\r\n\r\n    // Update user's mute status\r\n    const participantDetail = conversation.participantDetails.find(\r\n      (pd: any) => pd.userId.toString() === userId.toString()\r\n    );\r\n\r\n    if (participantDetail) {\r\n      participantDetail.isMuted = isMuted;\r\n      if (mutedUntil) {\r\n        participantDetail.mutedUntil = new Date(mutedUntil);\r\n      } else {\r\n        delete participantDetail.mutedUntil;\r\n      }\r\n      await conversation.save();\r\n    }\r\n\r\n    logger.info(`${isMuted ? 'Muted' : 'Unmuted'} conversation ${id} by user ${userId}`);\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: {\r\n        isMuted,\r\n        mutedUntil\r\n      },\r\n      message: `Conversation ${isMuted ? 'muted' : 'unmuted'} successfully`\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error toggling mute conversation:', error);\r\n    throw new AppError('Failed to toggle mute conversation', 500);\r\n  }\r\n});\r\n"],"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","ignoreList":[]}