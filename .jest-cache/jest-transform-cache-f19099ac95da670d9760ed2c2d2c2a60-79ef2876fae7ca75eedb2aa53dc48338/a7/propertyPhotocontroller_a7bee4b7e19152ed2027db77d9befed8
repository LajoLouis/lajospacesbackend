3b491ebe6a222f73733b90fae0009775
"use strict";

/* istanbul ignore next */
function cov_2dv5gqiijs() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\propertyPhoto.controller.ts";
  var hash = "f412bed23fbbf514b8aa4beacfd0f47726e11af0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\propertyPhoto.controller.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 212
        }
      },
      "2": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 48
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 53
        }
      },
      "5": {
        start: {
          line: 7,
          column: 19
        },
        end: {
          line: 7,
          column: 47
        }
      },
      "6": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "7": {
        start: {
          line: 9,
          column: 28
        },
        end: {
          line: 9,
          column: 68
        }
      },
      "8": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 38
        }
      },
      "9": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 30
        }
      },
      "10": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 75,
          column: 3
        }
      },
      "11": {
        start: {
          line: 16,
          column: 31
        },
        end: {
          line: 16,
          column: 41
        }
      },
      "12": {
        start: {
          line: 17,
          column: 19
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "13": {
        start: {
          line: 18,
          column: 18
        },
        end: {
          line: 18,
          column: 27
        }
      },
      "14": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "15": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 65
        }
      },
      "16": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "17": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "19": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "20": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 96
        }
      },
      "21": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 52
        }
      },
      "22": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 32,
          column: 24
        }
      },
      "23": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "24": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 134
        }
      },
      "25": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 36,
          column: 29
        }
      },
      "26": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 59,
          column: 6
        }
      },
      "27": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "28": {
        start: {
          line: 39,
          column: 28
        },
        end: {
          line: 39,
          column: 44
        }
      },
      "29": {
        start: {
          line: 40,
          column: 38
        },
        end: {
          line: 40,
          column: 46
        }
      },
      "30": {
        start: {
          line: 42,
          column: 33
        },
        end: {
          line: 42,
          column: 116
        }
      },
      "31": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "32": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 43
        }
      },
      "33": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 29
        }
      },
      "34": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 81
        }
      },
      "35": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 86
        }
      },
      "36": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 38
        }
      },
      "37": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 44
        }
      },
      "38": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 66,
          column: 5
        }
      },
      "39": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 44
        }
      },
      "40": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 68
        }
      },
      "41": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 68,
          column: 26
        }
      },
      "42": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 96
        }
      },
      "43": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 74,
          column: 71
        }
      },
      "44": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 90,
          column: 3
        }
      },
      "45": {
        start: {
          line: 80,
          column: 31
        },
        end: {
          line: 80,
          column: 41
        }
      },
      "46": {
        start: {
          line: 81,
          column: 21
        },
        end: {
          line: 81,
          column: 84
        }
      },
      "47": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "48": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 65
        }
      },
      "49": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 89,
          column: 49
        }
      },
      "50": {
        start: {
          line: 88,
          column: 52
        },
        end: {
          line: 88,
          column: 67
        }
      },
      "51": {
        start: {
          line: 94,
          column: 0
        },
        end: {
          line: 133,
          column: 3
        }
      },
      "52": {
        start: {
          line: 95,
          column: 40
        },
        end: {
          line: 95,
          column: 50
        }
      },
      "53": {
        start: {
          line: 96,
          column: 19
        },
        end: {
          line: 96,
          column: 32
        }
      },
      "54": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 67
        }
      },
      "55": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "56": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "57": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "58": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 98
        }
      },
      "59": {
        start: {
          line: 106,
          column: 23
        },
        end: {
          line: 106,
          column: 79
        }
      },
      "60": {
        start: {
          line: 106,
          column: 58
        },
        end: {
          line: 106,
          column: 78
        }
      },
      "61": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "62": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 62
        }
      },
      "63": {
        start: {
          line: 110,
          column: 18
        },
        end: {
          line: 110,
          column: 45
        }
      },
      "64": {
        start: {
          line: 111,
          column: 23
        },
        end: {
          line: 111,
          column: 38
        }
      },
      "65": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "66": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "67": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 98
        }
      },
      "68": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 121,
          column: 42
        }
      },
      "69": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "70": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 44
        }
      },
      "71": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 68
        }
      },
      "72": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 26
        }
      },
      "73": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 82
        }
      },
      "74": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 132,
          column: 37
        }
      },
      "75": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "76": {
        start: {
          line: 138,
          column: 40
        },
        end: {
          line: 138,
          column: 50
        }
      },
      "77": {
        start: {
          line: 139,
          column: 19
        },
        end: {
          line: 139,
          column: 32
        }
      },
      "78": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 141,
          column: 67
        }
      },
      "79": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 144,
          column: 5
        }
      },
      "80": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 65
        }
      },
      "81": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "82": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 96
        }
      },
      "83": {
        start: {
          line: 149,
          column: 18
        },
        end: {
          line: 149,
          column: 69
        }
      },
      "84": {
        start: {
          line: 149,
          column: 48
        },
        end: {
          line: 149,
          column: 68
        }
      },
      "85": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "86": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 62
        }
      },
      "87": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 156,
          column: 7
        }
      },
      "88": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 32
        }
      },
      "89": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 27
        }
      },
      "90": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 159,
          column: 68
        }
      },
      "91": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 26
        }
      },
      "92": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 161,
          column: 85
        }
      },
      "93": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 165,
          column: 45
        }
      },
      "94": {
        start: {
          line: 170,
          column: 0
        },
        end: {
          line: 205,
          column: 3
        }
      },
      "95": {
        start: {
          line: 171,
          column: 31
        },
        end: {
          line: 171,
          column: 41
        }
      },
      "96": {
        start: {
          line: 172,
          column: 27
        },
        end: {
          line: 172,
          column: 35
        }
      },
      "97": {
        start: {
          line: 173,
          column: 19
        },
        end: {
          line: 173,
          column: 32
        }
      },
      "98": {
        start: {
          line: 175,
          column: 21
        },
        end: {
          line: 175,
          column: 67
        }
      },
      "99": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "100": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 65
        }
      },
      "101": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "102": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 97
        }
      },
      "103": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "104": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 91
        }
      },
      "105": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 67
        }
      },
      "106": {
        start: {
          line: 187,
          column: 58
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "107": {
        start: {
          line: 188,
          column: 23
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "108": {
        start: {
          line: 188,
          column: 47
        },
        end: {
          line: 188,
          column: 77
        }
      },
      "109": {
        start: {
          line: 189,
          column: 21
        },
        end: {
          line: 189,
          column: 76
        }
      },
      "110": {
        start: {
          line: 189,
          column: 51
        },
        end: {
          line: 189,
          column: 75
        }
      },
      "111": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 192,
          column: 5
        }
      },
      "112": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 85
        }
      },
      "113": {
        start: {
          line: 194,
          column: 28
        },
        end: {
          line: 196,
          column: 6
        }
      },
      "114": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 67
        }
      },
      "115": {
        start: {
          line: 195,
          column: 45
        },
        end: {
          line: 195,
          column: 65
        }
      },
      "116": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 197,
          column: 38
        }
      },
      "117": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 198,
          column: 68
        }
      },
      "118": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 26
        }
      },
      "119": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 73
        }
      },
      "120": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 204,
          column: 40
        }
      },
      "121": {
        start: {
          line: 209,
          column: 0
        },
        end: {
          line: 240,
          column: 3
        }
      },
      "122": {
        start: {
          line: 210,
          column: 40
        },
        end: {
          line: 210,
          column: 50
        }
      },
      "123": {
        start: {
          line: 211,
          column: 30
        },
        end: {
          line: 211,
          column: 38
        }
      },
      "124": {
        start: {
          line: 212,
          column: 19
        },
        end: {
          line: 212,
          column: 32
        }
      },
      "125": {
        start: {
          line: 214,
          column: 21
        },
        end: {
          line: 214,
          column: 67
        }
      },
      "126": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 217,
          column: 5
        }
      },
      "127": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 65
        }
      },
      "128": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 220,
          column: 5
        }
      },
      "129": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 219,
          column: 96
        }
      },
      "130": {
        start: {
          line: 222,
          column: 18
        },
        end: {
          line: 222,
          column: 69
        }
      },
      "131": {
        start: {
          line: 222,
          column: 48
        },
        end: {
          line: 222,
          column: 68
        }
      },
      "132": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 225,
          column: 5
        }
      },
      "133": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 62
        }
      },
      "134": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      "135": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 32
        }
      },
      "136": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 232,
          column: 5
        }
      },
      "137": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 26
        }
      },
      "138": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 233,
          column: 68
        }
      },
      "139": {
        start: {
          line: 234,
          column: 4
        },
        end: {
          line: 234,
          column: 26
        }
      },
      "140": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 235,
          column: 89
        }
      },
      "141": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 239,
          column: 45
        }
      },
      "142": {
        start: {
          line: 244,
          column: 0
        },
        end: {
          line: 280,
          column: 3
        }
      },
      "143": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 279,
          column: 57
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 60
          },
          end: {
            line: 15,
            column: 61
          }
        },
        loc: {
          start: {
            line: 15,
            column: 80
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 37
          },
          end: {
            line: 37,
            column: 38
          }
        },
        loc: {
          start: {
            line: 37,
            column: 60
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 57
          },
          end: {
            line: 79,
            column: 58
          }
        },
        loc: {
          start: {
            line: 79,
            column: 77
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 88,
            column: 43
          },
          end: {
            line: 88,
            column: 44
          }
        },
        loc: {
          start: {
            line: 88,
            column: 52
          },
          end: {
            line: 88,
            column: 67
          }
        },
        line: 88
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 59
          },
          end: {
            line: 94,
            column: 60
          }
        },
        loc: {
          start: {
            line: 94,
            column: 79
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 49
          },
          end: {
            line: 106,
            column: 50
          }
        },
        loc: {
          start: {
            line: 106,
            column: 58
          },
          end: {
            line: 106,
            column: 78
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 55
          },
          end: {
            line: 137,
            column: 56
          }
        },
        loc: {
          start: {
            line: 137,
            column: 75
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 149,
            column: 39
          },
          end: {
            line: 149,
            column: 40
          }
        },
        loc: {
          start: {
            line: 149,
            column: 48
          },
          end: {
            line: 149,
            column: 68
          }
        },
        line: 149
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 154,
            column: 29
          }
        },
        loc: {
          start: {
            line: 154,
            column: 37
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 154
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 170,
            column: 61
          },
          end: {
            line: 170,
            column: 62
          }
        },
        loc: {
          start: {
            line: 170,
            column: 81
          },
          end: {
            line: 205,
            column: 1
          }
        },
        line: 170
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 187,
            column: 49
          },
          end: {
            line: 187,
            column: 50
          }
        },
        loc: {
          start: {
            line: 187,
            column: 58
          },
          end: {
            line: 187,
            column: 66
          }
        },
        line: 187
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 188,
            column: 41
          },
          end: {
            line: 188,
            column: 42
          }
        },
        loc: {
          start: {
            line: 188,
            column: 47
          },
          end: {
            line: 188,
            column: 77
          }
        },
        line: 188
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 189,
            column: 45
          },
          end: {
            line: 189,
            column: 46
          }
        },
        loc: {
          start: {
            line: 189,
            column: 51
          },
          end: {
            line: 189,
            column: 75
          }
        },
        line: 189
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 194,
            column: 43
          },
          end: {
            line: 194,
            column: 44
          }
        },
        loc: {
          start: {
            line: 194,
            column: 54
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 194
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 195,
            column: 36
          },
          end: {
            line: 195,
            column: 37
          }
        },
        loc: {
          start: {
            line: 195,
            column: 45
          },
          end: {
            line: 195,
            column: 65
          }
        },
        line: 195
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 209,
            column: 58
          },
          end: {
            line: 209,
            column: 59
          }
        },
        loc: {
          start: {
            line: 209,
            column: 78
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 209
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 222,
            column: 39
          },
          end: {
            line: 222,
            column: 40
          }
        },
        loc: {
          start: {
            line: 222,
            column: 48
          },
          end: {
            line: 222,
            column: 68
          }
        },
        line: 222
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 244,
            column: 58
          },
          end: {
            line: 244,
            column: 59
          }
        },
        loc: {
          start: {
            line: 244,
            column: 79
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 244
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 14
          }
        }, {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 36
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 47,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 47,
            column: 64
          }
        }, {
          start: {
            line: 47,
            column: 67
          },
          end: {
            line: 47,
            column: 74
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 48,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 44
          },
          end: {
            line: 48,
            column: 55
          }
        }, {
          start: {
            line: 48,
            column: 58
          },
          end: {
            line: 48,
            column: 62
          }
        }],
        line: 48
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 64,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 64,
            column: 31
          }
        }, {
          start: {
            line: 64,
            column: 35
          },
          end: {
            line: 64,
            column: 60
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "10": {
        loc: {
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 22
          },
          end: {
            line: 88,
            column: 68
          }
        }, {
          start: {
            line: 88,
            column: 72
          },
          end: {
            line: 88,
            column: 90
          }
        }, {
          start: {
            line: 88,
            column: 94
          },
          end: {
            line: 88,
            column: 98
          }
        }],
        line: 88
      },
      "11": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "12": {
        loc: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "13": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "14": {
        loc: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "15": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 123,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 123,
            column: 18
          }
        }, {
          start: {
            line: 123,
            column: 22
          },
          end: {
            line: 123,
            column: 48
          }
        }],
        line: 123
      },
      "16": {
        loc: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "17": {
        loc: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "18": {
        loc: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "19": {
        loc: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 178,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "20": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "21": {
        loc: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 185,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 183,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 183,
            column: 34
          }
        }, {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 183,
            column: 82
          }
        }],
        line: 183
      },
      "23": {
        loc: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "24": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 190,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 190,
            column: 29
          }
        }, {
          start: {
            line: 190,
            column: 33
          },
          end: {
            line: 190,
            column: 52
          }
        }],
        line: 190
      },
      "25": {
        loc: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "26": {
        loc: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "27": {
        loc: {
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "28": {
        loc: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "29": {
        loc: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\propertyPhoto.controller.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\propertyPhoto.controller.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { Property } from '../models/Property';\r\nimport { logger } from '../utils/logger';\r\nimport { ApiResponse } from '../utils/apiResponse';\r\nimport { AppError } from '../utils/appError';\r\nimport { catchAsync } from '../utils/catchAsync';\r\nimport { uploadPropertyPhoto, deleteImage } from '../services/cloudinaryService';\r\nimport { Types } from 'mongoose';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * Upload property photos\r\n */\r\nexport const uploadPropertyPhotos = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId } = req.params;\r\n  const userId = req.user?._id;\r\n  const files = req.files as Express.Multer.File[];\r\n\r\n  if (!files || files.length === 0) {\r\n    throw new AppError('No photos provided', 400);\r\n  }\r\n\r\n  // Find property and verify ownership\r\n  const property = await Property.findById(propertyId);\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  if (property.ownerId.toString() !== userId) {\r\n    throw new AppError('You can only upload photos to your own properties', 403);\r\n  }\r\n\r\n  // Check photo limit (max 20 photos per property)\r\n  const currentPhotoCount = property.photos.length;\r\n  const maxPhotos = 20;\r\n  \r\n  if (currentPhotoCount + files.length > maxPhotos) {\r\n    throw new AppError(`Cannot upload more than ${maxPhotos} photos per property. Current: ${currentPhotoCount}`, 400);\r\n  }\r\n\r\n  const uploadedPhotos: any[] = [];\r\n  const uploadPromises = files.map(async (file, index) => {\r\n    try {\r\n      const photoId = uuidv4();\r\n      const { caption, room } = req.body;\r\n      \r\n      // Upload to Cloudinary with property-specific folder\r\n      const uploadResult = await uploadPropertyPhoto(\r\n        file.buffer,\r\n        userId,\r\n        propertyId\r\n      );\r\n\r\n      const photoData = {\r\n        id: photoId,\r\n        url: uploadResult.secure_url,\r\n        publicId: uploadResult.public_id,\r\n        caption: Array.isArray(caption) ? caption[index] : caption,\r\n        room: Array.isArray(room) ? room[index] : room,\r\n        isPrimary: false, // Will be set separately\r\n        uploadedAt: new Date()\r\n      };\r\n\r\n      uploadedPhotos.push(photoData);\r\n      return photoData;\r\n    } catch (error) {\r\n      logger.error(`Failed to upload photo ${index + 1}:`, error);\r\n      throw new AppError(`Failed to upload photo ${index + 1}`, 500);\r\n    }\r\n  });\r\n\r\n  await Promise.all(uploadPromises);\r\n\r\n  // Add photos to property\r\n  property.photos.push(...uploadedPhotos);\r\n\r\n  // If this is the first photo, make it primary\r\n  if (currentPhotoCount === 0 && uploadedPhotos.length > 0) {\r\n    property.photos[0].isPrimary = true;\r\n  }\r\n\r\n  property.lastModifiedBy = new Types.ObjectId(userId);\r\n  await property.save();\r\n\r\n  logger.info(`Uploaded ${uploadedPhotos.length} photos to property: ${propertyId}`);\r\n\r\n  return ApiResponse.success(res, {\r\n    uploadedPhotos,\r\n    totalPhotos: property.photos.length,\r\n    maxPhotos\r\n  }, `Successfully uploaded ${uploadedPhotos.length} photo(s)`, 201);\r\n});\r\n\r\n/**\r\n * Get property photos\r\n */\r\nexport const getPropertyPhotos = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId } = req.params;\r\n\r\n  const property = await Property.findById(propertyId).select('photos');\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  return ApiResponse.success(res, {\r\n    photos: property.photos,\r\n    totalPhotos: property.photos.length,\r\n    primaryPhoto: property.photos.find(photo => photo.isPrimary) || property.photos[0] || null\r\n  }, 'Property photos retrieved successfully');\r\n});\r\n\r\n/**\r\n * Delete a property photo\r\n */\r\nexport const deletePropertyPhoto = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId, photoId } = req.params;\r\n  const userId = req.user?._id;\r\n\r\n  // Find property and verify ownership\r\n  const property = await Property.findById(propertyId);\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  if (property.ownerId.toString() !== userId) {\r\n    throw new AppError('You can only delete photos from your own properties', 403);\r\n  }\r\n\r\n  // Find photo\r\n  const photoIndex = property.photos.findIndex(photo => photo.id === photoId);\r\n  if (photoIndex === -1) {\r\n    throw new AppError('Photo not found', 404);\r\n  }\r\n\r\n  const photo = property.photos[photoIndex];\r\n  const wasPrimary = photo.isPrimary;\r\n\r\n  try {\r\n    // Delete from Cloudinary\r\n    await deleteImage(photo.publicId);\r\n  } catch (error) {\r\n    logger.error(`Failed to delete photo from Cloudinary: ${photo.publicId}`, error);\r\n    // Continue with database deletion even if Cloudinary deletion fails\r\n  }\r\n\r\n  // Remove photo from property\r\n  property.photos.splice(photoIndex, 1);\r\n\r\n  // If deleted photo was primary, make the first remaining photo primary\r\n  if (wasPrimary && property.photos.length > 0) {\r\n    property.photos[0].isPrimary = true;\r\n  }\r\n\r\n  property.lastModifiedBy = new Types.ObjectId(userId);\r\n  await property.save();\r\n\r\n  logger.info(`Deleted photo ${photoId} from property: ${propertyId}`);\r\n\r\n  return ApiResponse.success(res, {\r\n    deletedPhotoId: photoId,\r\n    remainingPhotos: property.photos.length\r\n  }, 'Photo deleted successfully');\r\n});\r\n\r\n/**\r\n * Set primary photo\r\n */\r\nexport const setPrimaryPhoto = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId, photoId } = req.params;\r\n  const userId = req.user?._id;\r\n\r\n  // Find property and verify ownership\r\n  const property = await Property.findById(propertyId);\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  if (property.ownerId.toString() !== userId) {\r\n    throw new AppError('You can only modify photos of your own properties', 403);\r\n  }\r\n\r\n  // Find photo\r\n  const photo = property.photos.find(photo => photo.id === photoId);\r\n  if (!photo) {\r\n    throw new AppError('Photo not found', 404);\r\n  }\r\n\r\n  // Remove primary status from all photos\r\n  property.photos.forEach(photo => {\r\n    photo.isPrimary = false;\r\n  });\r\n\r\n  // Set new primary photo\r\n  photo.isPrimary = true;\r\n\r\n  property.lastModifiedBy = new Types.ObjectId(userId);\r\n  await property.save();\r\n\r\n  logger.info(`Set primary photo ${photoId} for property: ${propertyId}`);\r\n\r\n  return ApiResponse.success(res, {\r\n    primaryPhoto: photo,\r\n    propertyId\r\n  }, 'Primary photo updated successfully');\r\n});\r\n\r\n/**\r\n * Reorder property photos\r\n */\r\nexport const reorderPropertyPhotos = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId } = req.params;\r\n  const { photoOrder } = req.body;\r\n  const userId = req.user?._id;\r\n\r\n  // Find property and verify ownership\r\n  const property = await Property.findById(propertyId);\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  if (property.ownerId.toString() !== userId) {\r\n    throw new AppError('You can only reorder photos of your own properties', 403);\r\n  }\r\n\r\n  // Validate photo order\r\n  if (!Array.isArray(photoOrder) || photoOrder.length !== property.photos.length) {\r\n    throw new AppError('Photo order must include all existing photos', 400);\r\n  }\r\n\r\n  // Verify all photo IDs exist\r\n  const existingPhotoIds = property.photos.map(photo => photo.id);\r\n  const missingIds = photoOrder.filter(id => !existingPhotoIds.includes(id));\r\n  const extraIds = existingPhotoIds.filter(id => !photoOrder.includes(id));\r\n\r\n  if (missingIds.length > 0 || extraIds.length > 0) {\r\n    throw new AppError('Photo order contains invalid photo IDs', 400);\r\n  }\r\n\r\n  // Reorder photos\r\n  const reorderedPhotos = photoOrder.map(photoId => {\r\n    return property.photos.find(photo => photo.id === photoId)!;\r\n  });\r\n\r\n  property.photos = reorderedPhotos;\r\n  property.lastModifiedBy = new Types.ObjectId(userId);\r\n  await property.save();\r\n\r\n  logger.info(`Reordered photos for property: ${propertyId}`);\r\n\r\n  return ApiResponse.success(res, {\r\n    photos: property.photos,\r\n    newOrder: photoOrder\r\n  }, 'Photos reordered successfully');\r\n});\r\n\r\n/**\r\n * Update photo details (caption, room)\r\n */\r\nexport const updatePhotoDetails = catchAsync(async (req: Request, res: Response) => {\r\n  const { id: propertyId, photoId } = req.params;\r\n  const { caption, room } = req.body;\r\n  const userId = req.user?._id;\r\n\r\n  // Find property and verify ownership\r\n  const property = await Property.findById(propertyId);\r\n  if (!property) {\r\n    throw new AppError('Property not found', 404);\r\n  }\r\n\r\n  if (property.ownerId.toString() !== userId) {\r\n    throw new AppError('You can only update photos of your own properties', 403);\r\n  }\r\n\r\n  // Find photo\r\n  const photo = property.photos.find(photo => photo.id === photoId);\r\n  if (!photo) {\r\n    throw new AppError('Photo not found', 404);\r\n  }\r\n\r\n  // Update photo details\r\n  if (caption !== undefined) {\r\n    photo.caption = caption;\r\n  }\r\n  if (room !== undefined) {\r\n    photo.room = room;\r\n  }\r\n\r\n  property.lastModifiedBy = new Types.ObjectId(userId);\r\n  await property.save();\r\n\r\n  logger.info(`Updated photo details ${photoId} for property: ${propertyId}`);\r\n\r\n  return ApiResponse.success(res, {\r\n    photo,\r\n    propertyId\r\n  }, 'Photo details updated successfully');\r\n});\r\n\r\n/**\r\n * Get photo upload guidelines\r\n */\r\nexport const getPhotoGuidelines = catchAsync(async (_req: Request, res: Response) => {\r\n  return ApiResponse.success(res, {\r\n    guidelines: {\r\n      maxPhotos: 20,\r\n      maxFileSize: '10MB',\r\n      allowedFormats: ['JPEG', 'PNG', 'WebP'],\r\n      recommendedSize: '1200x800 pixels',\r\n      tips: [\r\n        'Use high-quality, well-lit photos',\r\n        'Include photos of all rooms and common areas',\r\n        'Show the property\\'s best features',\r\n        'Include exterior and interior shots',\r\n        'Avoid blurry or dark images',\r\n        'Take photos from multiple angles',\r\n        'Include amenities like kitchen, bathroom, parking',\r\n        'Show the neighborhood and nearby landmarks'\r\n      ]\r\n    },\r\n    requirements: {\r\n      minPhotos: 1,\r\n      primaryPhotoRequired: true,\r\n      roomLabelsRecommended: true\r\n    },\r\n    roomSuggestions: [\r\n      'living room',\r\n      'bedroom',\r\n      'kitchen',\r\n      'bathroom',\r\n      'dining room',\r\n      'balcony',\r\n      'exterior',\r\n      'parking',\r\n      'compound',\r\n      'neighborhood'\r\n    ]\r\n  }, 'Photo upload guidelines retrieved successfully');\r\n});\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f412bed23fbbf514b8aa4beacfd0f47726e11af0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dv5gqiijs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dv5gqiijs();
cov_2dv5gqiijs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2dv5gqiijs().s[1]++;
exports.getPhotoGuidelines = exports.updatePhotoDetails = exports.reorderPropertyPhotos = exports.setPrimaryPhoto = exports.deletePropertyPhoto = exports.getPropertyPhotos = exports.uploadPropertyPhotos = void 0;
const Property_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[2]++, require("../models/Property"));
const logger_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[3]++, require("../utils/logger"));
const apiResponse_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[4]++, require("../utils/apiResponse"));
const appError_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[5]++, require("../utils/appError"));
const catchAsync_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[6]++, require("../utils/catchAsync"));
const cloudinaryService_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[7]++, require("../services/cloudinaryService"));
const mongoose_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[8]++, require("mongoose"));
const uuid_1 =
/* istanbul ignore next */
(cov_2dv5gqiijs().s[9]++, require("uuid"));
/**
 * Upload property photos
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[10]++;
exports.uploadPropertyPhotos = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[0]++;
  const {
    id: propertyId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[11]++, req.params);
  const userId =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[12]++, req.user?._id);
  const files =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[13]++, req.files);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[14]++;
  if (
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[1][0]++, !files) ||
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[1][1]++, files.length === 0)) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[0][0]++;
    cov_2dv5gqiijs().s[15]++;
    throw new appError_1.AppError('No photos provided', 400);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[0][1]++;
  }
  // Find property and verify ownership
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[16]++, await Property_1.Property.findById(propertyId));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[17]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[2][0]++;
    cov_2dv5gqiijs().s[18]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[2][1]++;
  }
  cov_2dv5gqiijs().s[19]++;
  if (property.ownerId.toString() !== userId) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[3][0]++;
    cov_2dv5gqiijs().s[20]++;
    throw new appError_1.AppError('You can only upload photos to your own properties', 403);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[3][1]++;
  }
  // Check photo limit (max 20 photos per property)
  const currentPhotoCount =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[21]++, property.photos.length);
  const maxPhotos =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[22]++, 20);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[23]++;
  if (currentPhotoCount + files.length > maxPhotos) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[4][0]++;
    cov_2dv5gqiijs().s[24]++;
    throw new appError_1.AppError(`Cannot upload more than ${maxPhotos} photos per property. Current: ${currentPhotoCount}`, 400);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[4][1]++;
  }
  const uploadedPhotos =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[25]++, []);
  const uploadPromises =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[26]++, files.map(async (file, index) => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[1]++;
    cov_2dv5gqiijs().s[27]++;
    try {
      const photoId =
      /* istanbul ignore next */
      (cov_2dv5gqiijs().s[28]++, (0, uuid_1.v4)());
      const {
        caption,
        room
      } =
      /* istanbul ignore next */
      (cov_2dv5gqiijs().s[29]++, req.body);
      // Upload to Cloudinary with property-specific folder
      const uploadResult =
      /* istanbul ignore next */
      (cov_2dv5gqiijs().s[30]++, await (0, cloudinaryService_1.uploadPropertyPhoto)(file.buffer, userId, propertyId));
      const photoData =
      /* istanbul ignore next */
      (cov_2dv5gqiijs().s[31]++, {
        id: photoId,
        url: uploadResult.secure_url,
        publicId: uploadResult.public_id,
        caption: Array.isArray(caption) ?
        /* istanbul ignore next */
        (cov_2dv5gqiijs().b[5][0]++, caption[index]) :
        /* istanbul ignore next */
        (cov_2dv5gqiijs().b[5][1]++, caption),
        room: Array.isArray(room) ?
        /* istanbul ignore next */
        (cov_2dv5gqiijs().b[6][0]++, room[index]) :
        /* istanbul ignore next */
        (cov_2dv5gqiijs().b[6][1]++, room),
        isPrimary: false,
        // Will be set separately
        uploadedAt: new Date()
      });
      /* istanbul ignore next */
      cov_2dv5gqiijs().s[32]++;
      uploadedPhotos.push(photoData);
      /* istanbul ignore next */
      cov_2dv5gqiijs().s[33]++;
      return photoData;
    } catch (error) {
      /* istanbul ignore next */
      cov_2dv5gqiijs().s[34]++;
      logger_1.logger.error(`Failed to upload photo ${index + 1}:`, error);
      /* istanbul ignore next */
      cov_2dv5gqiijs().s[35]++;
      throw new appError_1.AppError(`Failed to upload photo ${index + 1}`, 500);
    }
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[36]++;
  await Promise.all(uploadPromises);
  // Add photos to property
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[37]++;
  property.photos.push(...uploadedPhotos);
  // If this is the first photo, make it primary
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[8][0]++, currentPhotoCount === 0) &&
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[8][1]++, uploadedPhotos.length > 0)) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[7][0]++;
    cov_2dv5gqiijs().s[39]++;
    property.photos[0].isPrimary = true;
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[7][1]++;
  }
  cov_2dv5gqiijs().s[40]++;
  property.lastModifiedBy = new mongoose_1.Types.ObjectId(userId);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[41]++;
  await property.save();
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[42]++;
  logger_1.logger.info(`Uploaded ${uploadedPhotos.length} photos to property: ${propertyId}`);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[43]++;
  return apiResponse_1.ApiResponse.success(res, {
    uploadedPhotos,
    totalPhotos: property.photos.length,
    maxPhotos
  }, `Successfully uploaded ${uploadedPhotos.length} photo(s)`, 201);
});
/**
 * Get property photos
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[44]++;
exports.getPropertyPhotos = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[2]++;
  const {
    id: propertyId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[45]++, req.params);
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[46]++, await Property_1.Property.findById(propertyId).select('photos'));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[47]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[9][0]++;
    cov_2dv5gqiijs().s[48]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[9][1]++;
  }
  cov_2dv5gqiijs().s[49]++;
  return apiResponse_1.ApiResponse.success(res, {
    photos: property.photos,
    totalPhotos: property.photos.length,
    primaryPhoto:
    /* istanbul ignore next */
    (cov_2dv5gqiijs().b[10][0]++, property.photos.find(photo => {
      /* istanbul ignore next */
      cov_2dv5gqiijs().f[3]++;
      cov_2dv5gqiijs().s[50]++;
      return photo.isPrimary;
    })) ||
    /* istanbul ignore next */
    (cov_2dv5gqiijs().b[10][1]++, property.photos[0]) ||
    /* istanbul ignore next */
    (cov_2dv5gqiijs().b[10][2]++, null)
  }, 'Property photos retrieved successfully');
});
/**
 * Delete a property photo
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[51]++;
exports.deletePropertyPhoto = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[4]++;
  const {
    id: propertyId,
    photoId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[52]++, req.params);
  const userId =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[53]++, req.user?._id);
  // Find property and verify ownership
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[54]++, await Property_1.Property.findById(propertyId));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[55]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[11][0]++;
    cov_2dv5gqiijs().s[56]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[11][1]++;
  }
  cov_2dv5gqiijs().s[57]++;
  if (property.ownerId.toString() !== userId) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[12][0]++;
    cov_2dv5gqiijs().s[58]++;
    throw new appError_1.AppError('You can only delete photos from your own properties', 403);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[12][1]++;
  }
  // Find photo
  const photoIndex =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[59]++, property.photos.findIndex(photo => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[5]++;
    cov_2dv5gqiijs().s[60]++;
    return photo.id === photoId;
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[61]++;
  if (photoIndex === -1) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[13][0]++;
    cov_2dv5gqiijs().s[62]++;
    throw new appError_1.AppError('Photo not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[13][1]++;
  }
  const photo =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[63]++, property.photos[photoIndex]);
  const wasPrimary =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[64]++, photo.isPrimary);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[65]++;
  try {
    /* istanbul ignore next */
    cov_2dv5gqiijs().s[66]++;
    // Delete from Cloudinary
    await (0, cloudinaryService_1.deleteImage)(photo.publicId);
  } catch (error) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().s[67]++;
    logger_1.logger.error(`Failed to delete photo from Cloudinary: ${photo.publicId}`, error);
    // Continue with database deletion even if Cloudinary deletion fails
  }
  // Remove photo from property
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[68]++;
  property.photos.splice(photoIndex, 1);
  // If deleted photo was primary, make the first remaining photo primary
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[69]++;
  if (
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[15][0]++, wasPrimary) &&
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[15][1]++, property.photos.length > 0)) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[14][0]++;
    cov_2dv5gqiijs().s[70]++;
    property.photos[0].isPrimary = true;
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[14][1]++;
  }
  cov_2dv5gqiijs().s[71]++;
  property.lastModifiedBy = new mongoose_1.Types.ObjectId(userId);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[72]++;
  await property.save();
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[73]++;
  logger_1.logger.info(`Deleted photo ${photoId} from property: ${propertyId}`);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[74]++;
  return apiResponse_1.ApiResponse.success(res, {
    deletedPhotoId: photoId,
    remainingPhotos: property.photos.length
  }, 'Photo deleted successfully');
});
/**
 * Set primary photo
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[75]++;
exports.setPrimaryPhoto = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[6]++;
  const {
    id: propertyId,
    photoId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[76]++, req.params);
  const userId =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[77]++, req.user?._id);
  // Find property and verify ownership
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[78]++, await Property_1.Property.findById(propertyId));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[79]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[16][0]++;
    cov_2dv5gqiijs().s[80]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[16][1]++;
  }
  cov_2dv5gqiijs().s[81]++;
  if (property.ownerId.toString() !== userId) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[17][0]++;
    cov_2dv5gqiijs().s[82]++;
    throw new appError_1.AppError('You can only modify photos of your own properties', 403);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[17][1]++;
  }
  // Find photo
  const photo =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[83]++, property.photos.find(photo => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[7]++;
    cov_2dv5gqiijs().s[84]++;
    return photo.id === photoId;
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[85]++;
  if (!photo) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[18][0]++;
    cov_2dv5gqiijs().s[86]++;
    throw new appError_1.AppError('Photo not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[18][1]++;
  }
  // Remove primary status from all photos
  cov_2dv5gqiijs().s[87]++;
  property.photos.forEach(photo => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[8]++;
    cov_2dv5gqiijs().s[88]++;
    photo.isPrimary = false;
  });
  // Set new primary photo
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[89]++;
  photo.isPrimary = true;
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[90]++;
  property.lastModifiedBy = new mongoose_1.Types.ObjectId(userId);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[91]++;
  await property.save();
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[92]++;
  logger_1.logger.info(`Set primary photo ${photoId} for property: ${propertyId}`);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[93]++;
  return apiResponse_1.ApiResponse.success(res, {
    primaryPhoto: photo,
    propertyId
  }, 'Primary photo updated successfully');
});
/**
 * Reorder property photos
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[94]++;
exports.reorderPropertyPhotos = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[9]++;
  const {
    id: propertyId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[95]++, req.params);
  const {
    photoOrder
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[96]++, req.body);
  const userId =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[97]++, req.user?._id);
  // Find property and verify ownership
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[98]++, await Property_1.Property.findById(propertyId));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[99]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[19][0]++;
    cov_2dv5gqiijs().s[100]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[19][1]++;
  }
  cov_2dv5gqiijs().s[101]++;
  if (property.ownerId.toString() !== userId) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[20][0]++;
    cov_2dv5gqiijs().s[102]++;
    throw new appError_1.AppError('You can only reorder photos of your own properties', 403);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[20][1]++;
  }
  // Validate photo order
  cov_2dv5gqiijs().s[103]++;
  if (
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[22][0]++, !Array.isArray(photoOrder)) ||
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[22][1]++, photoOrder.length !== property.photos.length)) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[21][0]++;
    cov_2dv5gqiijs().s[104]++;
    throw new appError_1.AppError('Photo order must include all existing photos', 400);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[21][1]++;
  }
  // Verify all photo IDs exist
  const existingPhotoIds =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[105]++, property.photos.map(photo => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[10]++;
    cov_2dv5gqiijs().s[106]++;
    return photo.id;
  }));
  const missingIds =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[107]++, photoOrder.filter(id => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[11]++;
    cov_2dv5gqiijs().s[108]++;
    return !existingPhotoIds.includes(id);
  }));
  const extraIds =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[109]++, existingPhotoIds.filter(id => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[12]++;
    cov_2dv5gqiijs().s[110]++;
    return !photoOrder.includes(id);
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[111]++;
  if (
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[24][0]++, missingIds.length > 0) ||
  /* istanbul ignore next */
  (cov_2dv5gqiijs().b[24][1]++, extraIds.length > 0)) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[23][0]++;
    cov_2dv5gqiijs().s[112]++;
    throw new appError_1.AppError('Photo order contains invalid photo IDs', 400);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[23][1]++;
  }
  // Reorder photos
  const reorderedPhotos =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[113]++, photoOrder.map(photoId => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[13]++;
    cov_2dv5gqiijs().s[114]++;
    return property.photos.find(photo => {
      /* istanbul ignore next */
      cov_2dv5gqiijs().f[14]++;
      cov_2dv5gqiijs().s[115]++;
      return photo.id === photoId;
    });
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[116]++;
  property.photos = reorderedPhotos;
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[117]++;
  property.lastModifiedBy = new mongoose_1.Types.ObjectId(userId);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[118]++;
  await property.save();
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[119]++;
  logger_1.logger.info(`Reordered photos for property: ${propertyId}`);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[120]++;
  return apiResponse_1.ApiResponse.success(res, {
    photos: property.photos,
    newOrder: photoOrder
  }, 'Photos reordered successfully');
});
/**
 * Update photo details (caption, room)
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[121]++;
exports.updatePhotoDetails = (0, catchAsync_1.catchAsync)(async (req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[15]++;
  const {
    id: propertyId,
    photoId
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[122]++, req.params);
  const {
    caption,
    room
  } =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[123]++, req.body);
  const userId =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[124]++, req.user?._id);
  // Find property and verify ownership
  const property =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[125]++, await Property_1.Property.findById(propertyId));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[126]++;
  if (!property) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[25][0]++;
    cov_2dv5gqiijs().s[127]++;
    throw new appError_1.AppError('Property not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[25][1]++;
  }
  cov_2dv5gqiijs().s[128]++;
  if (property.ownerId.toString() !== userId) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[26][0]++;
    cov_2dv5gqiijs().s[129]++;
    throw new appError_1.AppError('You can only update photos of your own properties', 403);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[26][1]++;
  }
  // Find photo
  const photo =
  /* istanbul ignore next */
  (cov_2dv5gqiijs().s[130]++, property.photos.find(photo => {
    /* istanbul ignore next */
    cov_2dv5gqiijs().f[16]++;
    cov_2dv5gqiijs().s[131]++;
    return photo.id === photoId;
  }));
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[132]++;
  if (!photo) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[27][0]++;
    cov_2dv5gqiijs().s[133]++;
    throw new appError_1.AppError('Photo not found', 404);
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[27][1]++;
  }
  // Update photo details
  cov_2dv5gqiijs().s[134]++;
  if (caption !== undefined) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[28][0]++;
    cov_2dv5gqiijs().s[135]++;
    photo.caption = caption;
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[28][1]++;
  }
  cov_2dv5gqiijs().s[136]++;
  if (room !== undefined) {
    /* istanbul ignore next */
    cov_2dv5gqiijs().b[29][0]++;
    cov_2dv5gqiijs().s[137]++;
    photo.room = room;
  } else
  /* istanbul ignore next */
  {
    cov_2dv5gqiijs().b[29][1]++;
  }
  cov_2dv5gqiijs().s[138]++;
  property.lastModifiedBy = new mongoose_1.Types.ObjectId(userId);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[139]++;
  await property.save();
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[140]++;
  logger_1.logger.info(`Updated photo details ${photoId} for property: ${propertyId}`);
  /* istanbul ignore next */
  cov_2dv5gqiijs().s[141]++;
  return apiResponse_1.ApiResponse.success(res, {
    photo,
    propertyId
  }, 'Photo details updated successfully');
});
/**
 * Get photo upload guidelines
 */
/* istanbul ignore next */
cov_2dv5gqiijs().s[142]++;
exports.getPhotoGuidelines = (0, catchAsync_1.catchAsync)(async (_req, res) => {
  /* istanbul ignore next */
  cov_2dv5gqiijs().f[17]++;
  cov_2dv5gqiijs().s[143]++;
  return apiResponse_1.ApiResponse.success(res, {
    guidelines: {
      maxPhotos: 20,
      maxFileSize: '10MB',
      allowedFormats: ['JPEG', 'PNG', 'WebP'],
      recommendedSize: '1200x800 pixels',
      tips: ['Use high-quality, well-lit photos', 'Include photos of all rooms and common areas', 'Show the property\'s best features', 'Include exterior and interior shots', 'Avoid blurry or dark images', 'Take photos from multiple angles', 'Include amenities like kitchen, bathroom, parking', 'Show the neighborhood and nearby landmarks']
    },
    requirements: {
      minPhotos: 1,
      primaryPhotoRequired: true,
      roomLabelsRecommended: true
    },
    roomSuggestions: ['living room', 'bedroom', 'kitchen', 'bathroom', 'dining room', 'balcony', 'exterior', 'parking', 'compound', 'neighborhood']
  }, 'Photo upload guidelines retrieved successfully');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,