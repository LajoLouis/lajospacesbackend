{"version":3,"names":["cov_lx2ppz4r3","actualCoverage","redis_1","s","require","crypto_1","__importDefault","environment_1","logger_1","appError_1","TokenType","f","b","exports","tokenConfigs","EMAIL_VERIFICATION","ttl","length","prefix","format","caseSensitive","allowReuse","PASSWORD_RESET","PHONE_VERIFICATION","TWO_FACTOR_AUTH","API_ACCESS","REFRESH_TOKEN","MAGIC_LINK","ACCOUNT_ACTIVATION","EMAIL_CHANGE","PHONE_CHANGE","TokenService","constructor","connected","redisClient","createClient","url","config","REDIS_URL","socket","connectTimeout","lazyConnect","setupEventHandlers","on","logger","info","err","error","warn","connect","disconnect","quit","generateToken","type","token","default","randomBytes","toString","slice","i","Math","floor","random","chars","charAt","toLowerCase","createToken","userId","options","AppError","now","Date","customTTL","tokenData","email","phoneNumber","data","createdAt","expiresAt","getTime","usageCount","maxUsage","isActive","metadata","key","setEx","JSON","stringify","sAdd","expire","tokenPrefix","substring","verifyToken","consume","normalizedToken","tokenDataStr","get","parse","invalidateToken","usedAt","remainingTTL","sRem","result","del","invalidateUserTokens","tokens","sMembers","invalidatedCount","success","count","getUserTokens","tokenDataList","push","cleanupExpiredTokens","pattern","keys","cleanedCount","getTokenStats","stats","totalTokens","byType","timestamp","toISOString","Object","values","message","tokenExists","extendToken","additionalSeconds","currentTTL","newTTL","isConnected","tokenService"],"sources":["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\tokenService.ts"],"sourcesContent":["import { createClient, RedisClientType } from 'redis';\r\nimport crypto from 'crypto';\r\nimport { config } from '../config/environment';\r\nimport { logger } from '../utils/logger';\r\nimport { AppError } from '../utils/appError';\r\n\r\n// Token types and their configurations\r\nexport enum TokenType {\r\n  EMAIL_VERIFICATION = 'email_verification',\r\n  PASSWORD_RESET = 'password_reset',\r\n  PHONE_VERIFICATION = 'phone_verification',\r\n  TWO_FACTOR_AUTH = 'two_factor_auth',\r\n  API_ACCESS = 'api_access',\r\n  REFRESH_TOKEN = 'refresh_token',\r\n  MAGIC_LINK = 'magic_link',\r\n  ACCOUNT_ACTIVATION = 'account_activation',\r\n  EMAIL_CHANGE = 'email_change',\r\n  PHONE_CHANGE = 'phone_change'\r\n}\r\n\r\n// Token configuration interface\r\nexport interface TokenConfig {\r\n  ttl: number; // Time to live in seconds\r\n  length: number; // Token length\r\n  prefix: string;\r\n  format: 'hex' | 'base64' | 'numeric' | 'alphanumeric';\r\n  caseSensitive: boolean;\r\n  allowReuse: boolean; // Whether the same token can be used multiple times\r\n}\r\n\r\n// Token data interface\r\nexport interface TokenData {\r\n  token: string;\r\n  type: TokenType;\r\n  userId: string;\r\n  email?: string;\r\n  phoneNumber?: string;\r\n  data?: Record<string, any>;\r\n  createdAt: Date;\r\n  expiresAt: Date;\r\n  usedAt?: Date;\r\n  usageCount: number;\r\n  maxUsage: number;\r\n  isActive: boolean;\r\n  metadata?: {\r\n    ipAddress?: string;\r\n    userAgent?: string;\r\n    purpose?: string;\r\n  };\r\n}\r\n\r\n// Default token configurations\r\nconst tokenConfigs: Record<TokenType, TokenConfig> = {\r\n  [TokenType.EMAIL_VERIFICATION]: {\r\n    ttl: 24 * 60 * 60, // 24 hours\r\n    length: 32,\r\n    prefix: 'ev_',\r\n    format: 'hex',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.PASSWORD_RESET]: {\r\n    ttl: 60 * 60, // 1 hour\r\n    length: 32,\r\n    prefix: 'pr_',\r\n    format: 'hex',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.PHONE_VERIFICATION]: {\r\n    ttl: 10 * 60, // 10 minutes\r\n    length: 6,\r\n    prefix: 'pv_',\r\n    format: 'numeric',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.TWO_FACTOR_AUTH]: {\r\n    ttl: 5 * 60, // 5 minutes\r\n    length: 6,\r\n    prefix: '2fa_',\r\n    format: 'numeric',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.API_ACCESS]: {\r\n    ttl: 30 * 24 * 60 * 60, // 30 days\r\n    length: 40,\r\n    prefix: 'api_',\r\n    format: 'hex',\r\n    caseSensitive: true,\r\n    allowReuse: true\r\n  },\r\n  [TokenType.REFRESH_TOKEN]: {\r\n    ttl: 7 * 24 * 60 * 60, // 7 days\r\n    length: 32,\r\n    prefix: 'rt_',\r\n    format: 'hex',\r\n    caseSensitive: true,\r\n    allowReuse: true\r\n  },\r\n  [TokenType.MAGIC_LINK]: {\r\n    ttl: 15 * 60, // 15 minutes\r\n    length: 32,\r\n    prefix: 'ml_',\r\n    format: 'hex',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.ACCOUNT_ACTIVATION]: {\r\n    ttl: 7 * 24 * 60 * 60, // 7 days\r\n    length: 32,\r\n    prefix: 'aa_',\r\n    format: 'hex',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.EMAIL_CHANGE]: {\r\n    ttl: 60 * 60, // 1 hour\r\n    length: 32,\r\n    prefix: 'ec_',\r\n    format: 'hex',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  },\r\n  [TokenType.PHONE_CHANGE]: {\r\n    ttl: 10 * 60, // 10 minutes\r\n    length: 6,\r\n    prefix: 'pc_',\r\n    format: 'numeric',\r\n    caseSensitive: false,\r\n    allowReuse: false\r\n  }\r\n};\r\n\r\nclass TokenService {\r\n  private redisClient: RedisClientType;\r\n  private connected: boolean = false;\r\n\r\n  constructor() {\r\n    this.redisClient = createClient({\r\n      url: config.REDIS_URL,\r\n      socket: {\r\n        connectTimeout: 5000,\r\n        lazyConnect: true\r\n      }\r\n    });\r\n\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  private setupEventHandlers(): void {\r\n    this.redisClient.on('connect', () => {\r\n      logger.info('Redis token client connecting...');\r\n    });\r\n\r\n    this.redisClient.on('ready', () => {\r\n      this.connected = true;\r\n      logger.info('Redis token client connected and ready');\r\n    });\r\n\r\n    this.redisClient.on('error', (err) => {\r\n      this.connected = false;\r\n      logger.error('Redis token client error:', err);\r\n    });\r\n\r\n    this.redisClient.on('end', () => {\r\n      this.connected = false;\r\n      logger.warn('Redis token client connection ended');\r\n    });\r\n  }\r\n\r\n  async connect(): Promise<void> {\r\n    try {\r\n      if (!this.connected) {\r\n        await this.redisClient.connect();\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to connect to Redis for tokens:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async disconnect(): Promise<void> {\r\n    try {\r\n      if (this.connected) {\r\n        await this.redisClient.quit();\r\n        this.connected = false;\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error disconnecting from Redis tokens:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate a token based on type configuration\r\n   */\r\n  private generateToken(type: TokenType): string {\r\n    const config = tokenConfigs[type];\r\n    let token: string;\r\n\r\n    switch (config.format) {\r\n      case 'hex':\r\n        token = crypto.randomBytes(config.length / 2).toString('hex');\r\n        break;\r\n      case 'base64':\r\n        token = crypto.randomBytes(config.length).toString('base64').slice(0, config.length);\r\n        break;\r\n      case 'numeric':\r\n        token = '';\r\n        for (let i = 0; i < config.length; i++) {\r\n          token += Math.floor(Math.random() * 10).toString();\r\n        }\r\n        break;\r\n      case 'alphanumeric':\r\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        token = '';\r\n        for (let i = 0; i < config.length; i++) {\r\n          token += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        break;\r\n      default:\r\n        token = crypto.randomBytes(16).toString('hex');\r\n    }\r\n\r\n    return config.caseSensitive ? token : token.toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Create a new token\r\n   */\r\n  async createToken(\r\n    type: TokenType,\r\n    userId: string,\r\n    options: {\r\n      email?: string;\r\n      phoneNumber?: string;\r\n      data?: Record<string, any>;\r\n      customTTL?: number;\r\n      maxUsage?: number;\r\n      metadata?: {\r\n        ipAddress?: string;\r\n        userAgent?: string;\r\n        purpose?: string;\r\n      };\r\n    } = {}\r\n  ): Promise<string> {\r\n    if (!this.connected) {\r\n      throw new AppError('Token service not available', 503);\r\n    }\r\n\r\n    const config = tokenConfigs[type];\r\n    const token = this.generateToken(type);\r\n    const now = new Date();\r\n    const ttl = options.customTTL || config.ttl;\r\n\r\n    const tokenData: TokenData = {\r\n      token,\r\n      type,\r\n      userId,\r\n      email: options.email,\r\n      phoneNumber: options.phoneNumber,\r\n      data: options.data || {},\r\n      createdAt: now,\r\n      expiresAt: new Date(now.getTime() + ttl * 1000),\r\n      usageCount: 0,\r\n      maxUsage: options.maxUsage || (config.allowReuse ? 10 : 1),\r\n      isActive: true,\r\n      metadata: options.metadata\r\n    };\r\n\r\n    try {\r\n      const key = `token:${config.prefix}${token}`;\r\n      \r\n      // Store token data\r\n      await this.redisClient.setEx(key, ttl, JSON.stringify(tokenData));\r\n      \r\n      // Index by user for easy lookup\r\n      await this.redisClient.sAdd(`user_tokens:${userId}:${type}`, token);\r\n      await this.redisClient.expire(`user_tokens:${userId}:${type}`, ttl);\r\n\r\n      logger.info('Token created', {\r\n        type,\r\n        userId,\r\n        tokenPrefix: token.substring(0, 8) + '...',\r\n        ttl\r\n      });\r\n\r\n      return token;\r\n    } catch (error) {\r\n      logger.error('Error creating token:', error);\r\n      throw new AppError('Failed to create token', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify and consume a token\r\n   */\r\n  async verifyToken(\r\n    token: string,\r\n    type: TokenType,\r\n    consume: boolean = true\r\n  ): Promise<TokenData | null> {\r\n    if (!this.connected) {\r\n      throw new AppError('Token service not available', 503);\r\n    }\r\n\r\n    const config = tokenConfigs[type];\r\n    const normalizedToken = config.caseSensitive ? token : token.toLowerCase();\r\n    const key = `token:${config.prefix}${normalizedToken}`;\r\n\r\n    try {\r\n      const tokenDataStr = await this.redisClient.get(key);\r\n      if (!tokenDataStr) {\r\n        return null;\r\n      }\r\n\r\n      const tokenData: TokenData = JSON.parse(tokenDataStr);\r\n\r\n      // Check if token is active\r\n      if (!tokenData.isActive) {\r\n        return null;\r\n      }\r\n\r\n      // Check if token has expired\r\n      if (new Date() > new Date(tokenData.expiresAt)) {\r\n        await this.invalidateToken(token, type);\r\n        return null;\r\n      }\r\n\r\n      // Check usage limits\r\n      if (tokenData.usageCount >= tokenData.maxUsage) {\r\n        await this.invalidateToken(token, type);\r\n        return null;\r\n      }\r\n\r\n      // Consume token if requested\r\n      if (consume) {\r\n        tokenData.usageCount++;\r\n        tokenData.usedAt = new Date();\r\n\r\n        // If max usage reached, mark as inactive\r\n        if (tokenData.usageCount >= tokenData.maxUsage) {\r\n          tokenData.isActive = false;\r\n        }\r\n\r\n        // Update token data\r\n        const remainingTTL = await this.redisClient.ttl(key);\r\n        if (remainingTTL > 0) {\r\n          await this.redisClient.setEx(key, remainingTTL, JSON.stringify(tokenData));\r\n        }\r\n\r\n        logger.info('Token consumed', {\r\n          type,\r\n          userId: tokenData.userId,\r\n          usageCount: tokenData.usageCount,\r\n          maxUsage: tokenData.maxUsage\r\n        });\r\n      }\r\n\r\n      return tokenData;\r\n    } catch (error) {\r\n      logger.error('Error verifying token:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidate a specific token\r\n   */\r\n  async invalidateToken(token: string, type: TokenType): Promise<boolean> {\r\n    if (!this.connected) {\r\n      return false;\r\n    }\r\n\r\n    const config = tokenConfigs[type];\r\n    const normalizedToken = config.caseSensitive ? token : token.toLowerCase();\r\n    const key = `token:${config.prefix}${normalizedToken}`;\r\n\r\n    try {\r\n      // Get token data to remove from user index\r\n      const tokenDataStr = await this.redisClient.get(key);\r\n      if (tokenDataStr) {\r\n        const tokenData: TokenData = JSON.parse(tokenDataStr);\r\n        await this.redisClient.sRem(`user_tokens:${tokenData.userId}:${type}`, token);\r\n      }\r\n\r\n      // Delete token\r\n      const result = await this.redisClient.del(key);\r\n      \r\n      logger.info('Token invalidated', {\r\n        type,\r\n        tokenPrefix: token.substring(0, 8) + '...'\r\n      });\r\n\r\n      return result > 0;\r\n    } catch (error) {\r\n      logger.error('Error invalidating token:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invalidate all tokens of a specific type for a user\r\n   */\r\n  async invalidateUserTokens(userId: string, type: TokenType): Promise<number> {\r\n    if (!this.connected) {\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      const tokens = await this.redisClient.sMembers(`user_tokens:${userId}:${type}`);\r\n      let invalidatedCount = 0;\r\n\r\n      for (const token of tokens) {\r\n        const success = await this.invalidateToken(token, type);\r\n        if (success) {\r\n          invalidatedCount++;\r\n        }\r\n      }\r\n\r\n      // Clean up the user tokens set\r\n      await this.redisClient.del(`user_tokens:${userId}:${type}`);\r\n\r\n      logger.info('User tokens invalidated', {\r\n        userId,\r\n        type,\r\n        count: invalidatedCount\r\n      });\r\n\r\n      return invalidatedCount;\r\n    } catch (error) {\r\n      logger.error('Error invalidating user tokens:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's active tokens of a specific type\r\n   */\r\n  async getUserTokens(userId: string, type: TokenType): Promise<TokenData[]> {\r\n    if (!this.connected) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const tokens = await this.redisClient.sMembers(`user_tokens:${userId}:${type}`);\r\n      const tokenDataList: TokenData[] = [];\r\n      const config = tokenConfigs[type];\r\n\r\n      for (const token of tokens) {\r\n        const key = `token:${config.prefix}${token}`;\r\n        const tokenDataStr = await this.redisClient.get(key);\r\n        \r\n        if (tokenDataStr) {\r\n          const tokenData: TokenData = JSON.parse(tokenDataStr);\r\n          if (tokenData.isActive && new Date() <= new Date(tokenData.expiresAt)) {\r\n            tokenDataList.push(tokenData);\r\n          }\r\n        }\r\n      }\r\n\r\n      return tokenDataList;\r\n    } catch (error) {\r\n      logger.error('Error getting user tokens:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up expired tokens\r\n   */\r\n  async cleanupExpiredTokens(): Promise<number> {\r\n    if (!this.connected) {\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      const pattern = 'token:*';\r\n      const keys = await this.redisClient.keys(pattern);\r\n      let cleanedCount = 0;\r\n\r\n      for (const key of keys) {\r\n        const ttl = await this.redisClient.ttl(key);\r\n        if (ttl <= 0) {\r\n          await this.redisClient.del(key);\r\n          cleanedCount++;\r\n        }\r\n      }\r\n\r\n      logger.info(`Cleaned up ${cleanedCount} expired tokens`);\r\n      return cleanedCount;\r\n    } catch (error) {\r\n      logger.error('Error cleaning up expired tokens:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get token statistics\r\n   */\r\n  async getTokenStats(): Promise<any> {\r\n    if (!this.connected) {\r\n      return { connected: false };\r\n    }\r\n\r\n    try {\r\n      const stats: any = {\r\n        connected: this.connected,\r\n        totalTokens: 0,\r\n        byType: {},\r\n        timestamp: new Date().toISOString()\r\n      };\r\n\r\n      for (const type of Object.values(TokenType)) {\r\n        const config = tokenConfigs[type];\r\n        const pattern = `token:${config.prefix}*`;\r\n        const keys = await this.redisClient.keys(pattern);\r\n        stats.byType[type] = keys.length;\r\n        stats.totalTokens += keys.length;\r\n      }\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Error getting token stats:', error);\r\n      return { connected: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if token exists without consuming it\r\n   */\r\n  async tokenExists(token: string, type: TokenType): Promise<boolean> {\r\n    const tokenData = await this.verifyToken(token, type, false);\r\n    return tokenData !== null;\r\n  }\r\n\r\n  /**\r\n   * Extend token expiration\r\n   */\r\n  async extendToken(token: string, type: TokenType, additionalSeconds: number): Promise<boolean> {\r\n    if (!this.connected) {\r\n      return false;\r\n    }\r\n\r\n    const config = tokenConfigs[type];\r\n    const normalizedToken = config.caseSensitive ? token : token.toLowerCase();\r\n    const key = `token:${config.prefix}${normalizedToken}`;\r\n\r\n    try {\r\n      const currentTTL = await this.redisClient.ttl(key);\r\n      if (currentTTL > 0) {\r\n        const newTTL = currentTTL + additionalSeconds;\r\n        await this.redisClient.expire(key, newTTL);\r\n        \r\n        logger.info('Token expiration extended', {\r\n          type,\r\n          tokenPrefix: token.substring(0, 8) + '...',\r\n          additionalSeconds,\r\n          newTTL\r\n        });\r\n        \r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      logger.error('Error extending token:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.connected;\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nexport const tokenService = new TokenService();\r\n\r\nexport default tokenService;\r\n"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATF,MAAAE,OAAA;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAAG,eAAA,CAAAF,OAAA;AACA,MAAAG,aAAA;AAAA;AAAA,CAAAP,aAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAI,QAAA;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAK,UAAA;AAAA;AAAA,CAAAT,aAAA,GAAAG,CAAA,OAAAC,OAAA;AAEA;AACA,IAAYM,SAWX;AAAA;AAAAV,aAAA,GAAAG,CAAA;AAXD,WAAYO,SAAS;EAAA;EAAAV,aAAA,GAAAW,CAAA;EAAAX,aAAA,GAAAG,CAAA;EACnBO,SAAA,6CAAyC;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACzCO,SAAA,qCAAiC;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACjCO,SAAA,6CAAyC;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACzCO,SAAA,uCAAmC;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACnCO,SAAA,6BAAyB;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACzBO,SAAA,mCAA+B;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAC/BO,SAAA,6BAAyB;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACzBO,SAAA,6CAAyC;EAAA;EAAAV,aAAA,GAAAG,CAAA;EACzCO,SAAA,iCAA6B;EAAA;EAAAV,aAAA,GAAAG,CAAA;EAC7BO,SAAA,iCAA6B;AAC/B,CAAC;AAXW;AAAA,CAAAV,aAAA,GAAAY,CAAA,UAAAF,SAAS;AAAA;AAAA,CAAAV,aAAA,GAAAY,CAAA,UAAAC,OAAA,CAAAH,SAAA,GAATA,SAAS;AA4CrB;AACA,MAAMI,YAAY;AAAA;AAAA,CAAAd,aAAA,GAAAG,CAAA,QAAmC;EACnD,CAACO,SAAS,CAACK,kBAAkB,GAAG;IAC9BC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;IAAE;IACnBC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACY,cAAc,GAAG;IAC1BN,GAAG,EAAE,EAAE,GAAG,EAAE;IAAE;IACdC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACa,kBAAkB,GAAG;IAC9BP,GAAG,EAAE,EAAE,GAAG,EAAE;IAAE;IACdC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,SAAS;IACjBC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACc,eAAe,GAAG;IAC3BR,GAAG,EAAE,CAAC,GAAG,EAAE;IAAE;IACbC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,SAAS;IACjBC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACe,UAAU,GAAG;IACtBT,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAAE;IACxBC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACgB,aAAa,GAAG;IACzBV,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAAE;IACvBC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACiB,UAAU,GAAG;IACtBX,GAAG,EAAE,EAAE,GAAG,EAAE;IAAE;IACdC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACkB,kBAAkB,GAAG;IAC9BZ,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAAE;IACvBC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACmB,YAAY,GAAG;IACxBb,GAAG,EAAE,EAAE,GAAG,EAAE;IAAE;IACdC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,KAAK;IACbC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;GACb;EACD,CAACX,SAAS,CAACoB,YAAY,GAAG;IACxBd,GAAG,EAAE,EAAE,GAAG,EAAE;IAAE;IACdC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE,SAAS;IACjBC,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE;;CAEf;AAED,MAAMU,YAAY;EAIhBC,YAAA;IAAA;IAAAhC,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IAFQ,KAAA8B,SAAS,GAAY,KAAK;IAAC;IAAAjC,aAAA,GAAAG,CAAA;IAGjC,IAAI,CAAC+B,WAAW,GAAG,IAAAhC,OAAA,CAAAiC,YAAY,EAAC;MAC9BC,GAAG,EAAE7B,aAAA,CAAA8B,MAAM,CAACC,SAAS;MACrBC,MAAM,EAAE;QACNC,cAAc,EAAE,IAAI;QACpBC,WAAW,EAAE;;KAEhB,CAAC;IAAC;IAAAzC,aAAA,GAAAG,CAAA;IAEH,IAAI,CAACuC,kBAAkB,EAAE;EAC3B;EAEQA,kBAAkBA,CAAA;IAAA;IAAA1C,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACxB,IAAI,CAAC+B,WAAW,CAACS,EAAE,CAAC,SAAS,EAAE,MAAK;MAAA;MAAA3C,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAG,CAAA;MAClCK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;IACjD,CAAC,CAAC;IAAC;IAAA7C,aAAA,GAAAG,CAAA;IAEH,IAAI,CAAC+B,WAAW,CAACS,EAAE,CAAC,OAAO,EAAE,MAAK;MAAA;MAAA3C,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAG,CAAA;MAChC,IAAI,CAAC8B,SAAS,GAAG,IAAI;MAAC;MAAAjC,aAAA,GAAAG,CAAA;MACtBK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,wCAAwC,CAAC;IACvD,CAAC,CAAC;IAAC;IAAA7C,aAAA,GAAAG,CAAA;IAEH,IAAI,CAAC+B,WAAW,CAACS,EAAE,CAAC,OAAO,EAAGG,GAAG,IAAI;MAAA;MAAA9C,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAG,CAAA;MACnC,IAAI,CAAC8B,SAAS,GAAG,KAAK;MAAC;MAAAjC,aAAA,GAAAG,CAAA;MACvBK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;IAChD,CAAC,CAAC;IAAC;IAAA9C,aAAA,GAAAG,CAAA;IAEH,IAAI,CAAC+B,WAAW,CAACS,EAAE,CAAC,KAAK,EAAE,MAAK;MAAA;MAAA3C,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAG,CAAA;MAC9B,IAAI,CAAC8B,SAAS,GAAG,KAAK;MAAC;MAAAjC,aAAA,GAAAG,CAAA;MACvBK,QAAA,CAAAoC,MAAM,CAACI,IAAI,CAAC,qCAAqC,CAAC;IACpD,CAAC,CAAC;EACJ;EAEA,MAAMC,OAAOA,CAAA;IAAA;IAAAjD,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACX,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;QAAA;QAAAjC,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACnB,MAAM,IAAI,CAAC+B,WAAW,CAACe,OAAO,EAAE;MAClC,CAAC;MAAA;MAAA;QAAAjD,aAAA,GAAAY,CAAA;MAAA;IACH,CAAC,CAAC,OAAOmC,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAC9D,MAAM4C,KAAK;IACb;EACF;EAEA,MAAMG,UAAUA,CAAA;IAAA;IAAAlD,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACd,IAAI;MAAA;MAAAH,aAAA,GAAAG,CAAA;MACF,IAAI,IAAI,CAAC8B,SAAS,EAAE;QAAA;QAAAjC,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAClB,MAAM,IAAI,CAAC+B,WAAW,CAACiB,IAAI,EAAE;QAAC;QAAAnD,aAAA,GAAAG,CAAA;QAC9B,IAAI,CAAC8B,SAAS,GAAG,KAAK;MACxB,CAAC;MAAA;MAAA;QAAAjC,aAAA,GAAAY,CAAA;MAAA;IACH,CAAC,CAAC,OAAOmC,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC/D;EACF;EAEA;;;EAGQK,aAAaA,CAACC,IAAe;IAAA;IAAArD,aAAA,GAAAW,CAAA;IACnC,MAAM0B,MAAM;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAGW,YAAY,CAACuC,IAAI,CAAC;IACjC,IAAIC,KAAa;IAAC;IAAAtD,aAAA,GAAAG,CAAA;IAElB,QAAQkC,MAAM,CAAClB,MAAM;MACnB,KAAK,KAAK;QAAA;QAAAnB,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACRmD,KAAK,GAAGjD,QAAA,CAAAkD,OAAM,CAACC,WAAW,CAACnB,MAAM,CAACpB,MAAM,GAAG,CAAC,CAAC,CAACwC,QAAQ,CAAC,KAAK,CAAC;QAAC;QAAAzD,aAAA,GAAAG,CAAA;QAC9D;MACF,KAAK,QAAQ;QAAA;QAAAH,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACXmD,KAAK,GAAGjD,QAAA,CAAAkD,OAAM,CAACC,WAAW,CAACnB,MAAM,CAACpB,MAAM,CAAC,CAACwC,QAAQ,CAAC,QAAQ,CAAC,CAACC,KAAK,CAAC,CAAC,EAAErB,MAAM,CAACpB,MAAM,CAAC;QAAC;QAAAjB,aAAA,GAAAG,CAAA;QACrF;MACF,KAAK,SAAS;QAAA;QAAAH,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACZmD,KAAK,GAAG,EAAE;QAAC;QAAAtD,aAAA,GAAAG,CAAA;QACX,KAAK,IAAIwD,CAAC;QAAA;QAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG,CAAC,GAAEwD,CAAC,GAAGtB,MAAM,CAACpB,MAAM,EAAE0C,CAAC,EAAE,EAAE;UAAA;UAAA3D,aAAA,GAAAG,CAAA;UACtCmD,KAAK,IAAIM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAACL,QAAQ,EAAE;QACpD;QAAC;QAAAzD,aAAA,GAAAG,CAAA;QACD;MACF,KAAK,cAAc;QAAA;QAAAH,aAAA,GAAAY,CAAA;QACjB,MAAMmD,KAAK;QAAA;QAAA,CAAA/D,aAAA,GAAAG,CAAA,QAAG,gEAAgE;QAAC;QAAAH,aAAA,GAAAG,CAAA;QAC/EmD,KAAK,GAAG,EAAE;QAAC;QAAAtD,aAAA,GAAAG,CAAA;QACX,KAAK,IAAIwD,CAAC;QAAA;QAAA,CAAA3D,aAAA,GAAAG,CAAA,QAAG,CAAC,GAAEwD,CAAC,GAAGtB,MAAM,CAACpB,MAAM,EAAE0C,CAAC,EAAE,EAAE;UAAA;UAAA3D,aAAA,GAAAG,CAAA;UACtCmD,KAAK,IAAIS,KAAK,CAACC,MAAM,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGC,KAAK,CAAC9C,MAAM,CAAC,CAAC;QACjE;QAAC;QAAAjB,aAAA,GAAAG,CAAA;QACD;MACF;QAAA;QAAAH,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACEmD,KAAK,GAAGjD,QAAA,CAAAkD,OAAM,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC;IAClD;IAAC;IAAAzD,aAAA,GAAAG,CAAA;IAED,OAAOkC,MAAM,CAACjB,aAAa;IAAA;IAAA,CAAApB,aAAA,GAAAY,CAAA,UAAG0C,KAAK;IAAA;IAAA,CAAAtD,aAAA,GAAAY,CAAA,UAAG0C,KAAK,CAACW,WAAW,EAAE;EAC3D;EAEA;;;EAGA,MAAMC,WAAWA,CACfb,IAAe,EACfc,MAAc,EACdC,OAAA;EAAA;EAAA,CAAApE,aAAA,GAAAY,CAAA,UAWI,EAAE;IAAA;IAAAZ,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IAEN,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,MAAM,IAAIM,UAAA,CAAA4D,QAAQ,CAAC,6BAA6B,EAAE,GAAG,CAAC;IACxD,CAAC;IAAA;IAAA;MAAArE,aAAA,GAAAY,CAAA;IAAA;IAED,MAAMyB,MAAM;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAGW,YAAY,CAACuC,IAAI,CAAC;IACjC,MAAMC,KAAK;IAAA;IAAA,CAAAtD,aAAA,GAAAG,CAAA,QAAG,IAAI,CAACiD,aAAa,CAACC,IAAI,CAAC;IACtC,MAAMiB,GAAG;IAAA;IAAA,CAAAtE,aAAA,GAAAG,CAAA,QAAG,IAAIoE,IAAI,EAAE;IACtB,MAAMvD,GAAG;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,aAAA,GAAAY,CAAA,WAAAwD,OAAO,CAACI,SAAS;IAAA;IAAA,CAAAxE,aAAA,GAAAY,CAAA,WAAIyB,MAAM,CAACrB,GAAG;IAE3C,MAAMyD,SAAS;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,QAAc;MAC3BmD,KAAK;MACLD,IAAI;MACJc,MAAM;MACNO,KAAK,EAAEN,OAAO,CAACM,KAAK;MACpBC,WAAW,EAAEP,OAAO,CAACO,WAAW;MAChCC,IAAI;MAAE;MAAA,CAAA5E,aAAA,GAAAY,CAAA,WAAAwD,OAAO,CAACQ,IAAI;MAAA;MAAA,CAAA5E,aAAA,GAAAY,CAAA,WAAI,EAAE;MACxBiE,SAAS,EAAEP,GAAG;MACdQ,SAAS,EAAE,IAAIP,IAAI,CAACD,GAAG,CAACS,OAAO,EAAE,GAAG/D,GAAG,GAAG,IAAI,CAAC;MAC/CgE,UAAU,EAAE,CAAC;MACbC,QAAQ;MAAE;MAAA,CAAAjF,aAAA,GAAAY,CAAA,WAAAwD,OAAO,CAACa,QAAQ;MAAA;MAAA,CAAAjF,aAAA,GAAAY,CAAA,WAAKyB,MAAM,CAAChB,UAAU;MAAA;MAAA,CAAArB,aAAA,GAAAY,CAAA,WAAG,EAAE;MAAA;MAAA,CAAAZ,aAAA,GAAAY,CAAA,WAAG,CAAC,EAAC;MAC1DsE,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAEf,OAAO,CAACe;KACnB;IAAC;IAAAnF,aAAA,GAAAG,CAAA;IAEF,IAAI;MACF,MAAMiF,GAAG;MAAA;MAAA,CAAApF,aAAA,GAAAG,CAAA,QAAG,SAASkC,MAAM,CAACnB,MAAM,GAAGoC,KAAK,EAAE;MAE5C;MAAA;MAAAtD,aAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAAC+B,WAAW,CAACmD,KAAK,CAACD,GAAG,EAAEpE,GAAG,EAAEsE,IAAI,CAACC,SAAS,CAACd,SAAS,CAAC,CAAC;MAEjE;MAAA;MAAAzE,aAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAAC+B,WAAW,CAACsD,IAAI,CAAC,eAAerB,MAAM,IAAId,IAAI,EAAE,EAAEC,KAAK,CAAC;MAAC;MAAAtD,aAAA,GAAAG,CAAA;MACpE,MAAM,IAAI,CAAC+B,WAAW,CAACuD,MAAM,CAAC,eAAetB,MAAM,IAAId,IAAI,EAAE,EAAErC,GAAG,CAAC;MAAC;MAAAhB,aAAA,GAAAG,CAAA;MAEpEK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,eAAe,EAAE;QAC3BQ,IAAI;QACJc,MAAM;QACNuB,WAAW,EAAEpC,KAAK,CAACqC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;QAC1C3E;OACD,CAAC;MAAC;MAAAhB,aAAA,GAAAG,CAAA;MAEH,OAAOmD,KAAK;IACd,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAC7C,MAAM,IAAIM,UAAA,CAAA4D,QAAQ,CAAC,wBAAwB,EAAE,GAAG,CAAC;IACnD;EACF;EAEA;;;EAGA,MAAMuB,WAAWA,CACftC,KAAa,EACbD,IAAe,EACfwC,OAAA;EAAA;EAAA,CAAA7F,aAAA,GAAAY,CAAA,WAAmB,IAAI;IAAA;IAAAZ,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IAEvB,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,MAAM,IAAIM,UAAA,CAAA4D,QAAQ,CAAC,6BAA6B,EAAE,GAAG,CAAC;IACxD,CAAC;IAAA;IAAA;MAAArE,aAAA,GAAAY,CAAA;IAAA;IAED,MAAMyB,MAAM;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,QAAGW,YAAY,CAACuC,IAAI,CAAC;IACjC,MAAMyC,eAAe;IAAA;IAAA,CAAA9F,aAAA,GAAAG,CAAA,QAAGkC,MAAM,CAACjB,aAAa;IAAA;IAAA,CAAApB,aAAA,GAAAY,CAAA,WAAG0C,KAAK;IAAA;IAAA,CAAAtD,aAAA,GAAAY,CAAA,WAAG0C,KAAK,CAACW,WAAW,EAAE;IAC1E,MAAMmB,GAAG;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,QAAG,SAASkC,MAAM,CAACnB,MAAM,GAAG4E,eAAe,EAAE;IAAC;IAAA9F,aAAA,GAAAG,CAAA;IAEvD,IAAI;MACF,MAAM4F,YAAY;MAAA;MAAA,CAAA/F,aAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAAC+B,WAAW,CAAC8D,GAAG,CAACZ,GAAG,CAAC;MAAC;MAAApF,aAAA,GAAAG,CAAA;MACrD,IAAI,CAAC4F,YAAY,EAAE;QAAA;QAAA/F,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACjB,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAY,CAAA;MAAA;MAED,MAAM6D,SAAS;MAAA;MAAA,CAAAzE,aAAA,GAAAG,CAAA,QAAcmF,IAAI,CAACW,KAAK,CAACF,YAAY,CAAC;MAErD;MAAA;MAAA/F,aAAA,GAAAG,CAAA;MACA,IAAI,CAACsE,SAAS,CAACS,QAAQ,EAAE;QAAA;QAAAlF,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACvB,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAY,CAAA;MAAA;MAED;MAAAZ,aAAA,GAAAG,CAAA;MACA,IAAI,IAAIoE,IAAI,EAAE,GAAG,IAAIA,IAAI,CAACE,SAAS,CAACK,SAAS,CAAC,EAAE;QAAA;QAAA9E,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAC9C,MAAM,IAAI,CAAC+F,eAAe,CAAC5C,KAAK,EAAED,IAAI,CAAC;QAAC;QAAArD,aAAA,GAAAG,CAAA;QACxC,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAY,CAAA;MAAA;MAED;MAAAZ,aAAA,GAAAG,CAAA;MACA,IAAIsE,SAAS,CAACO,UAAU,IAAIP,SAAS,CAACQ,QAAQ,EAAE;QAAA;QAAAjF,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QAC9C,MAAM,IAAI,CAAC+F,eAAe,CAAC5C,KAAK,EAAED,IAAI,CAAC;QAAC;QAAArD,aAAA,GAAAG,CAAA;QACxC,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAY,CAAA;MAAA;MAED;MAAAZ,aAAA,GAAAG,CAAA;MACA,IAAI0F,OAAO,EAAE;QAAA;QAAA7F,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAG,CAAA;QACXsE,SAAS,CAACO,UAAU,EAAE;QAAC;QAAAhF,aAAA,GAAAG,CAAA;QACvBsE,SAAS,CAAC0B,MAAM,GAAG,IAAI5B,IAAI,EAAE;QAE7B;QAAA;QAAAvE,aAAA,GAAAG,CAAA;QACA,IAAIsE,SAAS,CAACO,UAAU,IAAIP,SAAS,CAACQ,QAAQ,EAAE;UAAA;UAAAjF,aAAA,GAAAY,CAAA;UAAAZ,aAAA,GAAAG,CAAA;UAC9CsE,SAAS,CAACS,QAAQ,GAAG,KAAK;QAC5B,CAAC;QAAA;QAAA;UAAAlF,aAAA,GAAAY,CAAA;QAAA;QAED;QACA,MAAMwF,YAAY;QAAA;QAAA,CAAApG,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAAClB,GAAG,CAACoE,GAAG,CAAC;QAAC;QAAApF,aAAA,GAAAG,CAAA;QACrD,IAAIiG,YAAY,GAAG,CAAC,EAAE;UAAA;UAAApG,aAAA,GAAAY,CAAA;UAAAZ,aAAA,GAAAG,CAAA;UACpB,MAAM,IAAI,CAAC+B,WAAW,CAACmD,KAAK,CAACD,GAAG,EAAEgB,YAAY,EAAEd,IAAI,CAACC,SAAS,CAACd,SAAS,CAAC,CAAC;QAC5E,CAAC;QAAA;QAAA;UAAAzE,aAAA,GAAAY,CAAA;QAAA;QAAAZ,aAAA,GAAAG,CAAA;QAEDK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,gBAAgB,EAAE;UAC5BQ,IAAI;UACJc,MAAM,EAAEM,SAAS,CAACN,MAAM;UACxBa,UAAU,EAAEP,SAAS,CAACO,UAAU;UAChCC,QAAQ,EAAER,SAAS,CAACQ;SACrB,CAAC;MACJ,CAAC;MAAA;MAAA;QAAAjF,aAAA,GAAAY,CAAA;MAAA;MAAAZ,aAAA,GAAAG,CAAA;MAED,OAAOsE,SAAS;IAClB,CAAC,CAAC,OAAO1B,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAC9C,OAAO,IAAI;IACb;EACF;EAEA;;;EAGA,MAAM+F,eAAeA,CAAC5C,KAAa,EAAED,IAAe;IAAA;IAAArD,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IAClD,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAY,CAAA;IAAA;IAED,MAAMyB,MAAM;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,SAAGW,YAAY,CAACuC,IAAI,CAAC;IACjC,MAAMyC,eAAe;IAAA;IAAA,CAAA9F,aAAA,GAAAG,CAAA,SAAGkC,MAAM,CAACjB,aAAa;IAAA;IAAA,CAAApB,aAAA,GAAAY,CAAA,WAAG0C,KAAK;IAAA;IAAA,CAAAtD,aAAA,GAAAY,CAAA,WAAG0C,KAAK,CAACW,WAAW,EAAE;IAC1E,MAAMmB,GAAG;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,SAAG,SAASkC,MAAM,CAACnB,MAAM,GAAG4E,eAAe,EAAE;IAAC;IAAA9F,aAAA,GAAAG,CAAA;IAEvD,IAAI;MACF;MACA,MAAM4F,YAAY;MAAA;MAAA,CAAA/F,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAAC8D,GAAG,CAACZ,GAAG,CAAC;MAAC;MAAApF,aAAA,GAAAG,CAAA;MACrD,IAAI4F,YAAY,EAAE;QAAA;QAAA/F,aAAA,GAAAY,CAAA;QAChB,MAAM6D,SAAS;QAAA;QAAA,CAAAzE,aAAA,GAAAG,CAAA,SAAcmF,IAAI,CAACW,KAAK,CAACF,YAAY,CAAC;QAAC;QAAA/F,aAAA,GAAAG,CAAA;QACtD,MAAM,IAAI,CAAC+B,WAAW,CAACmE,IAAI,CAAC,eAAe5B,SAAS,CAACN,MAAM,IAAId,IAAI,EAAE,EAAEC,KAAK,CAAC;MAC/E,CAAC;MAAA;MAAA;QAAAtD,aAAA,GAAAY,CAAA;MAAA;MAED;MACA,MAAM0F,MAAM;MAAA;MAAA,CAAAtG,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAACqE,GAAG,CAACnB,GAAG,CAAC;MAAC;MAAApF,aAAA,GAAAG,CAAA;MAE/CK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,mBAAmB,EAAE;QAC/BQ,IAAI;QACJqC,WAAW,EAAEpC,KAAK,CAACqC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG;OACtC,CAAC;MAAC;MAAA3F,aAAA,GAAAG,CAAA;MAEH,OAAOmG,MAAM,GAAG,CAAC;IACnB,CAAC,CAAC,OAAOvD,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MACjD,OAAO,KAAK;IACd;EACF;EAEA;;;EAGA,MAAMqG,oBAAoBA,CAACrC,MAAc,EAAEd,IAAe;IAAA;IAAArD,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACxD,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO,CAAC;IACV,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAY,CAAA;IAAA;IAAAZ,aAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMsG,MAAM;MAAA;MAAA,CAAAzG,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAACwE,QAAQ,CAAC,eAAevC,MAAM,IAAId,IAAI,EAAE,CAAC;MAC/E,IAAIsD,gBAAgB;MAAA;MAAA,CAAA3G,aAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,aAAA,GAAAG,CAAA;MAEzB,KAAK,MAAMmD,KAAK,IAAImD,MAAM,EAAE;QAC1B,MAAMG,OAAO;QAAA;QAAA,CAAA5G,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+F,eAAe,CAAC5C,KAAK,EAAED,IAAI,CAAC;QAAC;QAAArD,aAAA,GAAAG,CAAA;QACxD,IAAIyG,OAAO,EAAE;UAAA;UAAA5G,aAAA,GAAAY,CAAA;UAAAZ,aAAA,GAAAG,CAAA;UACXwG,gBAAgB,EAAE;QACpB,CAAC;QAAA;QAAA;UAAA3G,aAAA,GAAAY,CAAA;QAAA;MACH;MAEA;MAAA;MAAAZ,aAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAAC+B,WAAW,CAACqE,GAAG,CAAC,eAAepC,MAAM,IAAId,IAAI,EAAE,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MAE5DK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,yBAAyB,EAAE;QACrCsB,MAAM;QACNd,IAAI;QACJwD,KAAK,EAAEF;OACR,CAAC;MAAC;MAAA3G,aAAA,GAAAG,CAAA;MAEH,OAAOwG,gBAAgB;IACzB,CAAC,CAAC,OAAO5D,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MACvD,OAAO,CAAC;IACV;EACF;EAEA;;;EAGA,MAAM2G,aAAaA,CAAC3C,MAAc,EAAEd,IAAe;IAAA;IAAArD,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACjD,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAY,CAAA;IAAA;IAAAZ,aAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMsG,MAAM;MAAA;MAAA,CAAAzG,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAACwE,QAAQ,CAAC,eAAevC,MAAM,IAAId,IAAI,EAAE,CAAC;MAC/E,MAAM0D,aAAa;MAAA;MAAA,CAAA/G,aAAA,GAAAG,CAAA,SAAgB,EAAE;MACrC,MAAMkC,MAAM;MAAA;MAAA,CAAArC,aAAA,GAAAG,CAAA,SAAGW,YAAY,CAACuC,IAAI,CAAC;MAAC;MAAArD,aAAA,GAAAG,CAAA;MAElC,KAAK,MAAMmD,KAAK,IAAImD,MAAM,EAAE;QAC1B,MAAMrB,GAAG;QAAA;QAAA,CAAApF,aAAA,GAAAG,CAAA,SAAG,SAASkC,MAAM,CAACnB,MAAM,GAAGoC,KAAK,EAAE;QAC5C,MAAMyC,YAAY;QAAA;QAAA,CAAA/F,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAAC8D,GAAG,CAACZ,GAAG,CAAC;QAAC;QAAApF,aAAA,GAAAG,CAAA;QAErD,IAAI4F,YAAY,EAAE;UAAA;UAAA/F,aAAA,GAAAY,CAAA;UAChB,MAAM6D,SAAS;UAAA;UAAA,CAAAzE,aAAA,GAAAG,CAAA,SAAcmF,IAAI,CAACW,KAAK,CAACF,YAAY,CAAC;UAAC;UAAA/F,aAAA,GAAAG,CAAA;UACtD;UAAI;UAAA,CAAAH,aAAA,GAAAY,CAAA,WAAA6D,SAAS,CAACS,QAAQ;UAAA;UAAA,CAAAlF,aAAA,GAAAY,CAAA,WAAI,IAAI2D,IAAI,EAAE,IAAI,IAAIA,IAAI,CAACE,SAAS,CAACK,SAAS,CAAC,GAAE;YAAA;YAAA9E,aAAA,GAAAY,CAAA;YAAAZ,aAAA,GAAAG,CAAA;YACrE4G,aAAa,CAACC,IAAI,CAACvC,SAAS,CAAC;UAC/B,CAAC;UAAA;UAAA;YAAAzE,aAAA,GAAAY,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAZ,aAAA,GAAAY,CAAA;QAAA;MACH;MAAC;MAAAZ,aAAA,GAAAG,CAAA;MAED,OAAO4G,aAAa;IACtB,CAAC,CAAC,OAAOhE,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAClD,OAAO,EAAE;IACX;EACF;EAEA;;;EAGA,MAAM8G,oBAAoBA,CAAA;IAAA;IAAAjH,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACxB,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO,CAAC;IACV,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAY,CAAA;IAAA;IAAAZ,aAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM+G,OAAO;MAAA;MAAA,CAAAlH,aAAA,GAAAG,CAAA,SAAG,SAAS;MACzB,MAAMgH,IAAI;MAAA;MAAA,CAAAnH,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAACiF,IAAI,CAACD,OAAO,CAAC;MACjD,IAAIE,YAAY;MAAA;MAAA,CAAApH,aAAA,GAAAG,CAAA,SAAG,CAAC;MAAC;MAAAH,aAAA,GAAAG,CAAA;MAErB,KAAK,MAAMiF,GAAG,IAAI+B,IAAI,EAAE;QACtB,MAAMnG,GAAG;QAAA;QAAA,CAAAhB,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAAClB,GAAG,CAACoE,GAAG,CAAC;QAAC;QAAApF,aAAA,GAAAG,CAAA;QAC5C,IAAIa,GAAG,IAAI,CAAC,EAAE;UAAA;UAAAhB,aAAA,GAAAY,CAAA;UAAAZ,aAAA,GAAAG,CAAA;UACZ,MAAM,IAAI,CAAC+B,WAAW,CAACqE,GAAG,CAACnB,GAAG,CAAC;UAAC;UAAApF,aAAA,GAAAG,CAAA;UAChCiH,YAAY,EAAE;QAChB,CAAC;QAAA;QAAA;UAAApH,aAAA,GAAAY,CAAA;QAAA;MACH;MAAC;MAAAZ,aAAA,GAAAG,CAAA;MAEDK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,cAAcuE,YAAY,iBAAiB,CAAC;MAAC;MAAApH,aAAA,GAAAG,CAAA;MACzD,OAAOiH,YAAY;IACrB,CAAC,CAAC,OAAOrE,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MACzD,OAAO,CAAC;IACV;EACF;EAEA;;;EAGA,MAAMkH,aAAaA,CAAA;IAAA;IAAArH,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACjB,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO;QAAE8B,SAAS,EAAE;MAAK,CAAE;IAC7B,CAAC;IAAA;IAAA;MAAAjC,aAAA,GAAAY,CAAA;IAAA;IAAAZ,aAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMmH,KAAK;MAAA;MAAA,CAAAtH,aAAA,GAAAG,CAAA,SAAQ;QACjB8B,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBsF,WAAW,EAAE,CAAC;QACdC,MAAM,EAAE,EAAE;QACVC,SAAS,EAAE,IAAIlD,IAAI,EAAE,CAACmD,WAAW;OAClC;MAAC;MAAA1H,aAAA,GAAAG,CAAA;MAEF,KAAK,MAAMkD,IAAI,IAAIsE,MAAM,CAACC,MAAM,CAAClH,SAAS,CAAC,EAAE;QAC3C,MAAM2B,MAAM;QAAA;QAAA,CAAArC,aAAA,GAAAG,CAAA,SAAGW,YAAY,CAACuC,IAAI,CAAC;QACjC,MAAM6D,OAAO;QAAA;QAAA,CAAAlH,aAAA,GAAAG,CAAA,SAAG,SAASkC,MAAM,CAACnB,MAAM,GAAG;QACzC,MAAMiG,IAAI;QAAA;QAAA,CAAAnH,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAACiF,IAAI,CAACD,OAAO,CAAC;QAAC;QAAAlH,aAAA,GAAAG,CAAA;QAClDmH,KAAK,CAACE,MAAM,CAACnE,IAAI,CAAC,GAAG8D,IAAI,CAAClG,MAAM;QAAC;QAAAjB,aAAA,GAAAG,CAAA;QACjCmH,KAAK,CAACC,WAAW,IAAIJ,IAAI,CAAClG,MAAM;MAClC;MAAC;MAAAjB,aAAA,GAAAG,CAAA;MAED,OAAOmH,KAAK;IACd,CAAC,CAAC,OAAOvE,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAClD,OAAO;QAAE8B,SAAS,EAAE,KAAK;QAAEc,KAAK,EAAEA,KAAK,CAAC8E;MAAO,CAAE;IACnD;EACF;EAEA;;;EAGA,MAAMC,WAAWA,CAACxE,KAAa,EAAED,IAAe;IAAA;IAAArD,aAAA,GAAAW,CAAA;IAC9C,MAAM8D,SAAS;IAAA;IAAA,CAAAzE,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACyF,WAAW,CAACtC,KAAK,EAAED,IAAI,EAAE,KAAK,CAAC;IAAC;IAAArD,aAAA,GAAAG,CAAA;IAC7D,OAAOsE,SAAS,KAAK,IAAI;EAC3B;EAEA;;;EAGA,MAAMsD,WAAWA,CAACzE,KAAa,EAAED,IAAe,EAAE2E,iBAAyB;IAAA;IAAAhI,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACzE,IAAI,CAAC,IAAI,CAAC8B,SAAS,EAAE;MAAA;MAAAjC,aAAA,GAAAY,CAAA;MAAAZ,aAAA,GAAAG,CAAA;MACnB,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAH,aAAA,GAAAY,CAAA;IAAA;IAED,MAAMyB,MAAM;IAAA;IAAA,CAAArC,aAAA,GAAAG,CAAA,SAAGW,YAAY,CAACuC,IAAI,CAAC;IACjC,MAAMyC,eAAe;IAAA;IAAA,CAAA9F,aAAA,GAAAG,CAAA,SAAGkC,MAAM,CAACjB,aAAa;IAAA;IAAA,CAAApB,aAAA,GAAAY,CAAA,WAAG0C,KAAK;IAAA;IAAA,CAAAtD,aAAA,GAAAY,CAAA,WAAG0C,KAAK,CAACW,WAAW,EAAE;IAC1E,MAAMmB,GAAG;IAAA;IAAA,CAAApF,aAAA,GAAAG,CAAA,SAAG,SAASkC,MAAM,CAACnB,MAAM,GAAG4E,eAAe,EAAE;IAAC;IAAA9F,aAAA,GAAAG,CAAA;IAEvD,IAAI;MACF,MAAM8H,UAAU;MAAA;MAAA,CAAAjI,aAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAAC+B,WAAW,CAAClB,GAAG,CAACoE,GAAG,CAAC;MAAC;MAAApF,aAAA,GAAAG,CAAA;MACnD,IAAI8H,UAAU,GAAG,CAAC,EAAE;QAAA;QAAAjI,aAAA,GAAAY,CAAA;QAClB,MAAMsH,MAAM;QAAA;QAAA,CAAAlI,aAAA,GAAAG,CAAA,SAAG8H,UAAU,GAAGD,iBAAiB;QAAC;QAAAhI,aAAA,GAAAG,CAAA;QAC9C,MAAM,IAAI,CAAC+B,WAAW,CAACuD,MAAM,CAACL,GAAG,EAAE8C,MAAM,CAAC;QAAC;QAAAlI,aAAA,GAAAG,CAAA;QAE3CK,QAAA,CAAAoC,MAAM,CAACC,IAAI,CAAC,2BAA2B,EAAE;UACvCQ,IAAI;UACJqC,WAAW,EAAEpC,KAAK,CAACqC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;UAC1CqC,iBAAiB;UACjBE;SACD,CAAC;QAAC;QAAAlI,aAAA,GAAAG,CAAA;QAEH,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,aAAA,GAAAY,CAAA;MAAA;MAAAZ,aAAA,GAAAG,CAAA;MACD,OAAO,KAAK;IACd,CAAC,CAAC,OAAO4C,KAAK,EAAE;MAAA;MAAA/C,aAAA,GAAAG,CAAA;MACdK,QAAA,CAAAoC,MAAM,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAAC;MAAA/C,aAAA,GAAAG,CAAA;MAC9C,OAAO,KAAK;IACd;EACF;EAEAgI,WAAWA,CAAA;IAAA;IAAAnI,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAG,CAAA;IACT,OAAO,IAAI,CAAC8B,SAAS;EACvB;;AAGF;AAAA;AAAAjC,aAAA,GAAAG,CAAA;AACaU,OAAA,CAAAuH,YAAY,GAAG,IAAIrG,YAAY,EAAE;AAAC;AAAA/B,aAAA,GAAAG,CAAA;AAE/CU,OAAA,CAAA0C,OAAA,GAAe1C,OAAA,CAAAuH,YAAY","ignoreList":[]}