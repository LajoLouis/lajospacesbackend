00e30b6a85538d92c0570ad1a4722b2d
"use strict";

/* istanbul ignore next */
function cov_1jyp3dm6tm() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\config\\database.ts";
  var hash = "310a8631dbe31d23a936eff928f3a7faac5572df";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\config\\database.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 42
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 46
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 55
        }
      },
      "8": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 11,
          column: 46
        }
      },
      "9": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "10": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "11": {
        start: {
          line: 20,
          column: 18
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "12": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "14": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "15": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "16": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 140
        }
      },
      "17": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "18": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 65
        }
      },
      "19": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 27
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 65
        }
      },
      "21": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "22": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 68
        }
      },
      "23": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 69
        }
      },
      "24": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 20
        }
      },
      "25": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "26": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "27": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 69
        }
      },
      "28": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "29": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 46
        }
      },
      "30": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 28
        }
      },
      "31": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 69
        }
      },
      "32": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 72
        }
      },
      "33": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 20
        }
      },
      "34": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 71,
          column: 6
        }
      },
      "35": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "36": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 78
        }
      },
      "37": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 65
        }
      },
      "38": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "39": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "40": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "41": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 53
        }
      },
      "42": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 90,
          column: 3
        }
      },
      "43": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 61
        }
      },
      "44": {
        start: {
          line: 91,
          column: 0
        },
        end: {
          line: 94,
          column: 3
        }
      },
      "45": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 65
        }
      },
      "46": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "47": {
        start: {
          line: 95,
          column: 0
        },
        end: {
          line: 98,
          column: 3
        }
      },
      "48": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "49": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 24
        }
      },
      "50": {
        start: {
          line: 100,
          column: 0
        },
        end: {
          line: 110,
          column: 3
        }
      },
      "51": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "52": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 35
        }
      },
      "53": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 85
        }
      },
      "54": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 24
        }
      },
      "55": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 78
        }
      },
      "56": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "57": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 116,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "connectDatabase",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 30
          }
        },
        loc: {
          start: {
            line: 24,
            column: 33
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 24
      },
      "2": {
        name: "disconnectDatabase",
        decl: {
          start: {
            line: 47,
            column: 15
          },
          end: {
            line: 47,
            column: 33
          }
        },
        loc: {
          start: {
            line: 47,
            column: 36
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 47
      },
      "3": {
        name: "getDatabaseStatus",
        decl: {
          start: {
            line: 65,
            column: 9
          },
          end: {
            line: 65,
            column: 26
          }
        },
        loc: {
          start: {
            line: 65,
            column: 29
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 65
      },
      "4": {
        name: "clearDatabase",
        decl: {
          start: {
            line: 76,
            column: 15
          },
          end: {
            line: 76,
            column: 28
          }
        },
        loc: {
          start: {
            line: 76,
            column: 31
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 76
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 46
          },
          end: {
            line: 88,
            column: 47
          }
        },
        loc: {
          start: {
            line: 88,
            column: 52
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 91,
            column: 42
          },
          end: {
            line: 91,
            column: 43
          }
        },
        loc: {
          start: {
            line: 91,
            column: 53
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 91
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 49
          },
          end: {
            line: 95,
            column: 50
          }
        },
        loc: {
          start: {
            line: 95,
            column: 55
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 100,
            column: 22
          }
        },
        loc: {
          start: {
            line: 100,
            column: 33
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 100
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 25
          },
          end: {
            line: 30,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 30,
            column: 68
          },
          end: {
            line: 30,
            column: 105
          }
        }, {
          start: {
            line: 30,
            column: 108
          },
          end: {
            line: 30,
            column: 140
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\config\\database.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\config\\database.ts"],
      sourcesContent: ["import mongoose from 'mongoose';\r\nimport { config } from './environment';\r\nimport { logger } from '../utils/logger';\r\n\r\n// MongoDB connection options\r\nconst mongoOptions: mongoose.ConnectOptions = {\r\n  maxPoolSize: 10, // Maintain up to 10 socket connections\r\n  serverSelectionTimeoutMS: 5000, // Keep trying to send operations for 5 seconds\r\n  socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\r\n};\r\n\r\n// Database connection state\r\nlet isConnected = false;\r\n\r\n/**\r\n * Connect to MongoDB database\r\n */\r\nexport async function connectDatabase(): Promise<void> {\r\n  try {\r\n    if (isConnected) {\r\n      logger.info('\uD83D\uDCCA Database already connected');\r\n      return;\r\n    }\r\n\r\n    const mongoUri = config.NODE_ENV === 'test' ? config.MONGODB_TEST_URI : config.MONGODB_URI;\r\n    \r\n    logger.info('\uD83D\uDCCA Connecting to MongoDB...');\r\n    \r\n    await mongoose.connect(mongoUri, mongoOptions);\r\n    \r\n    isConnected = true;\r\n    logger.info('\u2705 MongoDB connected successfully');\r\n    \r\n    // Log database name\r\n    const dbName = mongoose.connection.db?.databaseName;\r\n    logger.info(`\uD83D\uDCCA Connected to database: ${dbName}`);\r\n    \r\n  } catch (error) {\r\n    logger.error('\u274C MongoDB connection failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Disconnect from MongoDB database\r\n */\r\nexport async function disconnectDatabase(): Promise<void> {\r\n  try {\r\n    if (!isConnected) {\r\n      logger.info('\uD83D\uDCCA Database already disconnected');\r\n      return;\r\n    }\r\n\r\n    await mongoose.disconnect();\r\n    isConnected = false;\r\n    logger.info('\uD83D\uDCCA MongoDB disconnected successfully');\r\n  } catch (error) {\r\n    logger.error('\u274C MongoDB disconnection failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get database connection status\r\n */\r\nexport function getDatabaseStatus(): {\r\n  isConnected: boolean;\r\n  readyState: number;\r\n  host?: string;\r\n  name?: string;\r\n} {\r\n  return {\r\n    isConnected,\r\n    readyState: mongoose.connection.readyState,\r\n    host: mongoose.connection.host,\r\n    name: mongoose.connection.name\r\n  };\r\n}\r\n\r\n/**\r\n * Clear database (for testing purposes only)\r\n */\r\nexport async function clearDatabase(): Promise<void> {\r\n  if (config.NODE_ENV !== 'test') {\r\n    throw new Error('clearDatabase can only be used in test environment');\r\n  }\r\n\r\n  const collections = mongoose.connection.collections;\r\n  \r\n  for (const key in collections) {\r\n    const collection = collections[key];\r\n    await collection.deleteMany({});\r\n  }\r\n  \r\n  logger.info('\uD83E\uDDF9 Test database cleared');\r\n}\r\n\r\n// Connection event handlers\r\nmongoose.connection.on('connected', () => {\r\n  logger.info('\uD83D\uDCCA Mongoose connected to MongoDB');\r\n});\r\n\r\nmongoose.connection.on('error', (error) => {\r\n  logger.error('\u274C Mongoose connection error:', error);\r\n  isConnected = false;\r\n});\r\n\r\nmongoose.connection.on('disconnected', () => {\r\n  logger.info('\uD83D\uDCCA Mongoose disconnected from MongoDB');\r\n  isConnected = false;\r\n});\r\n\r\n// Handle application termination\r\nprocess.on('SIGINT', async () => {\r\n  try {\r\n    await disconnectDatabase();\r\n    logger.info('\uD83D\uDCCA MongoDB connection closed through app termination');\r\n    process.exit(0);\r\n  } catch (error) {\r\n    logger.error('\u274C Error during MongoDB disconnection:', error);\r\n    process.exit(1);\r\n  }\r\n});\r\n\r\nexport default {\r\n  connect: connectDatabase,\r\n  disconnect: disconnectDatabase,\r\n  getStatus: getDatabaseStatus,\r\n  clear: clearDatabase\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "310a8631dbe31d23a936eff928f3a7faac5572df"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jyp3dm6tm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jyp3dm6tm();
var __importDefault =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[0]++,
/* istanbul ignore next */
(cov_1jyp3dm6tm().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1jyp3dm6tm().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1jyp3dm6tm().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[0]++;
  cov_1jyp3dm6tm().s[1]++;
  return /* istanbul ignore next */(cov_1jyp3dm6tm().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1jyp3dm6tm().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1jyp3dm6tm().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1jyp3dm6tm().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1jyp3dm6tm().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1jyp3dm6tm().s[3]++;
exports.connectDatabase = connectDatabase;
/* istanbul ignore next */
cov_1jyp3dm6tm().s[4]++;
exports.disconnectDatabase = disconnectDatabase;
/* istanbul ignore next */
cov_1jyp3dm6tm().s[5]++;
exports.getDatabaseStatus = getDatabaseStatus;
/* istanbul ignore next */
cov_1jyp3dm6tm().s[6]++;
exports.clearDatabase = clearDatabase;
const mongoose_1 =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[7]++, __importDefault(require("mongoose")));
const environment_1 =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[8]++, require("./environment"));
const logger_1 =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[9]++, require("../utils/logger"));
// MongoDB connection options
const mongoOptions =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[10]++, {
  maxPoolSize: 10,
  // Maintain up to 10 socket connections
  serverSelectionTimeoutMS: 5000,
  // Keep trying to send operations for 5 seconds
  socketTimeoutMS: 45000 // Close sockets after 45 seconds of inactivity
});
// Database connection state
let isConnected =
/* istanbul ignore next */
(cov_1jyp3dm6tm().s[11]++, false);
/**
 * Connect to MongoDB database
 */
async function connectDatabase() {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[1]++;
  cov_1jyp3dm6tm().s[12]++;
  try {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[13]++;
    if (isConnected) {
      /* istanbul ignore next */
      cov_1jyp3dm6tm().b[3][0]++;
      cov_1jyp3dm6tm().s[14]++;
      logger_1.logger.info('📊 Database already connected');
      /* istanbul ignore next */
      cov_1jyp3dm6tm().s[15]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1jyp3dm6tm().b[3][1]++;
    }
    const mongoUri =
    /* istanbul ignore next */
    (cov_1jyp3dm6tm().s[16]++, environment_1.config.NODE_ENV === 'test' ?
    /* istanbul ignore next */
    (cov_1jyp3dm6tm().b[4][0]++, environment_1.config.MONGODB_TEST_URI) :
    /* istanbul ignore next */
    (cov_1jyp3dm6tm().b[4][1]++, environment_1.config.MONGODB_URI));
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[17]++;
    logger_1.logger.info('📊 Connecting to MongoDB...');
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[18]++;
    await mongoose_1.default.connect(mongoUri, mongoOptions);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[19]++;
    isConnected = true;
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[20]++;
    logger_1.logger.info('✅ MongoDB connected successfully');
    // Log database name
    const dbName =
    /* istanbul ignore next */
    (cov_1jyp3dm6tm().s[21]++, mongoose_1.default.connection.db?.databaseName);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[22]++;
    logger_1.logger.info(`📊 Connected to database: ${dbName}`);
  } catch (error) {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[23]++;
    logger_1.logger.error('❌ MongoDB connection failed:', error);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[24]++;
    throw error;
  }
}
/**
 * Disconnect from MongoDB database
 */
async function disconnectDatabase() {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[2]++;
  cov_1jyp3dm6tm().s[25]++;
  try {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[26]++;
    if (!isConnected) {
      /* istanbul ignore next */
      cov_1jyp3dm6tm().b[5][0]++;
      cov_1jyp3dm6tm().s[27]++;
      logger_1.logger.info('📊 Database already disconnected');
      /* istanbul ignore next */
      cov_1jyp3dm6tm().s[28]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1jyp3dm6tm().b[5][1]++;
    }
    cov_1jyp3dm6tm().s[29]++;
    await mongoose_1.default.disconnect();
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[30]++;
    isConnected = false;
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[31]++;
    logger_1.logger.info('📊 MongoDB disconnected successfully');
  } catch (error) {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[32]++;
    logger_1.logger.error('❌ MongoDB disconnection failed:', error);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[33]++;
    throw error;
  }
}
/**
 * Get database connection status
 */
function getDatabaseStatus() {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[3]++;
  cov_1jyp3dm6tm().s[34]++;
  return {
    isConnected,
    readyState: mongoose_1.default.connection.readyState,
    host: mongoose_1.default.connection.host,
    name: mongoose_1.default.connection.name
  };
}
/**
 * Clear database (for testing purposes only)
 */
async function clearDatabase() {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[4]++;
  cov_1jyp3dm6tm().s[35]++;
  if (environment_1.config.NODE_ENV !== 'test') {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().b[6][0]++;
    cov_1jyp3dm6tm().s[36]++;
    throw new Error('clearDatabase can only be used in test environment');
  } else
  /* istanbul ignore next */
  {
    cov_1jyp3dm6tm().b[6][1]++;
  }
  const collections =
  /* istanbul ignore next */
  (cov_1jyp3dm6tm().s[37]++, mongoose_1.default.connection.collections);
  /* istanbul ignore next */
  cov_1jyp3dm6tm().s[38]++;
  for (const key in collections) {
    const collection =
    /* istanbul ignore next */
    (cov_1jyp3dm6tm().s[39]++, collections[key]);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[40]++;
    await collection.deleteMany({});
  }
  /* istanbul ignore next */
  cov_1jyp3dm6tm().s[41]++;
  logger_1.logger.info('🧹 Test database cleared');
}
// Connection event handlers
/* istanbul ignore next */
cov_1jyp3dm6tm().s[42]++;
mongoose_1.default.connection.on('connected', () => {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[5]++;
  cov_1jyp3dm6tm().s[43]++;
  logger_1.logger.info('📊 Mongoose connected to MongoDB');
});
/* istanbul ignore next */
cov_1jyp3dm6tm().s[44]++;
mongoose_1.default.connection.on('error', error => {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[6]++;
  cov_1jyp3dm6tm().s[45]++;
  logger_1.logger.error('❌ Mongoose connection error:', error);
  /* istanbul ignore next */
  cov_1jyp3dm6tm().s[46]++;
  isConnected = false;
});
/* istanbul ignore next */
cov_1jyp3dm6tm().s[47]++;
mongoose_1.default.connection.on('disconnected', () => {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[7]++;
  cov_1jyp3dm6tm().s[48]++;
  logger_1.logger.info('📊 Mongoose disconnected from MongoDB');
  /* istanbul ignore next */
  cov_1jyp3dm6tm().s[49]++;
  isConnected = false;
});
// Handle application termination
/* istanbul ignore next */
cov_1jyp3dm6tm().s[50]++;
process.on('SIGINT', async () => {
  /* istanbul ignore next */
  cov_1jyp3dm6tm().f[8]++;
  cov_1jyp3dm6tm().s[51]++;
  try {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[52]++;
    await disconnectDatabase();
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[53]++;
    logger_1.logger.info('📊 MongoDB connection closed through app termination');
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[54]++;
    process.exit(0);
  } catch (error) {
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[55]++;
    logger_1.logger.error('❌ Error during MongoDB disconnection:', error);
    /* istanbul ignore next */
    cov_1jyp3dm6tm().s[56]++;
    process.exit(1);
  }
});
/* istanbul ignore next */
cov_1jyp3dm6tm().s[57]++;
exports.default = {
  connect: connectDatabase,
  disconnect: disconnectDatabase,
  getStatus: getDatabaseStatus,
  clear: clearDatabase
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,