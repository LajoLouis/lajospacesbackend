{"version":3,"names":["cov_20oq5kwdlb","actualCoverage","s","User_model_1","require","presenceService_1","logger_1","notification_model_1","emailService_1","NotificationService","constructor","f","presenceService","PresenceService","getInstance","instance","b","sendMessageNotification","message","conversation","recipientId","isUserOnline","userActivity","getUserPresence","currentActivity","type","details","_id","toString","logger","debug","recipient","sender","Promise","all","User","findById","select","senderId","warn","shouldSendNotification","participantDetail","participantDetails","find","pd","userId","isMuted","now","Date","mutedUntil","notification","id","title","getMessageNotificationTitle","body","getMessageNotificationBody","data","conversationId","messageId","senderName","firstName","lastName","senderAvatar","avatar","messageType","priority","createdAt","expiresAt","sendPushNotification","userPresence","isOfflineLong","status","lastSeen","getTime","shouldSendEmailNotification","sendEmailNotification","info","error","sendMatchNotification","matchData","user","compatibilityScore","matchId","targetType","sendSystemNotification","sendBulkNotifications","userIds","users","$in","promises","map","fullNotification","resolve","allSettled","length","pushTokens","pushConfig","icon","badge","sound","clickAction","getClickAction","emailData","to","email","subject","template","getEmailTemplate","userName","notificationTitle","notificationBody","conversationTitle","actionUrl","getActionUrl","unsubscribeUrl","process","env","FRONTEND_URL","result","emailService","sendEmail","html","text","success","notificationSettings","settings","messages","matches","system","emailSettings","conversationType","content","substring","baseUrl","cleanupExpiredNotifications","Notification","deleteMany","$lt","deletedCount","getNotificationStats","_userId","totalSent","totalRead","totalUnread","byType","countDocuments","read","dismissed","aggregate","$match","$group","count","$sum","typeStats","reduce","acc","item","exports"],"sources":["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\notificationService.ts"],"sourcesContent":["import { User } from '../models/User.model';\r\nimport { PresenceService } from './presenceService';\r\nimport { logger } from '../utils/logger';\r\nimport {\r\n  Notification,\r\n  NotificationType,\r\n  NotificationPriority,\r\n  NotificationChannel\r\n} from '../models/notification.model';\r\nimport { emailService } from './emailService';\r\n\r\nexport interface NotificationPayload {\r\n  id: string;\r\n  type: 'message' | 'match' | 'system' | 'property' | 'reminder';\r\n  title: string;\r\n  body: string;\r\n  data?: {\r\n    conversationId?: string;\r\n    messageId?: string;\r\n    senderId?: string;\r\n    senderName?: string;\r\n    senderAvatar?: string;\r\n    matchId?: string;\r\n    propertyId?: string;\r\n    [key: string]: any;\r\n  };\r\n  priority: 'high' | 'normal' | 'low';\r\n  createdAt: Date;\r\n  expiresAt?: Date;\r\n}\r\n\r\nexport interface PushNotificationConfig {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  badge?: string;\r\n  sound?: string;\r\n  clickAction?: string;\r\n  data?: any;\r\n}\r\n\r\nexport class NotificationService {\r\n  private static instance: NotificationService;\r\n  private presenceService: PresenceService;\r\n\r\n  constructor() {\r\n    this.presenceService = PresenceService.getInstance();\r\n  }\r\n\r\n  public static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  /**\r\n   * Send message notification\r\n   */\r\n  public async sendMessageNotification(\r\n    message: any,\r\n    conversation: any,\r\n    recipientId: string\r\n  ): Promise<void> {\r\n    try {\r\n      // Don't send notification if recipient is online and active in the conversation\r\n      if (this.presenceService.isUserOnline(recipientId)) {\r\n        const userActivity = this.presenceService.getUserPresence(recipientId)?.currentActivity;\r\n        if (userActivity?.type === 'messaging' && userActivity.details === conversation._id.toString()) {\r\n          logger.debug(`Skipping notification for ${recipientId} - active in conversation`);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Get recipient and sender info\r\n      const [recipient, sender] = await Promise.all([\r\n        User.findById(recipientId).select('firstName lastName email notificationSettings pushTokens'),\r\n        User.findById(message.senderId).select('firstName lastName avatar')\r\n      ]);\r\n\r\n      if (!recipient || !sender) {\r\n        logger.warn(`Missing user data for notification - recipient: ${!!recipient}, sender: ${!!sender}`);\r\n        return;\r\n      }\r\n\r\n      // Check if recipient has notifications enabled\r\n      if (!this.shouldSendNotification(recipient, 'message')) {\r\n        logger.debug(`Notifications disabled for user ${recipientId}`);\r\n        return;\r\n      }\r\n\r\n      // Check if conversation is muted\r\n      const participantDetail = conversation.participantDetails.find(\r\n        (pd: any) => pd.userId.toString() === recipientId\r\n      );\r\n\r\n      if (participantDetail?.isMuted) {\r\n        const now = new Date();\r\n        if (!participantDetail.mutedUntil || participantDetail.mutedUntil > now) {\r\n          logger.debug(`Conversation muted for user ${recipientId}`);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Create notification payload\r\n      const notification: NotificationPayload = {\r\n        id: `msg_${message._id}_${Date.now()}`,\r\n        type: 'message',\r\n        title: this.getMessageNotificationTitle(sender, conversation),\r\n        body: this.getMessageNotificationBody(message),\r\n        data: {\r\n          conversationId: conversation._id.toString(),\r\n          messageId: message._id.toString(),\r\n          senderId: (sender as any)._id.toString(),\r\n          senderName: `${(sender as any).firstName} ${(sender as any).lastName}`,\r\n          senderAvatar: (sender as any).avatar,\r\n          messageType: message.messageType\r\n        },\r\n        priority: 'high',\r\n        createdAt: new Date(),\r\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\r\n      };\r\n\r\n      // Send push notification\r\n      await this.sendPushNotification(recipient, notification);\r\n\r\n      // Send email notification if user is offline for more than 30 minutes\r\n      const userPresence = this.presenceService.getUserPresence(recipientId);\r\n      const isOfflineLong = !userPresence || \r\n        (userPresence.status === 'offline' && \r\n         Date.now() - userPresence.lastSeen.getTime() > 30 * 60 * 1000);\r\n\r\n      if (isOfflineLong && this.shouldSendEmailNotification(recipient, 'message')) {\r\n        await this.sendEmailNotification(recipient, notification, conversation);\r\n      }\r\n\r\n      logger.info(`Message notification sent to user ${recipientId} for message ${message._id}`);\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending message notification:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send match notification\r\n   */\r\n  public async sendMatchNotification(\r\n    userId: string,\r\n    matchData: any\r\n  ): Promise<void> {\r\n    try {\r\n      const user = await User.findById(userId).select('firstName lastName email notificationSettings pushTokens');\r\n      \r\n      if (!user || !this.shouldSendNotification(user, 'match')) {\r\n        return;\r\n      }\r\n\r\n      const notification: NotificationPayload = {\r\n        id: `match_${matchData.id}_${Date.now()}`,\r\n        type: 'match',\r\n        title: '🎉 New Match!',\r\n        body: `You have a new ${matchData.type} match with ${matchData.compatibilityScore}% compatibility!`,\r\n        data: {\r\n          matchId: matchData.id,\r\n          targetType: matchData.type,\r\n          compatibilityScore: matchData.compatibilityScore\r\n        },\r\n        priority: 'high',\r\n        createdAt: new Date()\r\n      };\r\n\r\n      await this.sendPushNotification(user, notification);\r\n\r\n      logger.info(`Match notification sent to user ${userId}`);\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending match notification:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send system notification\r\n   */\r\n  public async sendSystemNotification(\r\n    userId: string,\r\n    title: string,\r\n    body: string,\r\n    data?: any\r\n  ): Promise<void> {\r\n    try {\r\n      const user = await User.findById(userId).select('firstName lastName email notificationSettings pushTokens');\r\n      \r\n      if (!user || !this.shouldSendNotification(user, 'system')) {\r\n        return;\r\n      }\r\n\r\n      const notification: NotificationPayload = {\r\n        id: `system_${userId}_${Date.now()}`,\r\n        type: 'system',\r\n        title,\r\n        body,\r\n        data,\r\n        priority: 'normal',\r\n        createdAt: new Date()\r\n      };\r\n\r\n      await this.sendPushNotification(user, notification);\r\n\r\n      logger.info(`System notification sent to user ${userId}: ${title}`);\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending system notification:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send bulk notifications\r\n   */\r\n  public async sendBulkNotifications(\r\n    userIds: string[],\r\n    notification: Omit<NotificationPayload, 'id' | 'createdAt'>\r\n  ): Promise<void> {\r\n    try {\r\n      const users = await User.find({\r\n        _id: { $in: userIds }\r\n      }).select('firstName lastName email notificationSettings pushTokens');\r\n\r\n      const promises = users.map(user => {\r\n        if (this.shouldSendNotification(user, notification.type)) {\r\n          const fullNotification: NotificationPayload = {\r\n            ...notification,\r\n            id: `bulk_${user._id}_${Date.now()}`,\r\n            createdAt: new Date()\r\n          };\r\n          return this.sendPushNotification(user, fullNotification);\r\n        }\r\n        return Promise.resolve();\r\n      });\r\n\r\n      await Promise.allSettled(promises);\r\n\r\n      logger.info(`Bulk notification sent to ${users.length} users`);\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending bulk notifications:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send push notification\r\n   */\r\n  private async sendPushNotification(\r\n    user: any,\r\n    notification: NotificationPayload\r\n  ): Promise<void> {\r\n    try {\r\n      // Check if user has push tokens\r\n      if (!user.pushTokens || user.pushTokens.length === 0) {\r\n        logger.debug(`No push tokens for user ${user._id}`);\r\n        return;\r\n      }\r\n\r\n      const pushConfig: PushNotificationConfig = {\r\n        title: notification.title,\r\n        body: notification.body,\r\n        icon: '/icons/icon-192x192.png',\r\n        badge: '/icons/badge-72x72.png',\r\n        sound: 'default',\r\n        clickAction: this.getClickAction(notification),\r\n        data: notification.data\r\n      };\r\n\r\n      // Here you would integrate with your push notification service\r\n      // Examples: Firebase Cloud Messaging (FCM), Apple Push Notification Service (APNs)\r\n      \r\n      // For now, we'll log the notification\r\n      logger.info(`Push notification would be sent to ${user.pushTokens.length} devices:`, {\r\n        userId: user._id,\r\n        title: pushConfig.title,\r\n        body: pushConfig.body,\r\n        type: notification.type\r\n      });\r\n\r\n      // TODO: Implement actual push notification sending\r\n      // await this.fcmService.sendToTokens(user.pushTokens, pushConfig);\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending push notification:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send email notification\r\n   */\r\n  private async sendEmailNotification(\r\n    user: any,\r\n    notification: NotificationPayload,\r\n    conversation?: any\r\n  ): Promise<void> {\r\n    try {\r\n      // Check if user has email notifications enabled\r\n      if (!this.shouldSendEmailNotification(user, notification.type)) {\r\n        return;\r\n      }\r\n\r\n      const emailData = {\r\n        to: user.email,\r\n        subject: notification.title,\r\n        template: this.getEmailTemplate(notification.type),\r\n        data: {\r\n          userName: `${user.firstName} ${user.lastName}`,\r\n          notificationTitle: notification.title,\r\n          notificationBody: notification.body,\r\n          conversationTitle: conversation?.title,\r\n          senderName: notification.data?.senderName,\r\n          actionUrl: this.getActionUrl(notification),\r\n          unsubscribeUrl: `${process.env.FRONTEND_URL}/settings/notifications?token=${user._id}`\r\n        }\r\n      };\r\n\r\n      // Send email using the email service\r\n      const result = await emailService.sendEmail({\r\n        to: user.email,\r\n        subject: emailData.subject,\r\n        html: `\r\n          <h2>${emailData.data.notificationTitle}</h2>\r\n          <p>Hello ${emailData.data.userName}!</p>\r\n          <p>${emailData.data.notificationBody}</p>\r\n          ${emailData.data.actionUrl ? `<p><a href=\"${emailData.data.actionUrl}\">View Details</a></p>` : ''}\r\n          <p><a href=\"${emailData.data.unsubscribeUrl}\">Unsubscribe</a></p>\r\n        `,\r\n        text: `\r\n          ${emailData.data.notificationTitle}\r\n\r\n          Hello ${emailData.data.userName}!\r\n\r\n          ${emailData.data.notificationBody}\r\n\r\n          ${emailData.data.actionUrl ? `View details: ${emailData.data.actionUrl}` : ''}\r\n\r\n          Unsubscribe: ${emailData.data.unsubscribeUrl}\r\n        `\r\n      });\r\n\r\n      if (result.success) {\r\n        logger.info(`Email notification sent to ${user.email}:`, {\r\n          subject: emailData.subject,\r\n          messageId: result.messageId\r\n        });\r\n      } else {\r\n        logger.error(`Failed to send email notification to ${user.email}:`, result.error);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Error sending email notification:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if notification should be sent\r\n   */\r\n  private shouldSendNotification(user: any, type: string): boolean {\r\n    if (!user.notificationSettings) {\r\n      return true; // Default to enabled\r\n    }\r\n\r\n    const settings = user.notificationSettings;\r\n    \r\n    switch (type) {\r\n      case 'message':\r\n        return settings.messages !== false;\r\n      case 'match':\r\n        return settings.matches !== false;\r\n      case 'system':\r\n        return settings.system !== false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if email notification should be sent\r\n   */\r\n  private shouldSendEmailNotification(user: any, type: string): boolean {\r\n    if (!user.notificationSettings?.email) {\r\n      return false;\r\n    }\r\n\r\n    const emailSettings = user.notificationSettings.email;\r\n    \r\n    switch (type) {\r\n      case 'message':\r\n        return emailSettings.messages !== false;\r\n      case 'match':\r\n        return emailSettings.matches !== false;\r\n      case 'system':\r\n        return emailSettings.system !== false;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get message notification title\r\n   */\r\n  private getMessageNotificationTitle(sender: any, conversation: any): string {\r\n    if (conversation.conversationType === 'direct') {\r\n      return `${sender.firstName} ${sender.lastName}`;\r\n    } else {\r\n      return conversation.title || 'Group Message';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get message notification body\r\n   */\r\n  private getMessageNotificationBody(message: any): string {\r\n    switch (message.messageType) {\r\n      case 'text':\r\n        return message.content.length > 100 \r\n          ? `${message.content.substring(0, 100)}...`\r\n          : message.content;\r\n      case 'image':\r\n        return '📷 Sent a photo';\r\n      case 'file':\r\n        return '📎 Sent a file';\r\n      case 'location':\r\n        return '📍 Shared location';\r\n      case 'property_share':\r\n        return '🏠 Shared a property';\r\n      case 'system':\r\n        return message.content;\r\n      default:\r\n        return 'Sent a message';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get click action URL\r\n   */\r\n  private getClickAction(notification: NotificationPayload): string {\r\n    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';\r\n    \r\n    switch (notification.type) {\r\n      case 'message':\r\n        return `${baseUrl}/messages/${notification.data?.conversationId}`;\r\n      case 'match':\r\n        return `${baseUrl}/matches`;\r\n      case 'system':\r\n        return `${baseUrl}/notifications`;\r\n      default:\r\n        return baseUrl;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get action URL for emails\r\n   */\r\n  private getActionUrl(notification: NotificationPayload): string {\r\n    return this.getClickAction(notification);\r\n  }\r\n\r\n  /**\r\n   * Get email template name\r\n   */\r\n  private getEmailTemplate(type: string): string {\r\n    switch (type) {\r\n      case 'message':\r\n        return 'new-message';\r\n      case 'match':\r\n        return 'new-match';\r\n      case 'system':\r\n        return 'system-notification';\r\n      default:\r\n        return 'general-notification';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule notification cleanup\r\n   */\r\n  public async cleanupExpiredNotifications(): Promise<void> {\r\n    try {\r\n      // This would clean up stored notifications from database\r\n      // For now, we'll just log\r\n      logger.info('Cleaning up expired notifications');\r\n      \r\n      // Clean up expired notifications using the new model\r\n      const result = await Notification.deleteMany({ expiresAt: { $lt: new Date() } });\r\n      logger.info(`Cleaned up ${result.deletedCount} expired notifications`);\r\n      \r\n    } catch (error) {\r\n      logger.error('Error cleaning up notifications:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get notification statistics\r\n   */\r\n  public async getNotificationStats(_userId: string): Promise<{\r\n    totalSent: number;\r\n    totalRead: number;\r\n    totalUnread: number;\r\n    byType: { [key: string]: number };\r\n  }> {\r\n    try {\r\n      // Get notification statistics from the new model\r\n      const [totalSent, totalRead, totalUnread, byType] = await Promise.all([\r\n        Notification.countDocuments({ userId }),\r\n        Notification.countDocuments({ userId, read: true }),\r\n        Notification.countDocuments({ userId, read: false, dismissed: false }),\r\n        Notification.aggregate([\r\n          { $match: { userId } },\r\n          { $group: { _id: '$type', count: { $sum: 1 } } }\r\n        ])\r\n      ]);\r\n\r\n      const typeStats = byType.reduce((acc: any, item: any) => {\r\n        acc[item._id] = item.count;\r\n        return acc;\r\n      }, {});\r\n\r\n      return {\r\n        totalSent,\r\n        totalRead,\r\n        totalUnread,\r\n        byType: typeStats\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error getting notification stats:', error);\r\n      return {\r\n        totalSent: 0,\r\n        totalRead: 0,\r\n        totalUnread: 0,\r\n        byType: {}\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"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","ignoreList":[]}