{"version":3,"names":["cov_2dxu87z6yi","actualCoverage","crypto_1","s","__importDefault","require","catchAsync_1","appError_1","logger_1","emailService_1","emailTemplateService_1","User_model_1","exports","sendVerificationEmail","catchAsync","req","res","f","userId","user","_id","email","body","b","AppError","User","findById","select","emailVerified","verificationToken","default","randomBytes","toString","result","emailService","firstName","success","logger","info","messageId","json","message","data","sendPasswordResetEmail","findOne","resetToken","error","sendCustomEmail","templateType","recipientEmail","templateData","subject","customContent","role","emailContent","emailSubject","Object","values","EmailTemplateType","includes","rendered","emailTemplateService","renderTemplate","content","sendEmail","to","html","testEmailService","isConnected","verifyConnection","Date","toISOString","text","connectionStatus","testEmailSent","timestamp","getEmailServiceStatus","status","service","getEmailTemplates","templates","map","type","name","replace","l","toUpperCase","description","getTemplateDescription","total","length","previewEmailTemplate","format","sampleData","userName","userEmail","verificationUrl","resetUrl","senderName","messagePreview","messageUrl","compatibilityScore","matchType","location","budgetRange","matchUrl","propertyTitle","propertyLocation","propertyPrice","propertyUrl","descriptions","WELCOME","EMAIL_VERIFICATION","PASSWORD_RESET","PASSWORD_CHANGED","NEW_MESSAGE","NEW_MATCH","PROPERTY_POSTED","PROPERTY_APPROVED","SYSTEM_NOTIFICATION","NEWSLETTER","SECURITY_ALERT"],"sources":["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\email.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { Types } from 'mongoose';\r\nimport crypto from 'crypto';\r\nimport { catchAsync } from '../utils/catchAsync';\r\nimport { AppError } from '../utils/appError';\r\nimport { logger } from '../utils/logger';\r\nimport { emailService } from '../services/emailService';\r\nimport { emailTemplateService, EmailTemplateType } from '../services/emailTemplateService';\r\nimport { EmailPreferences } from '../models/emailPreferences.model';\r\nimport { User } from '../models/User.model';\r\n\r\n/**\r\n * Send verification email\r\n */\r\nexport const sendVerificationEmail = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { email } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  // Get user details\r\n  const user = await User.findById(userId).select('firstName lastName email emailVerified');\r\n  \r\n  if (!user) {\r\n    throw new AppError('User not found', 404);\r\n  }\r\n\r\n  if (user.emailVerified) {\r\n    throw new AppError('Email already verified', 400);\r\n  }\r\n\r\n  // Generate secure verification token\r\n  const verificationToken = crypto.randomBytes(32).toString('hex');\r\n\r\n  // Send verification email\r\n  const result = await emailService.sendVerificationEmail(\r\n    email || user.email,\r\n    user.firstName,\r\n    verificationToken\r\n  );\r\n\r\n  if (!result.success) {\r\n    throw new AppError('Failed to send verification email', 500);\r\n  }\r\n\r\n  logger.info('Verification email sent', {\r\n    userId,\r\n    email: email || user.email,\r\n    messageId: result.messageId\r\n  });\r\n\r\n  return res.json({\r\n    success: true,\r\n    message: 'Verification email sent successfully',\r\n    data: {\r\n      email: email || user.email,\r\n      messageId: result.messageId\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Send password reset email\r\n */\r\nexport const sendPasswordResetEmail = catchAsync(async (req: Request, res: Response) => {\r\n  const { email } = req.body;\r\n\r\n  if (!email) {\r\n    throw new AppError('Email is required', 400);\r\n  }\r\n\r\n  // Find user by email\r\n  const user = await User.findOne({ email }).select('firstName lastName email');\r\n  \r\n  if (!user) {\r\n    // Don't reveal if email exists for security\r\n    return res.json({\r\n      success: true,\r\n      message: 'If an account with that email exists, a password reset link has been sent'\r\n    });\r\n  }\r\n\r\n  // Generate secure reset token\r\n  const resetToken = crypto.randomBytes(32).toString('hex');\r\n\r\n  // Send password reset email\r\n  const result = await emailService.sendPasswordResetEmail(\r\n    user.email,\r\n    user.firstName,\r\n    resetToken\r\n  );\r\n\r\n  if (!result.success) {\r\n    logger.error('Failed to send password reset email', {\r\n      email,\r\n      error: result.error\r\n    });\r\n    \r\n    // Don't reveal the error for security\r\n    return res.json({\r\n      success: true,\r\n      message: 'If an account with that email exists, a password reset link has been sent'\r\n    });\r\n  }\r\n\r\n  logger.info('Password reset email sent', {\r\n    email,\r\n    messageId: result.messageId\r\n  });\r\n\r\n  return res.json({\r\n    success: true,\r\n    message: 'If an account with that email exists, a password reset link has been sent',\r\n    data: {\r\n      messageId: result.messageId\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Send custom email\r\n */\r\nexport const sendCustomEmail = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { \r\n    templateType, \r\n    recipientEmail, \r\n    templateData, \r\n    subject,\r\n    customContent \r\n  } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  // Check if user has permission to send custom emails (admin only)\r\n  const user = await User.findById(userId).select('role');\r\n  if (!user || user.role !== 'admin') {\r\n    throw new AppError('Insufficient permissions', 403);\r\n  }\r\n\r\n  let emailContent;\r\n  let emailSubject;\r\n\r\n  if (templateType && Object.values(EmailTemplateType).includes(templateType)) {\r\n    // Use template\r\n    const rendered = emailTemplateService.renderTemplate(\r\n      templateType as EmailTemplateType,\r\n      templateData || {},\r\n      'html'\r\n    );\r\n    emailContent = rendered.content;\r\n    emailSubject = subject || rendered.subject;\r\n  } else if (customContent) {\r\n    // Use custom content\r\n    emailContent = customContent;\r\n    emailSubject = subject || 'Message from LajoSpaces';\r\n  } else {\r\n    throw new AppError('Either templateType or customContent is required', 400);\r\n  }\r\n\r\n  // Send email\r\n  const result = await emailService.sendEmail({\r\n    to: recipientEmail,\r\n    subject: emailSubject,\r\n    html: emailContent\r\n  });\r\n\r\n  if (!result.success) {\r\n    throw new AppError('Failed to send email', 500);\r\n  }\r\n\r\n  logger.info('Custom email sent', {\r\n    userId,\r\n    recipientEmail,\r\n    templateType,\r\n    messageId: result.messageId\r\n  });\r\n\r\n  return res.json({\r\n    success: true,\r\n    message: 'Email sent successfully',\r\n    data: {\r\n      messageId: result.messageId\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Test email service\r\n */\r\nexport const testEmailService = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  // Check if user is admin\r\n  const user = await User.findById(userId).select('role email firstName');\r\n  if (!user || user.role !== 'admin') {\r\n    throw new AppError('Insufficient permissions', 403);\r\n  }\r\n\r\n  // Test email service connection\r\n  const isConnected = await emailService.verifyConnection();\r\n\r\n  if (!isConnected) {\r\n    throw new AppError('Email service connection failed', 500);\r\n  }\r\n\r\n  // Send test email\r\n  const result = await emailService.sendEmail({\r\n    to: user.email,\r\n    subject: 'LajoSpaces Email Service Test',\r\n    html: `\r\n      <h2>Email Service Test</h2>\r\n      <p>Hello ${user.firstName}!</p>\r\n      <p>This is a test email to verify that the LajoSpaces email service is working correctly.</p>\r\n      <p>If you received this email, the service is functioning properly.</p>\r\n      <p>Test performed at: ${new Date().toISOString()}</p>\r\n      <p>Best regards,<br>LajoSpaces System</p>\r\n    `,\r\n    text: `\r\n      Email Service Test\r\n      \r\n      Hello ${user.firstName}!\r\n      \r\n      This is a test email to verify that the LajoSpaces email service is working correctly.\r\n      \r\n      If you received this email, the service is functioning properly.\r\n      \r\n      Test performed at: ${new Date().toISOString()}\r\n      \r\n      Best regards,\r\n      LajoSpaces System\r\n    `\r\n  });\r\n\r\n  if (!result.success) {\r\n    throw new AppError('Failed to send test email', 500);\r\n  }\r\n\r\n  logger.info('Test email sent successfully', {\r\n    userId,\r\n    email: user.email,\r\n    messageId: result.messageId\r\n  });\r\n\r\n  return res.json({\r\n    success: true,\r\n    message: 'Test email sent successfully',\r\n    data: {\r\n      connectionStatus: 'connected',\r\n      testEmailSent: true,\r\n      messageId: result.messageId,\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Get email service status\r\n */\r\nexport const getEmailServiceStatus = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  // Check if user is admin\r\n  const user = await User.findById(userId).select('role');\r\n  if (!user || user.role !== 'admin') {\r\n    throw new AppError('Insufficient permissions', 403);\r\n  }\r\n\r\n  // Check email service connection\r\n  const isConnected = await emailService.verifyConnection();\r\n\r\n  return res.json({\r\n    success: true,\r\n    data: {\r\n      status: isConnected ? 'connected' : 'disconnected',\r\n      timestamp: new Date().toISOString(),\r\n      service: 'Zoho SMTP'\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Get available email templates\r\n */\r\nexport const getEmailTemplates = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  const templates = Object.values(EmailTemplateType).map(type => ({\r\n    type,\r\n    name: type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\r\n    description: getTemplateDescription(type)\r\n  }));\r\n\r\n  return res.json({\r\n    success: true,\r\n    data: {\r\n      templates,\r\n      total: templates.length\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Preview email template\r\n */\r\nexport const previewEmailTemplate = catchAsync(async (req: Request, res: Response) => {\r\n  const { templateType, templateData, format = 'html' } = req.body;\r\n\r\n  if (!templateType || !Object.values(EmailTemplateType).includes(templateType)) {\r\n    throw new AppError('Invalid template type', 400);\r\n  }\r\n\r\n  const sampleData = {\r\n    userName: 'John Doe',\r\n    userEmail: 'john@example.com',\r\n    verificationUrl: 'https://lajospaces.com/verify?token=sample',\r\n    resetUrl: 'https://lajospaces.com/reset?token=sample',\r\n    senderName: 'Jane Smith',\r\n    messagePreview: 'Hello! I saw your property listing and I\\'m interested...',\r\n    messageUrl: 'https://lajospaces.com/messages/123',\r\n    compatibilityScore: 85,\r\n    matchType: 'Roommate',\r\n    location: 'Lagos, Nigeria',\r\n    budgetRange: '₦50,000 - ₦80,000',\r\n    matchUrl: 'https://lajospaces.com/matches/456',\r\n    propertyTitle: 'Beautiful 2-Bedroom Apartment',\r\n    propertyLocation: 'Victoria Island, Lagos',\r\n    propertyPrice: '₦120,000/month',\r\n    propertyUrl: 'https://lajospaces.com/properties/789',\r\n    ...templateData\r\n  };\r\n\r\n  const rendered = emailTemplateService.renderTemplate(\r\n    templateType as EmailTemplateType,\r\n    sampleData,\r\n    format as 'html' | 'text'\r\n  );\r\n\r\n  return res.json({\r\n    success: true,\r\n    data: {\r\n      subject: rendered.subject,\r\n      content: rendered.content,\r\n      format,\r\n      templateType\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * Get template description\r\n */\r\nfunction getTemplateDescription(type: EmailTemplateType): string {\r\n  const descriptions = {\r\n    [EmailTemplateType.WELCOME]: 'Welcome email sent to new users after registration',\r\n    [EmailTemplateType.EMAIL_VERIFICATION]: 'Email verification link sent to users',\r\n    [EmailTemplateType.PASSWORD_RESET]: 'Password reset link sent to users',\r\n    [EmailTemplateType.PASSWORD_CHANGED]: 'Confirmation email sent after password change',\r\n    [EmailTemplateType.NEW_MESSAGE]: 'Notification email for new messages',\r\n    [EmailTemplateType.NEW_MATCH]: 'Notification email for new roommate matches',\r\n    [EmailTemplateType.PROPERTY_POSTED]: 'Confirmation email when property is posted',\r\n    [EmailTemplateType.PROPERTY_APPROVED]: 'Notification when property is approved',\r\n    [EmailTemplateType.SYSTEM_NOTIFICATION]: 'General system notifications',\r\n    [EmailTemplateType.NEWSLETTER]: 'Newsletter and promotional emails',\r\n    [EmailTemplateType.SECURITY_ALERT]: 'Security-related notifications'\r\n  };\r\n\r\n  return descriptions[type] || 'Email template';\r\n}\r\n"],"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","ignoreList":[]}