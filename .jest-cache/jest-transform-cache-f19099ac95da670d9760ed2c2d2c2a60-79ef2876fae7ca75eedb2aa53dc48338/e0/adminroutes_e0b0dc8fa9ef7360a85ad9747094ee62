db73cd6e9e13f9cfccebc2cb0611a8ef
"use strict";

/* istanbul ignore next */
function cov_1io6lkpmz1() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\admin.routes.ts";
  var hash = "ccbfe9d801e3d5f4bc1ee9b04615f12de3e0a027";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\admin.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 66
        }
      },
      "4": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 58
        }
      },
      "6": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "7": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 58
        }
      },
      "8": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 65
        }
      },
      "9": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 60
        }
      },
      "10": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 60
        }
      },
      "11": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 60
        }
      },
      "12": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "13": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 42
        }
      },
      "14": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "15": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 46
        }
      },
      "16": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 53
        }
      },
      "17": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "18": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "19": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "20": {
        start: {
          line: 88,
          column: 23
        },
        end: {
          line: 88,
          column: 78
        }
      },
      "21": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "22": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "23": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "24": {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 141,
          column: 3
        }
      },
      "25": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "26": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 128,
          column: 54
        }
      },
      "27": {
        start: {
          line: 129,
          column: 22
        },
        end: {
          line: 129,
          column: 80
        }
      },
      "28": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 133,
          column: 11
        }
      },
      "29": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "30": {
        start: {
          line: 154,
          column: 0
        },
        end: {
          line: 171,
          column: 3
        }
      },
      "31": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "32": {
        start: {
          line: 156,
          column: 22
        },
        end: {
          line: 156,
          column: 66
        }
      },
      "33": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 163,
          column: 11
        }
      },
      "34": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "35": {
        start: {
          line: 184,
          column: 0
        },
        end: {
          line: 198,
          column: 3
        }
      },
      "36": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "37": {
        start: {
          line: 186,
          column: 22
        },
        end: {
          line: 186,
          column: 72
        }
      },
      "38": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 190,
          column: 11
        }
      },
      "39": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 196,
          column: 11
        }
      },
      "40": {
        start: {
          line: 219,
          column: 0
        },
        end: {
          line: 234,
          column: 3
        }
      },
      "41": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "42": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 55
        }
      },
      "43": {
        start: {
          line: 222,
          column: 22
        },
        end: {
          line: 222,
          column: 76
        }
      },
      "44": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "45": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 232,
          column: 11
        }
      },
      "46": {
        start: {
          line: 247,
          column: 0
        },
        end: {
          line: 264,
          column: 3
        }
      },
      "47": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 263,
          column: 5
        }
      },
      "48": {
        start: {
          line: 249,
          column: 22
        },
        end: {
          line: 249,
          column: 77
        }
      },
      "49": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "50": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 262,
          column: 11
        }
      },
      "51": {
        start: {
          line: 277,
          column: 0
        },
        end: {
          line: 294,
          column: 3
        }
      },
      "52": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "53": {
        start: {
          line: 279,
          column: 22
        },
        end: {
          line: 279,
          column: 71
        }
      },
      "54": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 286,
          column: 11
        }
      },
      "55": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 292,
          column: 11
        }
      },
      "56": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 362,
          column: 3
        }
      },
      "57": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 361,
          column: 5
        }
      },
      "58": {
        start: {
          line: 322,
          column: 32
        },
        end: {
          line: 322,
          column: 40
        }
      },
      "59": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "60": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 65
        }
      },
      "61": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 54
        }
      },
      "62": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 22
        }
      },
      "63": {
        start: {
          line: 330,
          column: 35
        },
        end: {
          line: 330,
          column: 91
        }
      },
      "64": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 67
        }
      },
      "65": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 22
        }
      },
      "66": {
        start: {
          line: 334,
          column: 37
        },
        end: {
          line: 334,
          column: 99
        }
      },
      "67": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 335,
          column: 71
        }
      },
      "68": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 22
        }
      },
      "69": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 66
        }
      },
      "70": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 49
        }
      },
      "71": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 22
        }
      },
      "72": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 345,
          column: 19
        }
      },
      "73": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 350,
          column: 11
        }
      },
      "74": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 354,
          column: 11
        }
      },
      "75": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 360,
          column: 11
        }
      },
      "76": {
        start: {
          line: 375,
          column: 0
        },
        end: {
          line: 411,
          column: 3
        }
      },
      "77": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 410,
          column: 5
        }
      },
      "78": {
        start: {
          line: 377,
          column: 23
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "79": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "80": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 409,
          column: 11
        }
      },
      "81": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 412,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 77,
            column: 26
          },
          end: {
            line: 77,
            column: 27
          }
        },
        loc: {
          start: {
            line: 77,
            column: 46
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 77
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 126,
            column: 27
          },
          end: {
            line: 126,
            column: 28
          }
        },
        loc: {
          start: {
            line: 126,
            column: 47
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 126
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 154,
            column: 33
          },
          end: {
            line: 154,
            column: 34
          }
        },
        loc: {
          start: {
            line: 154,
            column: 53
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 154
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 184,
            column: 35
          },
          end: {
            line: 184,
            column: 36
          }
        },
        loc: {
          start: {
            line: 184,
            column: 55
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 184
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 219,
            column: 36
          },
          end: {
            line: 219,
            column: 37
          }
        },
        loc: {
          start: {
            line: 219,
            column: 56
          },
          end: {
            line: 234,
            column: 1
          }
        },
        line: 219
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 247,
            column: 33
          },
          end: {
            line: 247,
            column: 34
          }
        },
        loc: {
          start: {
            line: 247,
            column: 53
          },
          end: {
            line: 264,
            column: 1
          }
        },
        line: 247
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 277,
            column: 31
          },
          end: {
            line: 277,
            column: 32
          }
        },
        loc: {
          start: {
            line: 277,
            column: 51
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 277
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 320,
            column: 36
          },
          end: {
            line: 320,
            column: 37
          }
        },
        loc: {
          start: {
            line: 320,
            column: 56
          },
          end: {
            line: 362,
            column: 1
          }
        },
        line: 320
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 375,
            column: 29
          },
          end: {
            line: 375,
            column: 30
          }
        },
        loc: {
          start: {
            line: 375,
            column: 49
          },
          end: {
            line: 411,
            column: 1
          }
        },
        line: 375
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 45
          },
          end: {
            line: 83,
            column: 74
          }
        }, {
          start: {
            line: 83,
            column: 77
          },
          end: {
            line: 83,
            column: 86
          }
        }],
        line: 83
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 21
          },
          end: {
            line: 84,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 84,
            column: 68
          }
        }, {
          start: {
            line: 84,
            column: 71
          },
          end: {
            line: 84,
            column: 80
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 85,
            column: 18
          },
          end: {
            line: 85,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 18
          },
          end: {
            line: 85,
            column: 42
          }
        }, {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 47
          }
        }],
        line: 85
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 19
          },
          end: {
            line: 86,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 19
          },
          end: {
            line: 86,
            column: 44
          }
        }, {
          start: {
            line: 86,
            column: 48
          },
          end: {
            line: 86,
            column: 50
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 45
          }
        }, {
          start: {
            line: 128,
            column: 49
          },
          end: {
            line: 128,
            column: 54
          }
        }],
        line: 128
      },
      "5": {
        loc: {
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 26
          },
          end: {
            line: 221,
            column: 45
          }
        }, {
          start: {
            line: 221,
            column: 49
          },
          end: {
            line: 221,
            column: 55
          }
        }],
        line: 221
      },
      "6": {
        loc: {
          start: {
            line: 324,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 325,
            column: 12
          },
          end: {
            line: 328,
            column: 22
          }
        }, {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 332,
            column: 22
          }
        }, {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 336,
            column: 22
          }
        }, {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 340,
            column: 22
          }
        }, {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 345,
            column: 19
          }
        }],
        line: 324
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\admin.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\admin.routes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport { authenticate as authMiddleware } from '../middleware/auth';\r\nimport { adminMiddleware } from '../middleware/adminMiddleware';\r\nimport { auditService, AuditEventType, RiskLevel } from '../services/auditService';\r\nimport { cacheService } from '../services/cacheService';\r\nimport { sessionService } from '../services/sessionService';\r\nimport { tokenService } from '../services/tokenService';\r\nimport { queryOptimizer } from '../utils/queryOptimization';\r\nimport { getRateLimitStats, cleanupRateLimitData } from '../middleware/rateLimiting';\r\nimport { adminRateLimit } from '../middleware/rateLimiting';\r\nimport { strictSanitization } from '../middleware/sanitization';\r\n\r\nconst router = Router();\r\n\r\n// Apply admin-specific middleware\r\nrouter.use(adminRateLimit);\r\nrouter.use(authMiddleware);\r\nrouter.use(adminMiddleware);\r\nrouter.use(strictSanitization());\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/audit/logs:\r\n *   get:\r\n *     summary: Get audit logs with filtering\r\n *     tags: [Admin, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filter by user ID\r\n *       - in: query\r\n *         name: eventType\r\n *         schema:\r\n *           type: string\r\n *         description: Filter by event type\r\n *       - in: query\r\n *         name: riskLevel\r\n *         schema:\r\n *           type: string\r\n *           enum: [low, medium, high, critical]\r\n *         description: Filter by risk level\r\n *       - in: query\r\n *         name: startDate\r\n *         schema:\r\n *           type: string\r\n *           format: date-time\r\n *         description: Start date for filtering\r\n *       - in: query\r\n *         name: endDate\r\n *         schema:\r\n *           type: string\r\n *           format: date-time\r\n *         description: End date for filtering\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           default: 1\r\n *         description: Page number\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           default: 20\r\n *         description: Items per page\r\n *     responses:\r\n *       200:\r\n *         description: Audit logs retrieved successfully\r\n *       401:\r\n *         $ref: '#/components/responses/UnauthorizedError'\r\n *       403:\r\n *         $ref: '#/components/responses/ForbiddenError'\r\n */\r\nrouter.get('/audit/logs', async (req, res) => {\r\n  try {\r\n    const filters = {\r\n      userId: req.query.userId as string,\r\n      eventType: req.query.eventType as AuditEventType,\r\n      riskLevel: req.query.riskLevel as RiskLevel,\r\n      startDate: req.query.startDate ? new Date(req.query.startDate as string) : undefined,\r\n      endDate: req.query.endDate ? new Date(req.query.endDate as string) : undefined,\r\n      page: parseInt(req.query.page as string) || 1,\r\n      limit: parseInt(req.query.limit as string) || 20\r\n    };\r\n\r\n    const result = await auditService.getAuditLogs(filters);\r\n\r\n    // Log admin access to audit logs\r\n    await auditService.logEvent(AuditEventType.DATA_VIEWED, req, {\r\n      resource: 'audit_logs',\r\n      metadata: { filters }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: result\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve audit logs'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/audit/stats:\r\n *   get:\r\n *     summary: Get audit statistics\r\n *     tags: [Admin, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: timeframe\r\n *         schema:\r\n *           type: string\r\n *           enum: [hour, day, week, month]\r\n *           default: day\r\n *         description: Timeframe for statistics\r\n *     responses:\r\n *       200:\r\n *         description: Audit statistics retrieved successfully\r\n */\r\nrouter.get('/audit/stats', async (req, res) => {\r\n  try {\r\n    const timeframe = (req.query.timeframe as 'hour' | 'day' | 'week' | 'month') || 'day';\r\n    const stats = await auditService.getAuditStats(timeframe);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: stats\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve audit statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/performance/cache:\r\n *   get:\r\n *     summary: Get cache statistics\r\n *     tags: [Admin, Performance]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Cache statistics retrieved successfully\r\n */\r\nrouter.get('/performance/cache', async (req, res) => {\r\n  try {\r\n    const stats = await cacheService.getStats();\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        ...stats,\r\n        isConnected: cacheService.isConnected()\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve cache statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/performance/queries:\r\n *   get:\r\n *     summary: Get query performance statistics\r\n *     tags: [Admin, Performance]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Query statistics retrieved successfully\r\n */\r\nrouter.get('/performance/queries', async (req, res) => {\r\n  try {\r\n    const stats = queryOptimizer.getQueryStats();\r\n\r\n    res.json({\r\n      success: true,\r\n      data: stats\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve query statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/security/rate-limits:\r\n *   get:\r\n *     summary: Get rate limiting statistics\r\n *     tags: [Admin, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: timeframe\r\n *         schema:\r\n *           type: string\r\n *           enum: [hour, day, week]\r\n *           default: hour\r\n *         description: Timeframe for rate limit statistics\r\n *     responses:\r\n *       200:\r\n *         description: Rate limit statistics retrieved successfully\r\n */\r\nrouter.get('/security/rate-limits', async (req, res) => {\r\n  try {\r\n    const timeframe = (req.query.timeframe as 'hour' | 'day' | 'week') || 'hour';\r\n    const stats = await getRateLimitStats(timeframe);\r\n\r\n    res.json({\r\n      success: true,\r\n      data: stats\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve rate limit statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/security/sessions:\r\n *   get:\r\n *     summary: Get session statistics\r\n *     tags: [Admin, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Session statistics retrieved successfully\r\n */\r\nrouter.get('/security/sessions', async (req, res) => {\r\n  try {\r\n    const stats = await sessionService.getSessionStats();\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        ...stats,\r\n        isConnected: sessionService.isConnected()\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve session statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/security/tokens:\r\n *   get:\r\n *     summary: Get token statistics\r\n *     tags: [Admin, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Token statistics retrieved successfully\r\n */\r\nrouter.get('/security/tokens', async (req, res) => {\r\n  try {\r\n    const stats = await tokenService.getTokenStats();\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        ...stats,\r\n        isConnected: tokenService.isConnected()\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve token statistics'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/maintenance/cleanup:\r\n *   post:\r\n *     summary: Perform system cleanup\r\n *     tags: [Admin, Maintenance]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               cleanupType:\r\n *                 type: string\r\n *                 enum: [rate-limits, expired-tokens, expired-sessions, query-metrics]\r\n *                 description: Type of cleanup to perform\r\n *             required:\r\n *               - cleanupType\r\n *     responses:\r\n *       200:\r\n *         description: Cleanup completed successfully\r\n */\r\nrouter.post('/maintenance/cleanup', async (req, res) => {\r\n  try {\r\n    const { cleanupType } = req.body;\r\n    let result;\r\n\r\n    switch (cleanupType) {\r\n      case 'rate-limits':\r\n        await cleanupRateLimitData();\r\n        result = 'Rate limit data cleaned up';\r\n        break;\r\n      case 'expired-tokens':\r\n        const tokenCount = await tokenService.cleanupExpiredTokens();\r\n        result = `${tokenCount} expired tokens cleaned up`;\r\n        break;\r\n      case 'expired-sessions':\r\n        const sessionCount = await sessionService.cleanupExpiredSessions();\r\n        result = `${sessionCount} expired sessions cleaned up`;\r\n        break;\r\n      case 'query-metrics':\r\n        queryOptimizer.clearMetrics();\r\n        result = 'Query metrics cleared';\r\n        break;\r\n      default:\r\n        return res.status(400).json({\r\n          success: false,\r\n          error: 'Invalid cleanup type'\r\n        });\r\n    }\r\n\r\n    // Log maintenance action\r\n    await auditService.logEvent(AuditEventType.MAINTENANCE_MODE, req, {\r\n      metadata: { cleanupType, result }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: result\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to perform cleanup'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/admin/system/health:\r\n *   get:\r\n *     summary: Get detailed system health status\r\n *     tags: [Admin, System]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: System health status retrieved successfully\r\n */\r\nrouter.get('/system/health', async (req, res) => {\r\n  try {\r\n    const health = {\r\n      timestamp: new Date().toISOString(),\r\n      services: {\r\n        cache: {\r\n          connected: cacheService.isConnected(),\r\n          stats: await cacheService.getStats()\r\n        },\r\n        sessions: {\r\n          connected: sessionService.isConnected(),\r\n          stats: await sessionService.getSessionStats()\r\n        },\r\n        tokens: {\r\n          connected: tokenService.isConnected(),\r\n          stats: await tokenService.getTokenStats()\r\n        },\r\n        rateLimiting: {\r\n          stats: await getRateLimitStats('hour')\r\n        },\r\n        queries: {\r\n          stats: queryOptimizer.getQueryStats()\r\n        }\r\n      }\r\n    };\r\n\r\n    res.json({\r\n      success: true,\r\n      data: health\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve system health'\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ccbfe9d801e3d5f4bc1ee9b04615f12de3e0a027"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1io6lkpmz1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1io6lkpmz1();
cov_1io6lkpmz1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[1]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[2]++, require("../middleware/auth"));
const adminMiddleware_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[3]++, require("../middleware/adminMiddleware"));
const auditService_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[4]++, require("../services/auditService"));
const cacheService_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[5]++, require("../services/cacheService"));
const sessionService_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[6]++, require("../services/sessionService"));
const tokenService_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[7]++, require("../services/tokenService"));
const queryOptimization_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[8]++, require("../utils/queryOptimization"));
const rateLimiting_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[9]++, require("../middleware/rateLimiting"));
const rateLimiting_2 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[10]++, require("../middleware/rateLimiting"));
const sanitization_1 =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[11]++, require("../middleware/sanitization"));
const router =
/* istanbul ignore next */
(cov_1io6lkpmz1().s[12]++, (0, express_1.Router)());
// Apply admin-specific middleware
/* istanbul ignore next */
cov_1io6lkpmz1().s[13]++;
router.use(rateLimiting_2.adminRateLimit);
/* istanbul ignore next */
cov_1io6lkpmz1().s[14]++;
router.use(auth_1.authenticate);
/* istanbul ignore next */
cov_1io6lkpmz1().s[15]++;
router.use(adminMiddleware_1.adminMiddleware);
/* istanbul ignore next */
cov_1io6lkpmz1().s[16]++;
router.use((0, sanitization_1.strictSanitization)());
/**
 * @swagger
 * /api/admin/audit/logs:
 *   get:
 *     summary: Get audit logs with filtering
 *     tags: [Admin, Security]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         description: Filter by user ID
 *       - in: query
 *         name: eventType
 *         schema:
 *           type: string
 *         description: Filter by event type
 *       - in: query
 *         name: riskLevel
 *         schema:
 *           type: string
 *           enum: [low, medium, high, critical]
 *         description: Filter by risk level
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date-time
 *         description: Start date for filtering
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date-time
 *         description: End date for filtering
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Items per page
 *     responses:
 *       200:
 *         description: Audit logs retrieved successfully
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       403:
 *         $ref: '#/components/responses/ForbiddenError'
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[17]++;
router.get('/audit/logs', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[0]++;
  cov_1io6lkpmz1().s[18]++;
  try {
    const filters =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[19]++, {
      userId: req.query.userId,
      eventType: req.query.eventType,
      riskLevel: req.query.riskLevel,
      startDate: req.query.startDate ?
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[0][0]++, new Date(req.query.startDate)) :
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[0][1]++, undefined),
      endDate: req.query.endDate ?
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[1][0]++, new Date(req.query.endDate)) :
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[1][1]++, undefined),
      page:
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[2][0]++, parseInt(req.query.page)) ||
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[2][1]++, 1),
      limit:
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[3][0]++, parseInt(req.query.limit)) ||
      /* istanbul ignore next */
      (cov_1io6lkpmz1().b[3][1]++, 20)
    });
    const result =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[20]++, await auditService_1.auditService.getAuditLogs(filters));
    // Log admin access to audit logs
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[21]++;
    await auditService_1.auditService.logEvent(auditService_1.AuditEventType.DATA_VIEWED, req, {
      resource: 'audit_logs',
      metadata: {
        filters
      }
    });
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[22]++;
    res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[23]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve audit logs'
    });
  }
});
/**
 * @swagger
 * /api/admin/audit/stats:
 *   get:
 *     summary: Get audit statistics
 *     tags: [Admin, Security]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: timeframe
 *         schema:
 *           type: string
 *           enum: [hour, day, week, month]
 *           default: day
 *         description: Timeframe for statistics
 *     responses:
 *       200:
 *         description: Audit statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[24]++;
router.get('/audit/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[1]++;
  cov_1io6lkpmz1().s[25]++;
  try {
    const timeframe =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[26]++,
    /* istanbul ignore next */
    (cov_1io6lkpmz1().b[4][0]++, req.query.timeframe) ||
    /* istanbul ignore next */
    (cov_1io6lkpmz1().b[4][1]++, 'day'));
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[27]++, await auditService_1.auditService.getAuditStats(timeframe));
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[28]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[29]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve audit statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/performance/cache:
 *   get:
 *     summary: Get cache statistics
 *     tags: [Admin, Performance]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Cache statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[30]++;
router.get('/performance/cache', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[2]++;
  cov_1io6lkpmz1().s[31]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[32]++, await cacheService_1.cacheService.getStats());
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[33]++;
    res.json({
      success: true,
      data: {
        ...stats,
        isConnected: cacheService_1.cacheService.isConnected()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[34]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve cache statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/performance/queries:
 *   get:
 *     summary: Get query performance statistics
 *     tags: [Admin, Performance]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Query statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[35]++;
router.get('/performance/queries', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[3]++;
  cov_1io6lkpmz1().s[36]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[37]++, queryOptimization_1.queryOptimizer.getQueryStats());
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[38]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[39]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve query statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/security/rate-limits:
 *   get:
 *     summary: Get rate limiting statistics
 *     tags: [Admin, Security]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: timeframe
 *         schema:
 *           type: string
 *           enum: [hour, day, week]
 *           default: hour
 *         description: Timeframe for rate limit statistics
 *     responses:
 *       200:
 *         description: Rate limit statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[40]++;
router.get('/security/rate-limits', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[4]++;
  cov_1io6lkpmz1().s[41]++;
  try {
    const timeframe =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[42]++,
    /* istanbul ignore next */
    (cov_1io6lkpmz1().b[5][0]++, req.query.timeframe) ||
    /* istanbul ignore next */
    (cov_1io6lkpmz1().b[5][1]++, 'hour'));
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[43]++, await (0, rateLimiting_1.getRateLimitStats)(timeframe));
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[44]++;
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[45]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve rate limit statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/security/sessions:
 *   get:
 *     summary: Get session statistics
 *     tags: [Admin, Security]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Session statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[46]++;
router.get('/security/sessions', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[5]++;
  cov_1io6lkpmz1().s[47]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[48]++, await sessionService_1.sessionService.getSessionStats());
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[49]++;
    res.json({
      success: true,
      data: {
        ...stats,
        isConnected: sessionService_1.sessionService.isConnected()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[50]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve session statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/security/tokens:
 *   get:
 *     summary: Get token statistics
 *     tags: [Admin, Security]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Token statistics retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[51]++;
router.get('/security/tokens', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[6]++;
  cov_1io6lkpmz1().s[52]++;
  try {
    const stats =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[53]++, await tokenService_1.tokenService.getTokenStats());
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[54]++;
    res.json({
      success: true,
      data: {
        ...stats,
        isConnected: tokenService_1.tokenService.isConnected()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[55]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve token statistics'
    });
  }
});
/**
 * @swagger
 * /api/admin/maintenance/cleanup:
 *   post:
 *     summary: Perform system cleanup
 *     tags: [Admin, Maintenance]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               cleanupType:
 *                 type: string
 *                 enum: [rate-limits, expired-tokens, expired-sessions, query-metrics]
 *                 description: Type of cleanup to perform
 *             required:
 *               - cleanupType
 *     responses:
 *       200:
 *         description: Cleanup completed successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[56]++;
router.post('/maintenance/cleanup', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[7]++;
  cov_1io6lkpmz1().s[57]++;
  try {
    const {
      cleanupType
    } =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[58]++, req.body);
    let result;
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[59]++;
    switch (cleanupType) {
      case 'rate-limits':
        /* istanbul ignore next */
        cov_1io6lkpmz1().b[6][0]++;
        cov_1io6lkpmz1().s[60]++;
        await (0, rateLimiting_1.cleanupRateLimitData)();
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[61]++;
        result = 'Rate limit data cleaned up';
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[62]++;
        break;
      case 'expired-tokens':
        /* istanbul ignore next */
        cov_1io6lkpmz1().b[6][1]++;
        const tokenCount =
        /* istanbul ignore next */
        (cov_1io6lkpmz1().s[63]++, await tokenService_1.tokenService.cleanupExpiredTokens());
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[64]++;
        result = `${tokenCount} expired tokens cleaned up`;
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[65]++;
        break;
      case 'expired-sessions':
        /* istanbul ignore next */
        cov_1io6lkpmz1().b[6][2]++;
        const sessionCount =
        /* istanbul ignore next */
        (cov_1io6lkpmz1().s[66]++, await sessionService_1.sessionService.cleanupExpiredSessions());
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[67]++;
        result = `${sessionCount} expired sessions cleaned up`;
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[68]++;
        break;
      case 'query-metrics':
        /* istanbul ignore next */
        cov_1io6lkpmz1().b[6][3]++;
        cov_1io6lkpmz1().s[69]++;
        queryOptimization_1.queryOptimizer.clearMetrics();
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[70]++;
        result = 'Query metrics cleared';
        /* istanbul ignore next */
        cov_1io6lkpmz1().s[71]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1io6lkpmz1().b[6][4]++;
        cov_1io6lkpmz1().s[72]++;
        return res.status(400).json({
          success: false,
          error: 'Invalid cleanup type'
        });
    }
    // Log maintenance action
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[73]++;
    await auditService_1.auditService.logEvent(auditService_1.AuditEventType.MAINTENANCE_MODE, req, {
      metadata: {
        cleanupType,
        result
      }
    });
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[74]++;
    res.json({
      success: true,
      message: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[75]++;
    res.status(500).json({
      success: false,
      error: 'Failed to perform cleanup'
    });
  }
});
/**
 * @swagger
 * /api/admin/system/health:
 *   get:
 *     summary: Get detailed system health status
 *     tags: [Admin, System]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: System health status retrieved successfully
 */
/* istanbul ignore next */
cov_1io6lkpmz1().s[76]++;
router.get('/system/health', async (req, res) => {
  /* istanbul ignore next */
  cov_1io6lkpmz1().f[8]++;
  cov_1io6lkpmz1().s[77]++;
  try {
    const health =
    /* istanbul ignore next */
    (cov_1io6lkpmz1().s[78]++, {
      timestamp: new Date().toISOString(),
      services: {
        cache: {
          connected: cacheService_1.cacheService.isConnected(),
          stats: await cacheService_1.cacheService.getStats()
        },
        sessions: {
          connected: sessionService_1.sessionService.isConnected(),
          stats: await sessionService_1.sessionService.getSessionStats()
        },
        tokens: {
          connected: tokenService_1.tokenService.isConnected(),
          stats: await tokenService_1.tokenService.getTokenStats()
        },
        rateLimiting: {
          stats: await (0, rateLimiting_1.getRateLimitStats)('hour')
        },
        queries: {
          stats: queryOptimization_1.queryOptimizer.getQueryStats()
        }
      }
    });
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[79]++;
    res.json({
      success: true,
      data: health
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1io6lkpmz1().s[80]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve system health'
    });
  }
});
/* istanbul ignore next */
cov_1io6lkpmz1().s[81]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,