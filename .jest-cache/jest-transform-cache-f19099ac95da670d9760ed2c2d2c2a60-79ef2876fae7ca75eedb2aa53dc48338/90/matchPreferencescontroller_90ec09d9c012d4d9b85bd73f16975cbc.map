{"version":3,"names":["cov_1o0qzg8o74","actualCoverage","s","Match_1","require","logger_1","appError_1","catchAsync_1","exports","getMatchPreferences","catchAsync","req","res","f","userId","user","_id","b","AppError","preferences","MatchPreferences","findOne","isActive","maxDistance","ageRange","min","max","genderPreference","budgetRange","budgetFlexibility","preferredStates","preferredCities","preferredAreas","locationFlexibility","lifestyle","smoking","drinking","pets","parties","guests","cleanliness","noise_level","schedule","work_schedule","sleep_schedule","social_level","propertyPreferences","propertyTypes","amenities","minimumBedrooms","minimumBathrooms","furnished","parking","security","roommatePreferences","occupation","education_level","relationship_status","has_children","religion","languages","dealBreakers","matchingSettings","auto_like_high_compatibility","compatibility_threshold","daily_match_limit","show_distance","show_last_active","save","json","success","data","error","logger","updateMatchPreferences","updates","body","lastActiveAt","Date","findOneAndUpdate","$set","new","upsert","runValidators","info","updatedFields","Object","keys","message","toggleMatchPreferences","updatePreferenceSection","section","params","validSections","includes","join","updateQuery","updatedSection","addDealBreaker","dealBreaker","$addToSet","trim","removeDealBreaker","$pull","getPreferencesSummary","sections","basic","values","some","val","property","length","roommate","completedSections","filter","Boolean","totalSections","completeness","Math","round","summary","settings","compatibilityThreshold","dailyMatchLimit","autoLikeHighCompatibility","counts"],"sources":["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\controllers\\matchPreferences.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { MatchPreferences } from '../models/Match';\r\nimport { logger } from '../utils/logger';\r\nimport { AppError } from '../utils/appError';\r\nimport { catchAsync } from '../utils/catchAsync';\r\n\r\n/**\r\n * Get user's match preferences\r\n */\r\nexport const getMatchPreferences = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    let preferences = await MatchPreferences.findOne({ userId });\r\n\r\n    // Create default preferences if none exist\r\n    if (!preferences) {\r\n      preferences = new MatchPreferences({\r\n        userId,\r\n        isActive: true,\r\n        maxDistance: 50,\r\n        ageRange: { min: 18, max: 65 },\r\n        genderPreference: 'any',\r\n        budgetRange: { min: 0, max: 1000000 },\r\n        budgetFlexibility: 20,\r\n        preferredStates: [],\r\n        preferredCities: [],\r\n        preferredAreas: [],\r\n        locationFlexibility: 50,\r\n        lifestyle: {\r\n          smoking: 'no_preference',\r\n          drinking: 'no_preference',\r\n          pets: 'no_preference',\r\n          parties: 'no_preference',\r\n          guests: 'no_preference',\r\n          cleanliness: 'no_preference',\r\n          noise_level: 'no_preference'\r\n        },\r\n        schedule: {\r\n          work_schedule: 'no_preference',\r\n          sleep_schedule: 'no_preference',\r\n          social_level: 'no_preference'\r\n        },\r\n        propertyPreferences: {\r\n          propertyTypes: [],\r\n          amenities: [],\r\n          minimumBedrooms: 1,\r\n          minimumBathrooms: 1,\r\n          furnished: 'no_preference',\r\n          parking: 'preferred',\r\n          security: 'preferred'\r\n        },\r\n        roommatePreferences: {\r\n          occupation: [],\r\n          education_level: [],\r\n          relationship_status: [],\r\n          has_children: 'no_preference',\r\n          religion: [],\r\n          languages: []\r\n        },\r\n        dealBreakers: [],\r\n        matchingSettings: {\r\n          auto_like_high_compatibility: false,\r\n          compatibility_threshold: 60,\r\n          daily_match_limit: 20,\r\n          show_distance: true,\r\n          show_last_active: true\r\n        }\r\n      });\r\n\r\n      await preferences.save();\r\n    }\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { preferences }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error getting match preferences:', error);\r\n    throw new AppError('Failed to get match preferences', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Update user's match preferences\r\n */\r\nexport const updateMatchPreferences = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const updates = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    // Update last active timestamp\r\n    updates.lastActiveAt = new Date();\r\n\r\n    const preferences = await MatchPreferences.findOneAndUpdate(\r\n      { userId },\r\n      { $set: updates },\r\n      { \r\n        new: true, \r\n        upsert: true,\r\n        runValidators: true\r\n      }\r\n    );\r\n\r\n    logger.info(`Updated match preferences for user ${userId}`, {\r\n      userId,\r\n      updatedFields: Object.keys(updates)\r\n    });\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { preferences },\r\n      message: 'Match preferences updated successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error updating match preferences:', error);\r\n    throw new AppError('Failed to update match preferences', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Toggle match preferences active status\r\n */\r\nexport const toggleMatchPreferences = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { isActive } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  if (typeof isActive !== 'boolean') {\r\n    throw new AppError('isActive must be a boolean value', 400);\r\n  }\r\n\r\n  try {\r\n    const preferences = await MatchPreferences.findOneAndUpdate(\r\n      { userId },\r\n      { \r\n        isActive,\r\n        lastActiveAt: new Date()\r\n      },\r\n      { \r\n        new: true,\r\n        upsert: true\r\n      }\r\n    );\r\n\r\n    logger.info(`${isActive ? 'Activated' : 'Deactivated'} matching for user ${userId}`);\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { \r\n        isActive: preferences.isActive,\r\n        lastActiveAt: preferences.lastActiveAt\r\n      },\r\n      message: `Matching ${isActive ? 'activated' : 'deactivated'} successfully`\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error toggling match preferences:', error);\r\n    throw new AppError('Failed to toggle match preferences', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Update specific preference section\r\n */\r\nexport const updatePreferenceSection = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { section } = req.params;\r\n  const updates = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  const validSections = [\r\n    'lifestyle', \r\n    'schedule', \r\n    'propertyPreferences', \r\n    'roommatePreferences', \r\n    'matchingSettings'\r\n  ];\r\n\r\n  if (!validSections.includes(section)) {\r\n    throw new AppError(`Invalid section. Must be one of: ${validSections.join(', ')}`, 400);\r\n  }\r\n\r\n  try {\r\n    const updateQuery: any = {\r\n      lastActiveAt: new Date()\r\n    };\r\n    updateQuery[section] = updates;\r\n\r\n    const preferences = await MatchPreferences.findOneAndUpdate(\r\n      { userId },\r\n      { $set: updateQuery },\r\n      { \r\n        new: true,\r\n        upsert: true,\r\n        runValidators: true\r\n      }\r\n    );\r\n\r\n    logger.info(`Updated ${section} preferences for user ${userId}`, {\r\n      userId,\r\n      section,\r\n      updates\r\n    });\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { \r\n        preferences,\r\n        updatedSection: section\r\n      },\r\n      message: `${section} preferences updated successfully`\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error(`Error updating ${section} preferences:`, error);\r\n    throw new AppError(`Failed to update ${section} preferences`, 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Add deal breaker\r\n */\r\nexport const addDealBreaker = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { dealBreaker } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  if (!dealBreaker || typeof dealBreaker !== 'string') {\r\n    throw new AppError('Deal breaker must be a non-empty string', 400);\r\n  }\r\n\r\n  try {\r\n    const preferences = await MatchPreferences.findOneAndUpdate(\r\n      { userId },\r\n      { \r\n        $addToSet: { dealBreakers: dealBreaker.trim() },\r\n        lastActiveAt: new Date()\r\n      },\r\n      { \r\n        new: true,\r\n        upsert: true\r\n      }\r\n    );\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { \r\n        dealBreakers: preferences.dealBreakers\r\n      },\r\n      message: 'Deal breaker added successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error adding deal breaker:', error);\r\n    throw new AppError('Failed to add deal breaker', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Remove deal breaker\r\n */\r\nexport const removeDealBreaker = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n  const { dealBreaker } = req.body;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  if (!dealBreaker || typeof dealBreaker !== 'string') {\r\n    throw new AppError('Deal breaker must be a non-empty string', 400);\r\n  }\r\n\r\n  try {\r\n    const preferences = await MatchPreferences.findOneAndUpdate(\r\n      { userId },\r\n      { \r\n        $pull: { dealBreakers: dealBreaker.trim() },\r\n        lastActiveAt: new Date()\r\n      },\r\n      { new: true }\r\n    );\r\n\r\n    if (!preferences) {\r\n      throw new AppError('Match preferences not found', 404);\r\n    }\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { \r\n        dealBreakers: preferences.dealBreakers\r\n      },\r\n      message: 'Deal breaker removed successfully'\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error removing deal breaker:', error);\r\n    throw new AppError('Failed to remove deal breaker', 500);\r\n  }\r\n});\r\n\r\n/**\r\n * Get match preferences summary/stats\r\n */\r\nexport const getPreferencesSummary = catchAsync(async (req: Request, res: Response) => {\r\n  const userId = req.user?._id;\r\n\r\n  if (!userId) {\r\n    throw new AppError('User not authenticated', 401);\r\n  }\r\n\r\n  try {\r\n    const preferences = await MatchPreferences.findOne({ userId });\r\n\r\n    if (!preferences) {\r\n      throw new AppError('Match preferences not found', 404);\r\n    }\r\n\r\n    // Calculate preference completeness\r\n    const sections = {\r\n      basic: !!(preferences.maxDistance && preferences.ageRange && preferences.budgetRange),\r\n      lifestyle: Object.values(preferences.lifestyle).some(val => val !== 'no_preference'),\r\n      schedule: Object.values(preferences.schedule).some(val => val !== 'no_preference'),\r\n      property: preferences.propertyPreferences.propertyTypes.length > 0 || \r\n                preferences.propertyPreferences.amenities.length > 0,\r\n      roommate: preferences.roommatePreferences.occupation.length > 0 ||\r\n                preferences.roommatePreferences.education_level.length > 0 ||\r\n                preferences.roommatePreferences.religion.length > 0\r\n    };\r\n\r\n    const completedSections = Object.values(sections).filter(Boolean).length;\r\n    const totalSections = Object.keys(sections).length;\r\n    const completeness = Math.round((completedSections / totalSections) * 100);\r\n\r\n    const summary = {\r\n      isActive: preferences.isActive,\r\n      completeness,\r\n      completedSections,\r\n      totalSections,\r\n      sections,\r\n      lastActiveAt: preferences.lastActiveAt,\r\n      settings: {\r\n        maxDistance: preferences.maxDistance,\r\n        compatibilityThreshold: preferences.matchingSettings.compatibility_threshold,\r\n        dailyMatchLimit: preferences.matchingSettings.daily_match_limit,\r\n        autoLikeHighCompatibility: preferences.matchingSettings.auto_like_high_compatibility\r\n      },\r\n      counts: {\r\n        preferredStates: preferences.preferredStates.length,\r\n        preferredCities: preferences.preferredCities.length,\r\n        propertyTypes: preferences.propertyPreferences.propertyTypes.length,\r\n        amenities: preferences.propertyPreferences.amenities.length,\r\n        dealBreakers: preferences.dealBreakers.length\r\n      }\r\n    };\r\n\r\n    return res.json({\r\n      success: true,\r\n      data: { summary }\r\n    });\r\n\r\n  } catch (error) {\r\n    logger.error('Error getting preferences summary:', error);\r\n    throw new AppError('Failed to get preferences summary', 500);\r\n  }\r\n});\r\n"],"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","ignoreList":[]}