a8fb2939176ea03e44291541c1a1156a
"use strict";

/* istanbul ignore next */
function cov_2o7l4pzoiz() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\session.routes.ts";
  var hash = "0a1e55e5e7a321e07ba7e28d7fb14224dc9d34ea";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\session.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "4": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "6": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "7": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 50
        }
      },
      "11": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 87,
          column: 3
        }
      },
      "12": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 86,
          column: 5
        }
      },
      "13": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "14": {
        start: {
          line: 69,
          column: 31
        },
        end: {
          line: 69,
          column: 98
        }
      },
      "15": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "16": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "17": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "18": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 150,
          column: 3
        }
      },
      "19": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "20": {
        start: {
          line: 121,
          column: 23
        },
        end: {
          line: 121,
          column: 35
        }
      },
      "21": {
        start: {
          line: 122,
          column: 33
        },
        end: {
          line: 122,
          column: 48
        }
      },
      "22": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "23": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "24": {
        start: {
          line: 129,
          column: 32
        },
        end: {
          line: 129,
          column: 118
        }
      },
      "25": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 11
        }
      },
      "26": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 142,
          column: 11
        }
      },
      "27": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "28": {
        start: {
          line: 176,
          column: 0
        },
        end: {
          line: 224,
          column: 3
        }
      },
      "29": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 223,
          column: 5
        }
      },
      "30": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 35
        }
      },
      "31": {
        start: {
          line: 179,
          column: 37
        },
        end: {
          line: 179,
          column: 57
        }
      },
      "32": {
        start: {
          line: 180,
          column: 33
        },
        end: {
          line: 180,
          column: 48
        }
      },
      "33": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "34": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "35": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 189,
          column: 96
        }
      },
      "36": {
        start: {
          line: 190,
          column: 30
        },
        end: {
          line: 190,
          column: 102
        }
      },
      "37": {
        start: {
          line: 190,
          column: 59
        },
        end: {
          line: 190,
          column: 101
        }
      },
      "38": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "39": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "40": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 102
        }
      },
      "41": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "42": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 205,
          column: 15
        }
      },
      "43": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 209,
          column: 15
        }
      },
      "44": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "45": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "46": {
        start: {
          line: 239,
          column: 0
        },
        end: {
          line: 277,
          column: 3
        }
      },
      "47": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "48": {
        start: {
          line: 241,
          column: 26
        },
        end: {
          line: 241,
          column: 41
        }
      },
      "49": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "50": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "51": {
        start: {
          line: 248,
          column: 28
        },
        end: {
          line: 248,
          column: 91
        }
      },
      "52": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "53": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 253,
          column: 15
        }
      },
      "54": {
        start: {
          line: 256,
          column: 32
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "55": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "56": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "57": {
        start: {
          line: 312,
          column: 0
        },
        end: {
          line: 355,
          column: 3
        }
      },
      "58": {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 354,
          column: 5
        }
      },
      "59": {
        start: {
          line: 314,
          column: 23
        },
        end: {
          line: 314,
          column: 35
        }
      },
      "60": {
        start: {
          line: 315,
          column: 31
        },
        end: {
          line: 315,
          column: 98
        }
      },
      "61": {
        start: {
          line: 316,
          column: 26
        },
        end: {
          line: 316,
          column: 88
        }
      },
      "62": {
        start: {
          line: 316,
          column: 64
        },
        end: {
          line: 316,
          column: 81
        }
      },
      "63": {
        start: {
          line: 317,
          column: 36
        },
        end: {
          line: 317,
          column: 61
        }
      },
      "64": {
        start: {
          line: 318,
          column: 35
        },
        end: {
          line: 318,
          column: 77
        }
      },
      "65": {
        start: {
          line: 319,
          column: 32
        },
        end: {
          line: 319,
          column: 34
        }
      },
      "66": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "67": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 93
        }
      },
      "68": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "69": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 324,
          column: 99
        }
      },
      "70": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "71": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 93
        }
      },
      "72": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "73": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 347,
          column: 11
        }
      },
      "74": {
        start: {
          line: 350,
          column: 8
        },
        end: {
          line: 353,
          column: 11
        }
      },
      "75": {
        start: {
          line: 356,
          column: 0
        },
        end: {
          line: 356,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 66,
            column: 22
          },
          end: {
            line: 66,
            column: 23
          }
        },
        loc: {
          start: {
            line: 66,
            column: 42
          },
          end: {
            line: 87,
            column: 1
          }
        },
        line: 66
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 119,
            column: 34
          }
        },
        loc: {
          start: {
            line: 119,
            column: 53
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 119
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 176,
            column: 39
          },
          end: {
            line: 176,
            column: 40
          }
        },
        loc: {
          start: {
            line: 176,
            column: 59
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 176
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 190,
            column: 48
          },
          end: {
            line: 190,
            column: 49
          }
        },
        loc: {
          start: {
            line: 190,
            column: 59
          },
          end: {
            line: 190,
            column: 101
          }
        },
        line: 190
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 239,
            column: 23
          },
          end: {
            line: 239,
            column: 24
          }
        },
        loc: {
          start: {
            line: 239,
            column: 43
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 239
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 312,
            column: 30
          },
          end: {
            line: 312,
            column: 31
          }
        },
        loc: {
          start: {
            line: 312,
            column: 50
          },
          end: {
            line: 355,
            column: 1
          }
        },
        line: 312
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 316,
            column: 53
          },
          end: {
            line: 316,
            column: 54
          }
        },
        loc: {
          start: {
            line: 316,
            column: 64
          },
          end: {
            line: 316,
            column: 81
          }
        },
        line: 316
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 128,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "1": {
        loc: {
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "2": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "3": {
        loc: {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 211,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 198
      },
      "4": {
        loc: {
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 8
          },
          end: {
            line: 247,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "5": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "6": {
        loc: {
          start: {
            line: 318,
            column: 35
          },
          end: {
            line: 318,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 35
          },
          end: {
            line: 318,
            column: 48
          }
        }, {
          start: {
            line: 318,
            column: 52
          },
          end: {
            line: 318,
            column: 77
          }
        }],
        line: 318
      },
      "7": {
        loc: {
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 8
          },
          end: {
            line: 322,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "8": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "9": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 328,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\session.routes.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\session.routes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport { authenticate as authMiddleware } from '../middleware/auth';\r\nimport { sessionService } from '../services/sessionService';\r\nimport { auditService, AuditEventType } from '../services/auditService';\r\nimport { generalRateLimit } from '../middleware/rateLimiting';\r\nimport { sanitizeRequest } from '../middleware/sanitization';\r\n\r\nconst router = Router();\r\n\r\n// Apply middleware\r\nrouter.use(generalRateLimit);\r\nrouter.use(authMiddleware);\r\nrouter.use(sanitizeRequest());\r\n\r\n/**\r\n * @swagger\r\n * /api/sessions/active:\r\n *   get:\r\n *     summary: Get user's active sessions\r\n *     tags: [Sessions]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Active sessions retrieved successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     type: object\r\n *                     properties:\r\n *                       sessionId:\r\n *                         type: string\r\n *                       createdAt:\r\n *                         type: string\r\n *                         format: date-time\r\n *                       lastActivity:\r\n *                         type: string\r\n *                         format: date-time\r\n *                       ipAddress:\r\n *                         type: string\r\n *                       userAgent:\r\n *                         type: string\r\n *                       deviceInfo:\r\n *                         type: object\r\n *                         properties:\r\n *                           browser:\r\n *                             type: string\r\n *                           os:\r\n *                             type: string\r\n *                           device:\r\n *                             type: string\r\n *                           isMobile:\r\n *                             type: boolean\r\n *                       isActive:\r\n *                         type: boolean\r\n *       401:\r\n *         $ref: '#/components/responses/UnauthorizedError'\r\n */\r\nrouter.get('/active', async (req, res) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const activeSessions = await sessionService.getUserActiveSessions(userId);\r\n\r\n    // Log session access\r\n    await auditService.logEvent(AuditEventType.DATA_VIEWED, req, {\r\n      resource: 'user_sessions',\r\n      resourceId: userId,\r\n      metadata: { sessionCount: activeSessions.length }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: activeSessions\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve active sessions'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/sessions/terminate-others:\r\n *   post:\r\n *     summary: Terminate all other sessions except current\r\n *     tags: [Sessions]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Other sessions terminated successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                   example: true\r\n *                 message:\r\n *                   type: string\r\n *                   example: \"3 sessions terminated successfully\"\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     terminatedCount:\r\n *                       type: number\r\n *                       example: 3\r\n *       401:\r\n *         $ref: '#/components/responses/UnauthorizedError'\r\n */\r\nrouter.post('/terminate-others', async (req, res) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const currentSessionId = req.session?.id;\r\n\r\n    if (!currentSessionId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'No active session found'\r\n      });\r\n    }\r\n\r\n    const terminatedCount = await sessionService.terminateOtherSessions(userId, currentSessionId);\r\n\r\n    // Log session termination\r\n    await auditService.logEvent(AuditEventType.LOGOUT, req, {\r\n      metadata: { \r\n        action: 'terminate_other_sessions',\r\n        terminatedCount,\r\n        currentSessionId \r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      message: `${terminatedCount} sessions terminated successfully`,\r\n      data: { terminatedCount }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to terminate other sessions'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/sessions/terminate/{sessionId}:\r\n *   delete:\r\n *     summary: Terminate a specific session\r\n *     tags: [Sessions]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: sessionId\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Session ID to terminate\r\n *     responses:\r\n *       200:\r\n *         description: Session terminated successfully\r\n *       400:\r\n *         description: Cannot terminate current session\r\n *       404:\r\n *         description: Session not found\r\n *       401:\r\n *         $ref: '#/components/responses/UnauthorizedError'\r\n */\r\nrouter.delete('/terminate/:sessionId', async (req, res) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const sessionIdToTerminate = req.params.sessionId;\r\n    const currentSessionId = req.session?.id;\r\n\r\n    // Prevent terminating current session\r\n    if (sessionIdToTerminate === currentSessionId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'Cannot terminate current session. Use logout instead.'\r\n      });\r\n    }\r\n\r\n    // Verify session belongs to user\r\n    const userSessions = await sessionService.getUserActiveSessions(userId);\r\n    const sessionExists = userSessions.some(session => session.sessionId === sessionIdToTerminate);\r\n\r\n    if (!sessionExists) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Session not found or does not belong to user'\r\n      });\r\n    }\r\n\r\n    const success = await sessionService.destroyUserSession(sessionIdToTerminate);\r\n\r\n    if (success) {\r\n      // Log session termination\r\n      await auditService.logEvent(AuditEventType.LOGOUT, req, {\r\n        metadata: { \r\n          action: 'terminate_specific_session',\r\n          terminatedSessionId: sessionIdToTerminate \r\n        }\r\n      });\r\n\r\n      res.json({\r\n        success: true,\r\n        message: 'Session terminated successfully'\r\n      });\r\n    } else {\r\n      res.status(500).json({\r\n        success: false,\r\n        error: 'Failed to terminate session'\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to terminate session'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/sessions/current:\r\n *   get:\r\n *     summary: Get current session information\r\n *     tags: [Sessions]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Current session information retrieved successfully\r\n *       401:\r\n *         $ref: '#/components/responses/UnauthorizedError'\r\n */\r\nrouter.get('/current', async (req, res) => {\r\n  try {\r\n    const sessionId = req.session?.id;\r\n\r\n    if (!sessionId) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        error: 'No active session found'\r\n      });\r\n    }\r\n\r\n    const sessionData = await sessionService.getUserSession(sessionId);\r\n\r\n    if (!sessionData) {\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Session not found'\r\n      });\r\n    }\r\n\r\n    // Remove sensitive data before sending\r\n    const safeSessionData = {\r\n      sessionId,\r\n      userId: sessionData.userId,\r\n      email: sessionData.email,\r\n      role: sessionData.role,\r\n      loginTime: sessionData.loginTime,\r\n      lastActivity: sessionData.lastActivity,\r\n      deviceInfo: sessionData.deviceInfo,\r\n      isActive: sessionData.isActive\r\n    };\r\n\r\n    res.json({\r\n      success: true,\r\n      data: safeSessionData\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to retrieve session information'\r\n    });\r\n  }\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/sessions/security-check:\r\n *   get:\r\n *     summary: Check for security issues with user sessions\r\n *     tags: [Sessions, Security]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Security check completed\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     hasMultipleSessions:\r\n *                       type: boolean\r\n *                     sessionCount:\r\n *                       type: number\r\n *                     uniqueIPs:\r\n *                       type: number\r\n *                     suspiciousActivity:\r\n *                       type: boolean\r\n *                     recommendations:\r\n *                       type: array\r\n *                       items:\r\n *                         type: string\r\n */\r\nrouter.get('/security-check', async (req, res) => {\r\n  try {\r\n    const userId = req.user._id;\r\n    const activeSessions = await sessionService.getUserActiveSessions(userId);\r\n    \r\n    const uniqueIPs = new Set(activeSessions.map(session => session.ipAddress)).size;\r\n    const hasMultipleSessions = activeSessions.length > 1;\r\n    const suspiciousActivity = uniqueIPs > 2 || activeSessions.length > 5;\r\n    \r\n    const recommendations = [];\r\n    if (hasMultipleSessions) {\r\n      recommendations.push('Consider terminating unused sessions for better security');\r\n    }\r\n    if (uniqueIPs > 2) {\r\n      recommendations.push('Multiple IP addresses detected - verify all sessions are yours');\r\n    }\r\n    if (activeSessions.length > 5) {\r\n      recommendations.push('Many active sessions detected - consider session cleanup');\r\n    }\r\n\r\n    // Log security check\r\n    await auditService.logEvent(AuditEventType.DATA_VIEWED, req, {\r\n      resource: 'session_security_check',\r\n      metadata: { \r\n        sessionCount: activeSessions.length,\r\n        uniqueIPs,\r\n        suspiciousActivity \r\n      }\r\n    });\r\n\r\n    res.json({\r\n      success: true,\r\n      data: {\r\n        hasMultipleSessions,\r\n        sessionCount: activeSessions.length,\r\n        uniqueIPs,\r\n        suspiciousActivity,\r\n        recommendations\r\n      }\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: 'Failed to perform security check'\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0a1e55e5e7a321e07ba7e28d7fb14224dc9d34ea"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2o7l4pzoiz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2o7l4pzoiz();
cov_2o7l4pzoiz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[1]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[2]++, require("../middleware/auth"));
const sessionService_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[3]++, require("../services/sessionService"));
const auditService_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[4]++, require("../services/auditService"));
const rateLimiting_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[5]++, require("../middleware/rateLimiting"));
const sanitization_1 =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[6]++, require("../middleware/sanitization"));
const router =
/* istanbul ignore next */
(cov_2o7l4pzoiz().s[7]++, (0, express_1.Router)());
// Apply middleware
/* istanbul ignore next */
cov_2o7l4pzoiz().s[8]++;
router.use(rateLimiting_1.generalRateLimit);
/* istanbul ignore next */
cov_2o7l4pzoiz().s[9]++;
router.use(auth_1.authenticate);
/* istanbul ignore next */
cov_2o7l4pzoiz().s[10]++;
router.use((0, sanitization_1.sanitizeRequest)());
/**
 * @swagger
 * /api/sessions/active:
 *   get:
 *     summary: Get user's active sessions
 *     tags: [Sessions]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Active sessions retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       sessionId:
 *                         type: string
 *                       createdAt:
 *                         type: string
 *                         format: date-time
 *                       lastActivity:
 *                         type: string
 *                         format: date-time
 *                       ipAddress:
 *                         type: string
 *                       userAgent:
 *                         type: string
 *                       deviceInfo:
 *                         type: object
 *                         properties:
 *                           browser:
 *                             type: string
 *                           os:
 *                             type: string
 *                           device:
 *                             type: string
 *                           isMobile:
 *                             type: boolean
 *                       isActive:
 *                         type: boolean
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 */
/* istanbul ignore next */
cov_2o7l4pzoiz().s[11]++;
router.get('/active', async (req, res) => {
  /* istanbul ignore next */
  cov_2o7l4pzoiz().f[0]++;
  cov_2o7l4pzoiz().s[12]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[13]++, req.user._id);
    const activeSessions =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[14]++, await sessionService_1.sessionService.getUserActiveSessions(userId));
    // Log session access
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[15]++;
    await auditService_1.auditService.logEvent(auditService_1.AuditEventType.DATA_VIEWED, req, {
      resource: 'user_sessions',
      resourceId: userId,
      metadata: {
        sessionCount: activeSessions.length
      }
    });
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[16]++;
    res.json({
      success: true,
      data: activeSessions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[17]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve active sessions'
    });
  }
});
/**
 * @swagger
 * /api/sessions/terminate-others:
 *   post:
 *     summary: Terminate all other sessions except current
 *     tags: [Sessions]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Other sessions terminated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: "3 sessions terminated successfully"
 *                 data:
 *                   type: object
 *                   properties:
 *                     terminatedCount:
 *                       type: number
 *                       example: 3
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 */
/* istanbul ignore next */
cov_2o7l4pzoiz().s[18]++;
router.post('/terminate-others', async (req, res) => {
  /* istanbul ignore next */
  cov_2o7l4pzoiz().f[1]++;
  cov_2o7l4pzoiz().s[19]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[20]++, req.user._id);
    const currentSessionId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[21]++, req.session?.id);
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[22]++;
    if (!currentSessionId) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[0][0]++;
      cov_2o7l4pzoiz().s[23]++;
      return res.status(400).json({
        success: false,
        error: 'No active session found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[0][1]++;
    }
    const terminatedCount =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[24]++, await sessionService_1.sessionService.terminateOtherSessions(userId, currentSessionId));
    // Log session termination
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[25]++;
    await auditService_1.auditService.logEvent(auditService_1.AuditEventType.LOGOUT, req, {
      metadata: {
        action: 'terminate_other_sessions',
        terminatedCount,
        currentSessionId
      }
    });
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[26]++;
    res.json({
      success: true,
      message: `${terminatedCount} sessions terminated successfully`,
      data: {
        terminatedCount
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[27]++;
    res.status(500).json({
      success: false,
      error: 'Failed to terminate other sessions'
    });
  }
});
/**
 * @swagger
 * /api/sessions/terminate/{sessionId}:
 *   delete:
 *     summary: Terminate a specific session
 *     tags: [Sessions]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: sessionId
 *         required: true
 *         schema:
 *           type: string
 *         description: Session ID to terminate
 *     responses:
 *       200:
 *         description: Session terminated successfully
 *       400:
 *         description: Cannot terminate current session
 *       404:
 *         description: Session not found
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 */
/* istanbul ignore next */
cov_2o7l4pzoiz().s[28]++;
router.delete('/terminate/:sessionId', async (req, res) => {
  /* istanbul ignore next */
  cov_2o7l4pzoiz().f[2]++;
  cov_2o7l4pzoiz().s[29]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[30]++, req.user._id);
    const sessionIdToTerminate =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[31]++, req.params.sessionId);
    const currentSessionId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[32]++, req.session?.id);
    // Prevent terminating current session
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[33]++;
    if (sessionIdToTerminate === currentSessionId) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[1][0]++;
      cov_2o7l4pzoiz().s[34]++;
      return res.status(400).json({
        success: false,
        error: 'Cannot terminate current session. Use logout instead.'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[1][1]++;
    }
    // Verify session belongs to user
    const userSessions =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[35]++, await sessionService_1.sessionService.getUserActiveSessions(userId));
    const sessionExists =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[36]++, userSessions.some(session => {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().f[3]++;
      cov_2o7l4pzoiz().s[37]++;
      return session.sessionId === sessionIdToTerminate;
    }));
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[38]++;
    if (!sessionExists) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[2][0]++;
      cov_2o7l4pzoiz().s[39]++;
      return res.status(404).json({
        success: false,
        error: 'Session not found or does not belong to user'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[2][1]++;
    }
    const success =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[40]++, await sessionService_1.sessionService.destroyUserSession(sessionIdToTerminate));
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[41]++;
    if (success) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[3][0]++;
      cov_2o7l4pzoiz().s[42]++;
      // Log session termination
      await auditService_1.auditService.logEvent(auditService_1.AuditEventType.LOGOUT, req, {
        metadata: {
          action: 'terminate_specific_session',
          terminatedSessionId: sessionIdToTerminate
        }
      });
      /* istanbul ignore next */
      cov_2o7l4pzoiz().s[43]++;
      res.json({
        success: true,
        message: 'Session terminated successfully'
      });
    } else {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[3][1]++;
      cov_2o7l4pzoiz().s[44]++;
      res.status(500).json({
        success: false,
        error: 'Failed to terminate session'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[45]++;
    res.status(500).json({
      success: false,
      error: 'Failed to terminate session'
    });
  }
});
/**
 * @swagger
 * /api/sessions/current:
 *   get:
 *     summary: Get current session information
 *     tags: [Sessions]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Current session information retrieved successfully
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 */
/* istanbul ignore next */
cov_2o7l4pzoiz().s[46]++;
router.get('/current', async (req, res) => {
  /* istanbul ignore next */
  cov_2o7l4pzoiz().f[4]++;
  cov_2o7l4pzoiz().s[47]++;
  try {
    const sessionId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[48]++, req.session?.id);
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[49]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[4][0]++;
      cov_2o7l4pzoiz().s[50]++;
      return res.status(400).json({
        success: false,
        error: 'No active session found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[4][1]++;
    }
    const sessionData =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[51]++, await sessionService_1.sessionService.getUserSession(sessionId));
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[52]++;
    if (!sessionData) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[5][0]++;
      cov_2o7l4pzoiz().s[53]++;
      return res.status(404).json({
        success: false,
        error: 'Session not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[5][1]++;
    }
    // Remove sensitive data before sending
    const safeSessionData =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[54]++, {
      sessionId,
      userId: sessionData.userId,
      email: sessionData.email,
      role: sessionData.role,
      loginTime: sessionData.loginTime,
      lastActivity: sessionData.lastActivity,
      deviceInfo: sessionData.deviceInfo,
      isActive: sessionData.isActive
    });
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[55]++;
    res.json({
      success: true,
      data: safeSessionData
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[56]++;
    res.status(500).json({
      success: false,
      error: 'Failed to retrieve session information'
    });
  }
});
/**
 * @swagger
 * /api/sessions/security-check:
 *   get:
 *     summary: Check for security issues with user sessions
 *     tags: [Sessions, Security]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Security check completed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     hasMultipleSessions:
 *                       type: boolean
 *                     sessionCount:
 *                       type: number
 *                     uniqueIPs:
 *                       type: number
 *                     suspiciousActivity:
 *                       type: boolean
 *                     recommendations:
 *                       type: array
 *                       items:
 *                         type: string
 */
/* istanbul ignore next */
cov_2o7l4pzoiz().s[57]++;
router.get('/security-check', async (req, res) => {
  /* istanbul ignore next */
  cov_2o7l4pzoiz().f[5]++;
  cov_2o7l4pzoiz().s[58]++;
  try {
    const userId =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[59]++, req.user._id);
    const activeSessions =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[60]++, await sessionService_1.sessionService.getUserActiveSessions(userId));
    const uniqueIPs =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[61]++, new Set(activeSessions.map(session => {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().f[6]++;
      cov_2o7l4pzoiz().s[62]++;
      return session.ipAddress;
    })).size);
    const hasMultipleSessions =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[63]++, activeSessions.length > 1);
    const suspiciousActivity =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[64]++,
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().b[6][0]++, uniqueIPs > 2) ||
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().b[6][1]++, activeSessions.length > 5));
    const recommendations =
    /* istanbul ignore next */
    (cov_2o7l4pzoiz().s[65]++, []);
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[66]++;
    if (hasMultipleSessions) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[7][0]++;
      cov_2o7l4pzoiz().s[67]++;
      recommendations.push('Consider terminating unused sessions for better security');
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[7][1]++;
    }
    cov_2o7l4pzoiz().s[68]++;
    if (uniqueIPs > 2) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[8][0]++;
      cov_2o7l4pzoiz().s[69]++;
      recommendations.push('Multiple IP addresses detected - verify all sessions are yours');
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[8][1]++;
    }
    cov_2o7l4pzoiz().s[70]++;
    if (activeSessions.length > 5) {
      /* istanbul ignore next */
      cov_2o7l4pzoiz().b[9][0]++;
      cov_2o7l4pzoiz().s[71]++;
      recommendations.push('Many active sessions detected - consider session cleanup');
    } else
    /* istanbul ignore next */
    {
      cov_2o7l4pzoiz().b[9][1]++;
    }
    // Log security check
    cov_2o7l4pzoiz().s[72]++;
    await auditService_1.auditService.logEvent(auditService_1.AuditEventType.DATA_VIEWED, req, {
      resource: 'session_security_check',
      metadata: {
        sessionCount: activeSessions.length,
        uniqueIPs,
        suspiciousActivity
      }
    });
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[73]++;
    res.json({
      success: true,
      data: {
        hasMultipleSessions,
        sessionCount: activeSessions.length,
        uniqueIPs,
        suspiciousActivity,
        recommendations
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2o7l4pzoiz().s[74]++;
    res.status(500).json({
      success: false,
      error: 'Failed to perform security check'
    });
  }
});
/* istanbul ignore next */
cov_2o7l4pzoiz().s[75]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,