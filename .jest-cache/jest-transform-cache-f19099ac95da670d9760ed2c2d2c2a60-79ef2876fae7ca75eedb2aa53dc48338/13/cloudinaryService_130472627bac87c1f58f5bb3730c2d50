614b2dc35c9c9bf5cc027b64a3dc637b
"use strict";

/* istanbul ignore next */
function cov_28e05fkio1() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\cloudinaryService.ts";
  var hash = "ccaa600f256f5a8bbbaf61388b22b53a52df60da";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\cloudinaryService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 48
        }
      },
      "3": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "5": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 44
        }
      },
      "6": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 48
        }
      },
      "7": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "8": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "9": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "10": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "11": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "12": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 58
        }
      },
      "13": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 58
        }
      },
      "14": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "15": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "16": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 54
        }
      },
      "17": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "18": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "19": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "20": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "21": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 182
        }
      },
      "22": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "23": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "24": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 65
        }
      },
      "25": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 50
        }
      },
      "26": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "27": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 45
        }
      },
      "28": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "29": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 45
        }
      },
      "30": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "31": {
        start: {
          line: 103,
          column: 23
        },
        end: {
          line: 103,
          column: 71
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "33": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 91
        }
      },
      "34": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "35": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 65
        }
      },
      "36": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 50
        }
      },
      "37": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "38": {
        start: {
          line: 124,
          column: 39
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "39": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 131,
          column: 11
        }
      },
      "40": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 68
        }
      },
      "41": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 18
        }
      },
      "42": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 148,
          column: 6
        }
      },
      "43": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "44": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 77
        }
      },
      "45": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 159,
          column: 79
        }
      },
      "46": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 162,
          column: 5
        }
      },
      "47": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 88
        }
      },
      "48": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 163,
          column: 29
        }
      },
      "49": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "50": {
        start: {
          line: 170,
          column: 23
        },
        end: {
          line: 170,
          column: 67
        }
      },
      "51": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 179,
          column: 10
        }
      },
      "52": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 70
        }
      },
      "53": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 56
        }
      },
      "54": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 202,
          column: 5
        }
      },
      "55": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "56": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 19
        }
      },
      "57": {
        start: {
          line: 193,
          column: 23
        },
        end: {
          line: 193,
          column: 76
        }
      },
      "58": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "59": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 67
        }
      },
      "60": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 51
        }
      },
      "61": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "62": {
        start: {
          line: 209,
          column: 23
        },
        end: {
          line: 212,
          column: 22
        }
      },
      "63": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 32
        }
      },
      "64": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 60
        }
      },
      "65": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 51
        }
      },
      "66": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 257,
          column: 5
        }
      },
      "67": {
        start: {
          line: 225,
          column: 31
        },
        end: {
          line: 232,
          column: 10
        }
      },
      "68": {
        start: {
          line: 226,
          column: 34
        },
        end: {
          line: 230,
          column: 13
        }
      },
      "69": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 54
        }
      },
      "70": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 64
        }
      },
      "71": {
        start: {
          line: 234,
          column: 27
        },
        end: {
          line: 234,
          column: 29
        }
      },
      "72": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 25
        }
      },
      "73": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 243,
          column: 11
        }
      },
      "74": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 242,
          column: 13
        }
      },
      "75": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 46
        }
      },
      "76": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 61
        }
      },
      "77": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "78": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 120
        }
      },
      "79": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 11
        }
      },
      "80": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 26
        }
      },
      "81": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 59
        }
      },
      "82": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 56
        }
      },
      "83": {
        start: {
          line: 263,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "84": {
        start: {
          line: 264,
          column: 29
        },
        end: {
          line: 265,
          column: 59
        }
      },
      "85": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 271,
          column: 9
        }
      },
      "86": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "87": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 277,
          column: 14
        }
      },
      "88": {
        start: {
          line: 279,
          column: 23
        },
        end: {
          line: 279,
          column: 129
        }
      },
      "89": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 288,
          column: 10
        }
      },
      "90": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 73
        }
      },
      "91": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "92": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 317,
          column: 5
        }
      },
      "93": {
        start: {
          line: 300,
          column: 26
        },
        end: {
          line: 300,
          column: 65
        }
      },
      "94": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "95": {
        start: {
          line: 307,
          column: 26
        },
        end: {
          line: 307,
          column: 116
        }
      },
      "96": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 312,
          column: 10
        }
      },
      "97": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 76
        }
      },
      "98": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 64
        }
      },
      "99": {
        start: {
          line: 323,
          column: 4
        },
        end: {
          line: 348,
          column: 5
        }
      },
      "100": {
        start: {
          line: 324,
          column: 27
        },
        end: {
          line: 324,
          column: 37
        }
      },
      "101": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 65
        }
      },
      "102": {
        start: {
          line: 326,
          column: 29
        },
        end: {
          line: 329,
          column: 22
        }
      },
      "103": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "104": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 45
        }
      },
      "105": {
        start: {
          line: 333,
          column: 26
        },
        end: {
          line: 333,
          column: 86
        }
      },
      "106": {
        start: {
          line: 333,
          column: 67
        },
        end: {
          line: 333,
          column: 85
        }
      },
      "107": {
        start: {
          line: 334,
          column: 29
        },
        end: {
          line: 334,
          column: 82
        }
      },
      "108": {
        start: {
          line: 335,
          column: 24
        },
        end: {
          line: 335,
          column: 64
        }
      },
      "109": {
        start: {
          line: 336,
          column: 23
        },
        end: {
          line: 336,
          column: 71
        }
      },
      "110": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 342,
          column: 11
        }
      },
      "111": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 35
        }
      },
      "112": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 55
        }
      },
      "113": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 56
        }
      },
      "114": {
        start: {
          line: 350,
          column: 0
        },
        end: {
          line: 365,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "uploadImage",
        decl: {
          start: {
            line: 29,
            column: 15
          },
          end: {
            line: 29,
            column: 26
          }
        },
        loc: {
          start: {
            line: 29,
            column: 54
          },
          end: {
            line: 64,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "uploadProfilePhoto",
        decl: {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 68,
            column: 33
          }
        },
        loc: {
          start: {
            line: 68,
            column: 74
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 68
      },
      "2": {
        name: "uploadPropertyPhoto",
        decl: {
          start: {
            line: 85,
            column: 15
          },
          end: {
            line: 85,
            column: 34
          }
        },
        loc: {
          start: {
            line: 85,
            column: 68
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 85
      },
      "3": {
        name: "deleteImage",
        decl: {
          start: {
            line: 101,
            column: 15
          },
          end: {
            line: 101,
            column: 26
          }
        },
        loc: {
          start: {
            line: 101,
            column: 37
          },
          end: {
            line: 118,
            column: 1
          }
        },
        line: 101
      },
      "4": {
        name: "generateImageUrl",
        decl: {
          start: {
            line: 122,
            column: 9
          },
          end: {
            line: 122,
            column: 25
          }
        },
        loc: {
          start: {
            line: 122,
            column: 58
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 122
      },
      "5": {
        name: "generateImageSizes",
        decl: {
          start: {
            line: 141,
            column: 9
          },
          end: {
            line: 141,
            column: 27
          }
        },
        loc: {
          start: {
            line: 141,
            column: 38
          },
          end: {
            line: 149,
            column: 1
          }
        },
        line: 141
      },
      "6": {
        name: "validateImageFile",
        decl: {
          start: {
            line: 153,
            column: 9
          },
          end: {
            line: 153,
            column: 26
          }
        },
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 153
      },
      "7": {
        name: "getImageMetadata",
        decl: {
          start: {
            line: 168,
            column: 15
          },
          end: {
            line: 168,
            column: 31
          }
        },
        loc: {
          start: {
            line: 168,
            column: 42
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 168
      },
      "8": {
        name: "bulkDeleteImages",
        decl: {
          start: {
            line: 189,
            column: 15
          },
          end: {
            line: 189,
            column: 31
          }
        },
        loc: {
          start: {
            line: 189,
            column: 43
          },
          end: {
            line: 203,
            column: 1
          }
        },
        line: 189
      },
      "9": {
        name: "searchImagesByTags",
        decl: {
          start: {
            line: 207,
            column: 15
          },
          end: {
            line: 207,
            column: 33
          }
        },
        loc: {
          start: {
            line: 207,
            column: 57
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 207
      },
      "10": {
        name: "bulkUploadImages",
        decl: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 31
          }
        },
        loc: {
          start: {
            line: 223,
            column: 72
          },
          end: {
            line: 258,
            column: 1
          }
        },
        line: 223
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 225,
            column: 42
          },
          end: {
            line: 225,
            column: 43
          }
        },
        loc: {
          start: {
            line: 225,
            column: 79
          },
          end: {
            line: 232,
            column: 9
          }
        },
        line: 225
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 236,
            column: 25
          }
        },
        loc: {
          start: {
            line: 236,
            column: 43
          },
          end: {
            line: 243,
            column: 9
          }
        },
        line: 236
      },
      "13": {
        name: "uploadMessageAttachment",
        decl: {
          start: {
            line: 262,
            column: 15
          },
          end: {
            line: 262,
            column: 38
          }
        },
        loc: {
          start: {
            line: 262,
            column: 85
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 262
      },
      "14": {
        name: "generateSignedUploadUrl",
        decl: {
          start: {
            line: 298,
            column: 9
          },
          end: {
            line: 298,
            column: 32
          }
        },
        loc: {
          start: {
            line: 298,
            column: 68
          },
          end: {
            line: 318,
            column: 1
          }
        },
        line: 298
      },
      "15": {
        name: "cleanupOldImages",
        decl: {
          start: {
            line: 322,
            column: 15
          },
          end: {
            line: 322,
            column: 31
          }
        },
        loc: {
          start: {
            line: 322,
            column: 60
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 322
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 333,
            column: 53
          },
          end: {
            line: 333,
            column: 54
          }
        },
        loc: {
          start: {
            line: 333,
            column: 67
          },
          end: {
            line: 333,
            column: 85
          }
        },
        line: 333
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 40
          },
          end: {
            line: 29,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 50
          },
          end: {
            line: 29,
            column: 52
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 61
          },
          end: {
            line: 44,
            column: 165
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 44,
            column: 93
          },
          end: {
            line: 44,
            column: 151
          }
        }, {
          start: {
            line: 44,
            column: 154
          },
          end: {
            line: 44,
            column: 165
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 55
          },
          end: {
            line: 68,
            column: 72
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 68,
            column: 67
          },
          end: {
            line: 68,
            column: 72
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 42
          },
          end: {
            line: 78,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 54
          },
          end: {
            line: 78,
            column: 63
          }
        }, {
          start: {
            line: 78,
            column: 66
          },
          end: {
            line: 78,
            column: 77
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 31
          },
          end: {
            line: 88,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 31
          },
          end: {
            line: 88,
            column: 41
          }
        }, {
          start: {
            line: 88,
            column: 45
          },
          end: {
            line: 88,
            column: 51
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 94,
            column: 43
          },
          end: {
            line: 94,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 43
          },
          end: {
            line: 94,
            column: 53
          }
        }, {
          start: {
            line: 94,
            column: 57
          },
          end: {
            line: 94,
            column: 66
          }
        }],
        line: 94
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: 107,
            column: 13
          },
          end: {
            line: 112,
            column: 9
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 122,
            column: 36
          },
          end: {
            line: 122,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 122,
            column: 54
          },
          end: {
            line: 122,
            column: 56
          }
        }],
        line: 122
      },
      "8": {
        loc: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "9": {
        loc: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "10": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 192,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 191
      },
      "11": {
        loc: {
          start: {
            line: 196,
            column: 35
          },
          end: {
            line: 196,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 35
          },
          end: {
            line: 196,
            column: 51
          }
        }, {
          start: {
            line: 196,
            column: 55
          },
          end: {
            line: 196,
            column: 57
          }
        }],
        line: 196
      },
      "12": {
        loc: {
          start: {
            line: 207,
            column: 40
          },
          end: {
            line: 207,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 207,
            column: 53
          },
          end: {
            line: 207,
            column: 55
          }
        }],
        line: 207
      },
      "13": {
        loc: {
          start: {
            line: 223,
            column: 40
          },
          end: {
            line: 223,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 223,
            column: 53
          },
          end: {
            line: 223,
            column: 70
          }
        }],
        line: 223
      },
      "14": {
        loc: {
          start: {
            line: 225,
            column: 53
          },
          end: {
            line: 225,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 225,
            column: 63
          },
          end: {
            line: 225,
            column: 65
          }
        }],
        line: 225
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 242,
            column: 13
          }
        }, {
          start: {
            line: 240,
            column: 17
          },
          end: {
            line: 242,
            column: 13
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "17": {
        loc: {
          start: {
            line: 264,
            column: 29
          },
          end: {
            line: 265,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 61
          },
          end: {
            line: 264,
            column: 68
          }
        }, {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 265,
            column: 59
          }
        }],
        line: 264
      },
      "18": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 265,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 44
          },
          end: {
            line: 265,
            column: 51
          }
        }, {
          start: {
            line: 265,
            column: 54
          },
          end: {
            line: 265,
            column: 59
          }
        }],
        line: 265
      },
      "19": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "20": {
        loc: {
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 283,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 19
          },
          end: {
            line: 283,
            column: 31
          }
        }, {
          start: {
            line: 283,
            column: 35
          },
          end: {
            line: 283,
            column: 36
          }
        }],
        line: 283
      },
      "21": {
        loc: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 33
          }
        }, {
          start: {
            line: 284,
            column: 37
          },
          end: {
            line: 284,
            column: 38
          }
        }],
        line: 284
      },
      "22": {
        loc: {
          start: {
            line: 298,
            column: 41
          },
          end: {
            line: 298,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 298,
            column: 48
          },
          end: {
            line: 298,
            column: 50
          }
        }],
        line: 298
      },
      "23": {
        loc: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 45
          },
          end: {
            line: 305,
            column: 75
          }
        }, {
          start: {
            line: 305,
            column: 78
          },
          end: {
            line: 305,
            column: 87
          }
        }],
        line: 305
      },
      "24": {
        loc: {
          start: {
            line: 322,
            column: 40
          },
          end: {
            line: 322,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 322,
            column: 56
          },
          end: {
            line: 322,
            column: 58
          }
        }],
        line: 322
      },
      "25": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "26": {
        loc: {
          start: {
            line: 336,
            column: 35
          },
          end: {
            line: 336,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 35
          },
          end: {
            line: 336,
            column: 57
          }
        }, {
          start: {
            line: 336,
            column: 61
          },
          end: {
            line: 336,
            column: 63
          }
        }],
        line: 336
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0],
      "23": [0, 0],
      "24": [0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\cloudinaryService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\cloudinaryService.ts"],
      sourcesContent: ["import { v2 as cloudinary } from 'cloudinary';\r\nimport { config } from '../config/environment';\r\nimport { logger } from '../utils/logger';\r\n\r\n// Configure Cloudinary\r\ncloudinary.config({\r\n  cloud_name: config.CLOUDINARY_CLOUD_NAME,\r\n  api_key: config.CLOUDINARY_API_KEY,\r\n  api_secret: config.CLOUDINARY_API_SECRET\r\n});\r\n\r\n// Upload options interface\r\ninterface UploadOptions {\r\n  folder?: string;\r\n  transformation?: any[];\r\n  tags?: string[];\r\n  public_id?: string;\r\n  overwrite?: boolean;\r\n}\r\n\r\n// Upload result interface\r\ninterface UploadResult {\r\n  public_id: string;\r\n  secure_url: string;\r\n  width: number;\r\n  height: number;\r\n  format: string;\r\n  bytes: number;\r\n  created_at: string;\r\n}\r\n\r\n/**\r\n * Upload image to Cloudinary\r\n */\r\nexport async function uploadImage(\r\n  imageBuffer: Buffer | string,\r\n  options: UploadOptions = {}\r\n): Promise<UploadResult> {\r\n  try {\r\n    const defaultOptions = {\r\n      folder: 'lajospaces/profiles',\r\n      resource_type: 'image' as const,\r\n      quality: 'auto',\r\n      fetch_format: 'auto',\r\n      transformation: [\r\n        { width: 800, height: 800, crop: 'limit' },\r\n        { quality: 'auto:good' },\r\n        { format: 'auto' }\r\n      ],\r\n      tags: ['profile', 'lajospaces'],\r\n      ...options\r\n    };\r\n\r\n    const result = await cloudinary.uploader.upload(\r\n      imageBuffer instanceof Buffer ? `data:image/jpeg;base64,${imageBuffer.toString('base64')}` : imageBuffer as string,\r\n      defaultOptions\r\n    );\r\n\r\n    logger.info('Image uploaded to Cloudinary', {\r\n      public_id: result.public_id,\r\n      secure_url: result.secure_url,\r\n      bytes: result.bytes\r\n    });\r\n\r\n    return {\r\n      public_id: result.public_id,\r\n      secure_url: result.secure_url,\r\n      width: result.width,\r\n      height: result.height,\r\n      format: result.format,\r\n      bytes: result.bytes,\r\n      created_at: result.created_at\r\n    };\r\n  } catch (error) {\r\n    logger.error('Cloudinary upload error:', error);\r\n    throw new Error('Failed to upload image');\r\n  }\r\n}\r\n\r\n/**\r\n * Upload profile photo with specific transformations\r\n */\r\nexport async function uploadProfilePhoto(\r\n  imageBuffer: Buffer | string,\r\n  userId: string,\r\n  isPrimary: boolean = false\r\n): Promise<UploadResult> {\r\n  const options: UploadOptions = {\r\n    folder: 'lajospaces/profiles',\r\n    public_id: `user_${userId}_${Date.now()}`,\r\n    transformation: [\r\n      // Create multiple sizes\r\n      { width: 400, height: 400, crop: 'fill', gravity: 'face' },\r\n      { quality: 'auto:good' },\r\n      { format: 'auto' }\r\n    ],\r\n    tags: ['profile', 'user', userId, isPrimary ? 'primary' : 'secondary']\r\n  };\r\n\r\n  return uploadImage(imageBuffer, options);\r\n}\r\n\r\n/**\r\n * Upload room/property photo\r\n */\r\nexport async function uploadPropertyPhoto(\r\n  imageBuffer: Buffer | string,\r\n  userId: string,\r\n  propertyId?: string\r\n): Promise<UploadResult> {\r\n  const options: UploadOptions = {\r\n    folder: 'lajospaces/properties',\r\n    public_id: `property_${propertyId || userId}_${Date.now()}`,\r\n    transformation: [\r\n      { width: 1200, height: 800, crop: 'limit' },\r\n      { quality: 'auto:good' },\r\n      { format: 'auto' }\r\n    ],\r\n    tags: ['property', 'room', userId, propertyId || 'listing']\r\n  };\r\n\r\n  return uploadImage(imageBuffer, options);\r\n}\r\n\r\n/**\r\n * Delete image from Cloudinary\r\n */\r\nexport async function deleteImage(publicId: string): Promise<void> {\r\n  try {\r\n    const result = await cloudinary.uploader.destroy(publicId);\r\n    \r\n    if (result.result === 'ok') {\r\n      logger.info('Image deleted from Cloudinary', { public_id: publicId });\r\n    } else {\r\n      logger.warn('Image deletion failed or image not found', { \r\n        public_id: publicId, \r\n        result: result.result \r\n      });\r\n    }\r\n  } catch (error) {\r\n    logger.error('Cloudinary delete error:', error);\r\n    throw new Error('Failed to delete image');\r\n  }\r\n}\r\n\r\n/**\r\n * Generate optimized image URL with transformations\r\n */\r\nexport function generateImageUrl(\r\n  publicId: string,\r\n  transformations: any[] = []\r\n): string {\r\n  try {\r\n    const defaultTransformations = [\r\n      { quality: 'auto:good' },\r\n      { format: 'auto' }\r\n    ];\r\n\r\n    return cloudinary.url(publicId, {\r\n      transformation: [...defaultTransformations, ...transformations],\r\n      secure: true\r\n    });\r\n  } catch (error) {\r\n    logger.error('Error generating image URL:', error);\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * Generate multiple image sizes\r\n */\r\nexport function generateImageSizes(publicId: string): {\r\n  thumbnail: string;\r\n  small: string;\r\n  medium: string;\r\n  large: string;\r\n  original: string;\r\n} {\r\n  return {\r\n    thumbnail: generateImageUrl(publicId, [{ width: 150, height: 150, crop: 'fill' }]),\r\n    small: generateImageUrl(publicId, [{ width: 300, height: 300, crop: 'fill' }]),\r\n    medium: generateImageUrl(publicId, [{ width: 600, height: 600, crop: 'limit' }]),\r\n    large: generateImageUrl(publicId, [{ width: 1200, height: 1200, crop: 'limit' }]),\r\n    original: generateImageUrl(publicId)\r\n  };\r\n}\r\n\r\n/**\r\n * Validate image file\r\n */\r\nexport function validateImageFile(file: any): { isValid: boolean; error?: string } {\r\n  // Check file size (max 10MB)\r\n  if (file.size > 10 * 1024 * 1024) {\r\n    return { isValid: false, error: 'File size must be less than 10MB' };\r\n  }\r\n\r\n  // Check file type\r\n  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\r\n  if (!allowedTypes.includes(file.mimetype)) {\r\n    return { isValid: false, error: 'Only JPEG, PNG, and WebP images are allowed' };\r\n  }\r\n\r\n  return { isValid: true };\r\n}\r\n\r\n/**\r\n * Get image metadata\r\n */\r\nexport async function getImageMetadata(publicId: string): Promise<any> {\r\n  try {\r\n    const result = await cloudinary.api.resource(publicId);\r\n    return {\r\n      public_id: result.public_id,\r\n      format: result.format,\r\n      width: result.width,\r\n      height: result.height,\r\n      bytes: result.bytes,\r\n      created_at: result.created_at,\r\n      secure_url: result.secure_url\r\n    };\r\n  } catch (error) {\r\n    logger.error('Error getting image metadata:', error);\r\n    throw new Error('Failed to get image metadata');\r\n  }\r\n}\r\n\r\n/**\r\n * Bulk delete images\r\n */\r\nexport async function bulkDeleteImages(publicIds: string[]): Promise<void> {\r\n  try {\r\n    if (publicIds.length === 0) return;\r\n\r\n    const result = await cloudinary.api.delete_resources(publicIds);\r\n    \r\n    logger.info('Bulk image deletion completed', {\r\n      deleted: Object.keys(result.deleted).length,\r\n      not_found: Object.keys(result.not_found || {}).length\r\n    });\r\n  } catch (error) {\r\n    logger.error('Bulk image deletion error:', error);\r\n    throw new Error('Failed to delete images');\r\n  }\r\n}\r\n\r\n/**\r\n * Search images by tags\r\n */\r\nexport async function searchImagesByTags(tags: string[], maxResults: number = 50): Promise<any[]> {\r\n  try {\r\n    const result = await cloudinary.search\r\n      .expression(`tags:${tags.join(' AND tags:')}`)\r\n      .max_results(maxResults)\r\n      .execute();\r\n\r\n    return result.resources;\r\n  } catch (error) {\r\n    logger.error('Image search error:', error);\r\n    throw new Error('Failed to search images');\r\n  }\r\n}\r\n\r\n/**\r\n * Upload multiple images in bulk\r\n */\r\nexport async function bulkUploadImages(\r\n  images: { buffer: Buffer; options?: UploadOptions }[],\r\n  baseFolder: string = 'lajospaces/bulk'\r\n): Promise<UploadResult[]> {\r\n  try {\r\n    const uploadPromises = images.map(({ buffer, options = {} }, index) => {\r\n      const uploadOptions: UploadOptions = {\r\n        folder: baseFolder,\r\n        public_id: `bulk_${Date.now()}_${index}`,\r\n        ...options\r\n      };\r\n      return uploadImage(buffer, uploadOptions);\r\n    });\r\n\r\n    const results = await Promise.allSettled(uploadPromises);\r\n\r\n    const successful: UploadResult[] = [];\r\n    const failed: any[] = [];\r\n\r\n    results.forEach((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        successful.push(result.value);\r\n      } else {\r\n        failed.push({ index, error: result.reason });\r\n      }\r\n    });\r\n\r\n    if (failed.length > 0) {\r\n      logger.warn('Some bulk uploads failed:', { failed: failed.length, successful: successful.length });\r\n    }\r\n\r\n    logger.info('Bulk upload completed:', {\r\n      total: images.length,\r\n      successful: successful.length,\r\n      failed: failed.length\r\n    });\r\n\r\n    return successful;\r\n  } catch (error) {\r\n    logger.error('Bulk upload error:', error);\r\n    throw new Error('Failed to bulk upload images');\r\n  }\r\n}\r\n\r\n/**\r\n * Upload message attachment (image, video, or document)\r\n */\r\nexport async function uploadMessageAttachment(\r\n  fileBuffer: Buffer,\r\n  fileType: string,\r\n  userId: string,\r\n  conversationId: string\r\n): Promise<UploadResult> {\r\n  try {\r\n    const resourceType = fileType.startsWith('image/') ? 'image' :\r\n                        fileType.startsWith('video/') ? 'video' : 'raw';\r\n\r\n    const options = {\r\n      folder: `lajospaces/messages/${conversationId}`,\r\n      public_id: `msg_${userId}_${Date.now()}`,\r\n      resource_type: resourceType as 'image' | 'video' | 'raw',\r\n      tags: ['message', 'attachment', userId, conversationId]\r\n    };\r\n\r\n    if (resourceType === 'image') {\r\n      options.transformation = [\r\n        { width: 800, height: 600, crop: 'limit' },\r\n        { quality: 'auto:good' },\r\n        { format: 'auto' }\r\n      ];\r\n    }\r\n\r\n    const result = await cloudinary.uploader.upload(\r\n      `data:${fileType};base64,${fileBuffer.toString('base64')}`,\r\n      options\r\n    );\r\n\r\n    return {\r\n      public_id: result.public_id,\r\n      secure_url: result.secure_url,\r\n      width: result.width || 0,\r\n      height: result.height || 0,\r\n      format: result.format,\r\n      bytes: result.bytes,\r\n      created_at: result.created_at\r\n    };\r\n  } catch (error) {\r\n    logger.error('Message attachment upload error:', error);\r\n    throw new Error('Failed to upload message attachment');\r\n  }\r\n}\r\n\r\n/**\r\n * Generate signed upload URL for direct client uploads\r\n */\r\nexport function generateSignedUploadUrl(\r\n  folder: string,\r\n  tags: string[] = [],\r\n  transformation?: any[]\r\n): { url: string; signature: string; timestamp: number } {\r\n  try {\r\n    const timestamp = Math.round(new Date().getTime() / 1000);\r\n    const params = {\r\n      timestamp,\r\n      folder,\r\n      tags: tags.join(','),\r\n      transformation: transformation ? JSON.stringify(transformation) : undefined\r\n    };\r\n\r\n    const signature = cloudinary.utils.api_sign_request(params, config.CLOUDINARY_API_SECRET!);\r\n\r\n    return {\r\n      url: `https://api.cloudinary.com/v1_1/${config.CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n      signature,\r\n      timestamp\r\n    };\r\n  } catch (error) {\r\n    logger.error('Error generating signed upload URL:', error);\r\n    throw new Error('Failed to generate signed upload URL');\r\n  }\r\n}\r\n\r\n/**\r\n * Clean up old images by folder and age\r\n */\r\nexport async function cleanupOldImages(\r\n  folder: string,\r\n  olderThanDays: number = 30\r\n): Promise<{ deleted: number; errors: number }> {\r\n  try {\r\n    const cutoffDate = new Date();\r\n    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\r\n\r\n    const searchResult = await cloudinary.search\r\n      .expression(`folder:${folder} AND created_at<${cutoffDate.toISOString()}`)\r\n      .max_results(500)\r\n      .execute();\r\n\r\n    if (searchResult.resources.length === 0) {\r\n      return { deleted: 0, errors: 0 };\r\n    }\r\n\r\n    const publicIds = searchResult.resources.map((resource: any) => resource.public_id);\r\n    const deleteResult = await cloudinary.api.delete_resources(publicIds);\r\n\r\n    const deleted = Object.keys(deleteResult.deleted).length;\r\n    const errors = Object.keys(deleteResult.not_found || {}).length;\r\n\r\n    logger.info('Cleanup completed:', {\r\n      folder,\r\n      olderThanDays,\r\n      deleted,\r\n      errors\r\n    });\r\n\r\n    return { deleted, errors };\r\n  } catch (error) {\r\n    logger.error('Cleanup error:', error);\r\n    throw new Error('Failed to cleanup old images');\r\n  }\r\n}\r\n\r\nexport default {\r\n  uploadImage,\r\n  uploadProfilePhoto,\r\n  uploadPropertyPhoto,\r\n  deleteImage,\r\n  generateImageUrl,\r\n  generateImageSizes,\r\n  validateImageFile,\r\n  getImageMetadata,\r\n  bulkDeleteImages,\r\n  searchImagesByTags,\r\n  bulkUploadImages,\r\n  uploadMessageAttachment,\r\n  generateSignedUploadUrl,\r\n  cleanupOldImages\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ccaa600f256f5a8bbbaf61388b22b53a52df60da"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28e05fkio1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28e05fkio1();
cov_28e05fkio1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28e05fkio1().s[1]++;
exports.uploadImage = uploadImage;
/* istanbul ignore next */
cov_28e05fkio1().s[2]++;
exports.uploadProfilePhoto = uploadProfilePhoto;
/* istanbul ignore next */
cov_28e05fkio1().s[3]++;
exports.uploadPropertyPhoto = uploadPropertyPhoto;
/* istanbul ignore next */
cov_28e05fkio1().s[4]++;
exports.deleteImage = deleteImage;
/* istanbul ignore next */
cov_28e05fkio1().s[5]++;
exports.generateImageUrl = generateImageUrl;
/* istanbul ignore next */
cov_28e05fkio1().s[6]++;
exports.generateImageSizes = generateImageSizes;
/* istanbul ignore next */
cov_28e05fkio1().s[7]++;
exports.validateImageFile = validateImageFile;
/* istanbul ignore next */
cov_28e05fkio1().s[8]++;
exports.getImageMetadata = getImageMetadata;
/* istanbul ignore next */
cov_28e05fkio1().s[9]++;
exports.bulkDeleteImages = bulkDeleteImages;
/* istanbul ignore next */
cov_28e05fkio1().s[10]++;
exports.searchImagesByTags = searchImagesByTags;
/* istanbul ignore next */
cov_28e05fkio1().s[11]++;
exports.bulkUploadImages = bulkUploadImages;
/* istanbul ignore next */
cov_28e05fkio1().s[12]++;
exports.uploadMessageAttachment = uploadMessageAttachment;
/* istanbul ignore next */
cov_28e05fkio1().s[13]++;
exports.generateSignedUploadUrl = generateSignedUploadUrl;
/* istanbul ignore next */
cov_28e05fkio1().s[14]++;
exports.cleanupOldImages = cleanupOldImages;
const cloudinary_1 =
/* istanbul ignore next */
(cov_28e05fkio1().s[15]++, require("cloudinary"));
const environment_1 =
/* istanbul ignore next */
(cov_28e05fkio1().s[16]++, require("../config/environment"));
const logger_1 =
/* istanbul ignore next */
(cov_28e05fkio1().s[17]++, require("../utils/logger"));
// Configure Cloudinary
/* istanbul ignore next */
cov_28e05fkio1().s[18]++;
cloudinary_1.v2.config({
  cloud_name: environment_1.config.CLOUDINARY_CLOUD_NAME,
  api_key: environment_1.config.CLOUDINARY_API_KEY,
  api_secret: environment_1.config.CLOUDINARY_API_SECRET
});
/**
 * Upload image to Cloudinary
 */
async function uploadImage(imageBuffer, options =
/* istanbul ignore next */
(cov_28e05fkio1().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[0]++;
  cov_28e05fkio1().s[19]++;
  try {
    const defaultOptions =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[20]++, {
      folder: 'lajospaces/profiles',
      resource_type: 'image',
      quality: 'auto',
      fetch_format: 'auto',
      transformation: [{
        width: 800,
        height: 800,
        crop: 'limit'
      }, {
        quality: 'auto:good'
      }, {
        format: 'auto'
      }],
      tags: ['profile', 'lajospaces'],
      ...options
    });
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[21]++, await cloudinary_1.v2.uploader.upload(imageBuffer instanceof Buffer ?
    /* istanbul ignore next */
    (cov_28e05fkio1().b[1][0]++, `data:image/jpeg;base64,${imageBuffer.toString('base64')}`) :
    /* istanbul ignore next */
    (cov_28e05fkio1().b[1][1]++, imageBuffer), defaultOptions));
    /* istanbul ignore next */
    cov_28e05fkio1().s[22]++;
    logger_1.logger.info('Image uploaded to Cloudinary', {
      public_id: result.public_id,
      secure_url: result.secure_url,
      bytes: result.bytes
    });
    /* istanbul ignore next */
    cov_28e05fkio1().s[23]++;
    return {
      public_id: result.public_id,
      secure_url: result.secure_url,
      width: result.width,
      height: result.height,
      format: result.format,
      bytes: result.bytes,
      created_at: result.created_at
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[24]++;
    logger_1.logger.error('Cloudinary upload error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[25]++;
    throw new Error('Failed to upload image');
  }
}
/**
 * Upload profile photo with specific transformations
 */
async function uploadProfilePhoto(imageBuffer, userId, isPrimary =
/* istanbul ignore next */
(cov_28e05fkio1().b[2][0]++, false)) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[1]++;
  const options =
  /* istanbul ignore next */
  (cov_28e05fkio1().s[26]++, {
    folder: 'lajospaces/profiles',
    public_id: `user_${userId}_${Date.now()}`,
    transformation: [
    // Create multiple sizes
    {
      width: 400,
      height: 400,
      crop: 'fill',
      gravity: 'face'
    }, {
      quality: 'auto:good'
    }, {
      format: 'auto'
    }],
    tags: ['profile', 'user', userId, isPrimary ?
    /* istanbul ignore next */
    (cov_28e05fkio1().b[3][0]++, 'primary') :
    /* istanbul ignore next */
    (cov_28e05fkio1().b[3][1]++, 'secondary')]
  });
  /* istanbul ignore next */
  cov_28e05fkio1().s[27]++;
  return uploadImage(imageBuffer, options);
}
/**
 * Upload room/property photo
 */
async function uploadPropertyPhoto(imageBuffer, userId, propertyId) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[2]++;
  const options =
  /* istanbul ignore next */
  (cov_28e05fkio1().s[28]++, {
    folder: 'lajospaces/properties',
    public_id: `property_${
    /* istanbul ignore next */
    (cov_28e05fkio1().b[4][0]++, propertyId) ||
    /* istanbul ignore next */
    (cov_28e05fkio1().b[4][1]++, userId)}_${Date.now()}`,
    transformation: [{
      width: 1200,
      height: 800,
      crop: 'limit'
    }, {
      quality: 'auto:good'
    }, {
      format: 'auto'
    }],
    tags: ['property', 'room', userId,
    /* istanbul ignore next */
    (cov_28e05fkio1().b[5][0]++, propertyId) ||
    /* istanbul ignore next */
    (cov_28e05fkio1().b[5][1]++, 'listing')]
  });
  /* istanbul ignore next */
  cov_28e05fkio1().s[29]++;
  return uploadImage(imageBuffer, options);
}
/**
 * Delete image from Cloudinary
 */
async function deleteImage(publicId) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[3]++;
  cov_28e05fkio1().s[30]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[31]++, await cloudinary_1.v2.uploader.destroy(publicId));
    /* istanbul ignore next */
    cov_28e05fkio1().s[32]++;
    if (result.result === 'ok') {
      /* istanbul ignore next */
      cov_28e05fkio1().b[6][0]++;
      cov_28e05fkio1().s[33]++;
      logger_1.logger.info('Image deleted from Cloudinary', {
        public_id: publicId
      });
    } else {
      /* istanbul ignore next */
      cov_28e05fkio1().b[6][1]++;
      cov_28e05fkio1().s[34]++;
      logger_1.logger.warn('Image deletion failed or image not found', {
        public_id: publicId,
        result: result.result
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[35]++;
    logger_1.logger.error('Cloudinary delete error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[36]++;
    throw new Error('Failed to delete image');
  }
}
/**
 * Generate optimized image URL with transformations
 */
function generateImageUrl(publicId, transformations =
/* istanbul ignore next */
(cov_28e05fkio1().b[7][0]++, [])) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[4]++;
  cov_28e05fkio1().s[37]++;
  try {
    const defaultTransformations =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[38]++, [{
      quality: 'auto:good'
    }, {
      format: 'auto'
    }]);
    /* istanbul ignore next */
    cov_28e05fkio1().s[39]++;
    return cloudinary_1.v2.url(publicId, {
      transformation: [...defaultTransformations, ...transformations],
      secure: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[40]++;
    logger_1.logger.error('Error generating image URL:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[41]++;
    return '';
  }
}
/**
 * Generate multiple image sizes
 */
function generateImageSizes(publicId) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[5]++;
  cov_28e05fkio1().s[42]++;
  return {
    thumbnail: generateImageUrl(publicId, [{
      width: 150,
      height: 150,
      crop: 'fill'
    }]),
    small: generateImageUrl(publicId, [{
      width: 300,
      height: 300,
      crop: 'fill'
    }]),
    medium: generateImageUrl(publicId, [{
      width: 600,
      height: 600,
      crop: 'limit'
    }]),
    large: generateImageUrl(publicId, [{
      width: 1200,
      height: 1200,
      crop: 'limit'
    }]),
    original: generateImageUrl(publicId)
  };
}
/**
 * Validate image file
 */
function validateImageFile(file) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[6]++;
  cov_28e05fkio1().s[43]++;
  // Check file size (max 10MB)
  if (file.size > 10 * 1024 * 1024) {
    /* istanbul ignore next */
    cov_28e05fkio1().b[8][0]++;
    cov_28e05fkio1().s[44]++;
    return {
      isValid: false,
      error: 'File size must be less than 10MB'
    };
  } else
  /* istanbul ignore next */
  {
    cov_28e05fkio1().b[8][1]++;
  }
  // Check file type
  const allowedTypes =
  /* istanbul ignore next */
  (cov_28e05fkio1().s[45]++, ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']);
  /* istanbul ignore next */
  cov_28e05fkio1().s[46]++;
  if (!allowedTypes.includes(file.mimetype)) {
    /* istanbul ignore next */
    cov_28e05fkio1().b[9][0]++;
    cov_28e05fkio1().s[47]++;
    return {
      isValid: false,
      error: 'Only JPEG, PNG, and WebP images are allowed'
    };
  } else
  /* istanbul ignore next */
  {
    cov_28e05fkio1().b[9][1]++;
  }
  cov_28e05fkio1().s[48]++;
  return {
    isValid: true
  };
}
/**
 * Get image metadata
 */
async function getImageMetadata(publicId) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[7]++;
  cov_28e05fkio1().s[49]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[50]++, await cloudinary_1.v2.api.resource(publicId));
    /* istanbul ignore next */
    cov_28e05fkio1().s[51]++;
    return {
      public_id: result.public_id,
      format: result.format,
      width: result.width,
      height: result.height,
      bytes: result.bytes,
      created_at: result.created_at,
      secure_url: result.secure_url
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[52]++;
    logger_1.logger.error('Error getting image metadata:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[53]++;
    throw new Error('Failed to get image metadata');
  }
}
/**
 * Bulk delete images
 */
async function bulkDeleteImages(publicIds) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[8]++;
  cov_28e05fkio1().s[54]++;
  try {
    /* istanbul ignore next */
    cov_28e05fkio1().s[55]++;
    if (publicIds.length === 0) {
      /* istanbul ignore next */
      cov_28e05fkio1().b[10][0]++;
      cov_28e05fkio1().s[56]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_28e05fkio1().b[10][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[57]++, await cloudinary_1.v2.api.delete_resources(publicIds));
    /* istanbul ignore next */
    cov_28e05fkio1().s[58]++;
    logger_1.logger.info('Bulk image deletion completed', {
      deleted: Object.keys(result.deleted).length,
      not_found: Object.keys(
      /* istanbul ignore next */
      (cov_28e05fkio1().b[11][0]++, result.not_found) ||
      /* istanbul ignore next */
      (cov_28e05fkio1().b[11][1]++, {})).length
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[59]++;
    logger_1.logger.error('Bulk image deletion error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[60]++;
    throw new Error('Failed to delete images');
  }
}
/**
 * Search images by tags
 */
async function searchImagesByTags(tags, maxResults =
/* istanbul ignore next */
(cov_28e05fkio1().b[12][0]++, 50)) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[9]++;
  cov_28e05fkio1().s[61]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[62]++, await cloudinary_1.v2.search.expression(`tags:${tags.join(' AND tags:')}`).max_results(maxResults).execute());
    /* istanbul ignore next */
    cov_28e05fkio1().s[63]++;
    return result.resources;
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[64]++;
    logger_1.logger.error('Image search error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[65]++;
    throw new Error('Failed to search images');
  }
}
/**
 * Upload multiple images in bulk
 */
async function bulkUploadImages(images, baseFolder =
/* istanbul ignore next */
(cov_28e05fkio1().b[13][0]++, 'lajospaces/bulk')) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[10]++;
  cov_28e05fkio1().s[66]++;
  try {
    const uploadPromises =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[67]++, images.map(({
      buffer,
      options =
      /* istanbul ignore next */
      (cov_28e05fkio1().b[14][0]++, {})
    }, index) => {
      /* istanbul ignore next */
      cov_28e05fkio1().f[11]++;
      const uploadOptions =
      /* istanbul ignore next */
      (cov_28e05fkio1().s[68]++, {
        folder: baseFolder,
        public_id: `bulk_${Date.now()}_${index}`,
        ...options
      });
      /* istanbul ignore next */
      cov_28e05fkio1().s[69]++;
      return uploadImage(buffer, uploadOptions);
    }));
    const results =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[70]++, await Promise.allSettled(uploadPromises));
    const successful =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[71]++, []);
    const failed =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[72]++, []);
    /* istanbul ignore next */
    cov_28e05fkio1().s[73]++;
    results.forEach((result, index) => {
      /* istanbul ignore next */
      cov_28e05fkio1().f[12]++;
      cov_28e05fkio1().s[74]++;
      if (result.status === 'fulfilled') {
        /* istanbul ignore next */
        cov_28e05fkio1().b[15][0]++;
        cov_28e05fkio1().s[75]++;
        successful.push(result.value);
      } else {
        /* istanbul ignore next */
        cov_28e05fkio1().b[15][1]++;
        cov_28e05fkio1().s[76]++;
        failed.push({
          index,
          error: result.reason
        });
      }
    });
    /* istanbul ignore next */
    cov_28e05fkio1().s[77]++;
    if (failed.length > 0) {
      /* istanbul ignore next */
      cov_28e05fkio1().b[16][0]++;
      cov_28e05fkio1().s[78]++;
      logger_1.logger.warn('Some bulk uploads failed:', {
        failed: failed.length,
        successful: successful.length
      });
    } else
    /* istanbul ignore next */
    {
      cov_28e05fkio1().b[16][1]++;
    }
    cov_28e05fkio1().s[79]++;
    logger_1.logger.info('Bulk upload completed:', {
      total: images.length,
      successful: successful.length,
      failed: failed.length
    });
    /* istanbul ignore next */
    cov_28e05fkio1().s[80]++;
    return successful;
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[81]++;
    logger_1.logger.error('Bulk upload error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[82]++;
    throw new Error('Failed to bulk upload images');
  }
}
/**
 * Upload message attachment (image, video, or document)
 */
async function uploadMessageAttachment(fileBuffer, fileType, userId, conversationId) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[13]++;
  cov_28e05fkio1().s[83]++;
  try {
    const resourceType =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[84]++, fileType.startsWith('image/') ?
    /* istanbul ignore next */
    (cov_28e05fkio1().b[17][0]++, 'image') :
    /* istanbul ignore next */
    (cov_28e05fkio1().b[17][1]++, fileType.startsWith('video/') ?
    /* istanbul ignore next */
    (cov_28e05fkio1().b[18][0]++, 'video') :
    /* istanbul ignore next */
    (cov_28e05fkio1().b[18][1]++, 'raw')));
    const options =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[85]++, {
      folder: `lajospaces/messages/${conversationId}`,
      public_id: `msg_${userId}_${Date.now()}`,
      resource_type: resourceType,
      tags: ['message', 'attachment', userId, conversationId]
    });
    /* istanbul ignore next */
    cov_28e05fkio1().s[86]++;
    if (resourceType === 'image') {
      /* istanbul ignore next */
      cov_28e05fkio1().b[19][0]++;
      cov_28e05fkio1().s[87]++;
      options.transformation = [{
        width: 800,
        height: 600,
        crop: 'limit'
      }, {
        quality: 'auto:good'
      }, {
        format: 'auto'
      }];
    } else
    /* istanbul ignore next */
    {
      cov_28e05fkio1().b[19][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[88]++, await cloudinary_1.v2.uploader.upload(`data:${fileType};base64,${fileBuffer.toString('base64')}`, options));
    /* istanbul ignore next */
    cov_28e05fkio1().s[89]++;
    return {
      public_id: result.public_id,
      secure_url: result.secure_url,
      width:
      /* istanbul ignore next */
      (cov_28e05fkio1().b[20][0]++, result.width) ||
      /* istanbul ignore next */
      (cov_28e05fkio1().b[20][1]++, 0),
      height:
      /* istanbul ignore next */
      (cov_28e05fkio1().b[21][0]++, result.height) ||
      /* istanbul ignore next */
      (cov_28e05fkio1().b[21][1]++, 0),
      format: result.format,
      bytes: result.bytes,
      created_at: result.created_at
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[90]++;
    logger_1.logger.error('Message attachment upload error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[91]++;
    throw new Error('Failed to upload message attachment');
  }
}
/**
 * Generate signed upload URL for direct client uploads
 */
function generateSignedUploadUrl(folder, tags =
/* istanbul ignore next */
(cov_28e05fkio1().b[22][0]++, []), transformation) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[14]++;
  cov_28e05fkio1().s[92]++;
  try {
    const timestamp =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[93]++, Math.round(new Date().getTime() / 1000));
    const params =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[94]++, {
      timestamp,
      folder,
      tags: tags.join(','),
      transformation: transformation ?
      /* istanbul ignore next */
      (cov_28e05fkio1().b[23][0]++, JSON.stringify(transformation)) :
      /* istanbul ignore next */
      (cov_28e05fkio1().b[23][1]++, undefined)
    });
    const signature =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[95]++, cloudinary_1.v2.utils.api_sign_request(params, environment_1.config.CLOUDINARY_API_SECRET));
    /* istanbul ignore next */
    cov_28e05fkio1().s[96]++;
    return {
      url: `https://api.cloudinary.com/v1_1/${environment_1.config.CLOUDINARY_CLOUD_NAME}/image/upload`,
      signature,
      timestamp
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[97]++;
    logger_1.logger.error('Error generating signed upload URL:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[98]++;
    throw new Error('Failed to generate signed upload URL');
  }
}
/**
 * Clean up old images by folder and age
 */
async function cleanupOldImages(folder, olderThanDays =
/* istanbul ignore next */
(cov_28e05fkio1().b[24][0]++, 30)) {
  /* istanbul ignore next */
  cov_28e05fkio1().f[15]++;
  cov_28e05fkio1().s[99]++;
  try {
    const cutoffDate =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[100]++, new Date());
    /* istanbul ignore next */
    cov_28e05fkio1().s[101]++;
    cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);
    const searchResult =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[102]++, await cloudinary_1.v2.search.expression(`folder:${folder} AND created_at<${cutoffDate.toISOString()}`).max_results(500).execute());
    /* istanbul ignore next */
    cov_28e05fkio1().s[103]++;
    if (searchResult.resources.length === 0) {
      /* istanbul ignore next */
      cov_28e05fkio1().b[25][0]++;
      cov_28e05fkio1().s[104]++;
      return {
        deleted: 0,
        errors: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_28e05fkio1().b[25][1]++;
    }
    const publicIds =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[105]++, searchResult.resources.map(resource => {
      /* istanbul ignore next */
      cov_28e05fkio1().f[16]++;
      cov_28e05fkio1().s[106]++;
      return resource.public_id;
    }));
    const deleteResult =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[107]++, await cloudinary_1.v2.api.delete_resources(publicIds));
    const deleted =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[108]++, Object.keys(deleteResult.deleted).length);
    const errors =
    /* istanbul ignore next */
    (cov_28e05fkio1().s[109]++, Object.keys(
    /* istanbul ignore next */
    (cov_28e05fkio1().b[26][0]++, deleteResult.not_found) ||
    /* istanbul ignore next */
    (cov_28e05fkio1().b[26][1]++, {})).length);
    /* istanbul ignore next */
    cov_28e05fkio1().s[110]++;
    logger_1.logger.info('Cleanup completed:', {
      folder,
      olderThanDays,
      deleted,
      errors
    });
    /* istanbul ignore next */
    cov_28e05fkio1().s[111]++;
    return {
      deleted,
      errors
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_28e05fkio1().s[112]++;
    logger_1.logger.error('Cleanup error:', error);
    /* istanbul ignore next */
    cov_28e05fkio1().s[113]++;
    throw new Error('Failed to cleanup old images');
  }
}
/* istanbul ignore next */
cov_28e05fkio1().s[114]++;
exports.default = {
  uploadImage,
  uploadProfilePhoto,
  uploadPropertyPhoto,
  deleteImage,
  generateImageUrl,
  generateImageSizes,
  validateImageFile,
  getImageMetadata,
  bulkDeleteImages,
  searchImagesByTags,
  bulkUploadImages,
  uploadMessageAttachment,
  generateSignedUploadUrl,
  cleanupOldImages
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,