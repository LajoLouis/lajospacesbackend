6b16ca1f2c25c50dacafefecb51281d5
"use strict";

/* istanbul ignore next */
function cov_os2dsi2td() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\upload.routes.ts";
  var hash = "2c232287c1e9016b8b0832aeb0aaf2920d547b99";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\upload.routes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 28
        },
        end: {
          line: 4,
          column: 71
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 56
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "6": {
        start: {
          line: 8,
          column: 28
        },
        end: {
          line: 8,
          column: 70
        }
      },
      "7": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "9": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 199
        }
      },
      "10": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 191
        }
      },
      "11": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 224
        }
      },
      "12": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 230
        }
      },
      "13": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 199
        }
      },
      "14": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "15": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 53,
          column: 154
        }
      },
      "16": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 70,
          column: 3
        }
      },
      "17": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 69,
          column: 7
        }
      },
      "18": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 59,
            column: 23
          }
        },
        loc: {
          start: {
            line: 59,
            column: 36
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 59
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\upload.routes.ts",
      mappings: ";;AAAA,qCAAiC;AACjC,wEAQ0C;AAC1C,6CAAkD;AAClD,yDAA6E;AAC7E,iDAO8B;AAC9B,uEAOyC;AAEzC,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB,2CAA2C;AAC3C,MAAM,CAAC,GAAG,CAAC,mBAAY,CAAC,CAAC;AAEzB;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,QAAQ,EACR,0BAA2B,EAC3B,0BAAiB,EACjB,IAAA,4BAAe,EAAC,qCAAiB,EAAE,MAAM,CAAC,EAC1C,qCAAiB,CAClB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,SAAS,EACT,qBAAsB,EACtB,0BAAiB,EACjB,IAAA,4BAAe,EAAC,sCAAkB,EAAE,MAAM,CAAC,EAC3C,gCAAY,CACb,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,6BAA8B,EAC9B,0BAAiB,EACjB,IAAA,4BAAe,EAAC,8CAA0B,EAAE,MAAM,CAAC,EACnD,wCAAoB,CACrB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,qBAAqB,EACrB,0BAAiB,EACjB,0BAAiB,EACjB,IAAA,4BAAe,EAAC,iDAA6B,EAAE,MAAM,CAAC,EACtD,2CAAuB,CACxB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,OAAO,EACP,6BAAoB,EACpB,0BAAiB,EACjB,IAAA,4BAAe,EAAC,oCAAgB,EAAE,MAAM,CAAC,EACzC,oCAAgB,CACjB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,CACX,YAAY,EACZ,uCAAmB,CACpB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAI,CACT,aAAa,EACb,IAAA,4BAAe,EAAC,2CAAuB,EAAE,MAAM,CAAC,EAChD,qCAAiB,CAClB,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACjC,GAAG,CAAC,IAAI,CAAC;QACP,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,2BAA2B;QACpC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACnC,QAAQ,EAAE;YACR,UAAU,EAAE,WAAW;YACvB,iBAAiB,EAAE,WAAW;YAC9B,cAAc,EAAE,QAAQ;SACzB;KACF,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\routes\\upload.routes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport {\r\n  uploadSingleImage,\r\n  uploadAvatar,\r\n  uploadPropertyPhotos,\r\n  uploadMessageAttachment,\r\n  bulkUploadImages,\r\n  deleteUploadedImage,\r\n  generateUploadUrl\r\n} from '../controllers/upload.controller';\r\nimport { authenticate } from '../middleware/auth';\r\nimport { validateRequest, validateObjectId } from '../middleware/validation';\r\nimport {\r\n  uploadSingleImage as uploadSingleImageMiddleware,\r\n  uploadAvatar as uploadAvatarMiddleware,\r\n  uploadPropertyPhotos as uploadPropertyPhotosMiddleware,\r\n  uploadMessageFile,\r\n  uploadMultipleImages,\r\n  handleUploadError\r\n} from '../middleware/upload';\r\nimport {\r\n  uploadImageSchema,\r\n  uploadAvatarSchema,\r\n  uploadPropertyPhotosSchema,\r\n  uploadMessageAttachmentSchema,\r\n  bulkUploadSchema,\r\n  generateUploadUrlSchema\r\n} from '../validators/upload.validators';\r\n\r\nconst router = Router();\r\n\r\n// All upload routes require authentication\r\nrouter.use(authenticate);\r\n\r\n/**\r\n * @route   POST /api/uploads/image\r\n * @desc    Upload single image\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/image',\r\n  uploadSingleImageMiddleware,\r\n  handleUploadError,\r\n  validateRequest(uploadImageSchema, 'body'),\r\n  uploadSingleImage\r\n);\r\n\r\n/**\r\n * @route   POST /api/uploads/avatar\r\n * @desc    Upload user avatar\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/avatar',\r\n  uploadAvatarMiddleware,\r\n  handleUploadError,\r\n  validateRequest(uploadAvatarSchema, 'body'),\r\n  uploadAvatar\r\n);\r\n\r\n/**\r\n * @route   POST /api/uploads/property-photos\r\n * @desc    Upload property photos (bulk)\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/property-photos',\r\n  uploadPropertyPhotosMiddleware,\r\n  handleUploadError,\r\n  validateRequest(uploadPropertyPhotosSchema, 'body'),\r\n  uploadPropertyPhotos\r\n);\r\n\r\n/**\r\n * @route   POST /api/uploads/message-attachment\r\n * @desc    Upload message attachment\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/message-attachment',\r\n  uploadMessageFile,\r\n  handleUploadError,\r\n  validateRequest(uploadMessageAttachmentSchema, 'body'),\r\n  uploadMessageAttachment\r\n);\r\n\r\n/**\r\n * @route   POST /api/uploads/bulk\r\n * @desc    Bulk upload images\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/bulk',\r\n  uploadMultipleImages,\r\n  handleUploadError,\r\n  validateRequest(bulkUploadSchema, 'body'),\r\n  bulkUploadImages\r\n);\r\n\r\n/**\r\n * @route   DELETE /api/uploads/:publicId\r\n * @desc    Delete uploaded image\r\n * @access  Private\r\n */\r\nrouter.delete(\r\n  '/:publicId',\r\n  deleteUploadedImage\r\n);\r\n\r\n/**\r\n * @route   POST /api/uploads/signed-url\r\n * @desc    Generate signed upload URL for direct client uploads\r\n * @access  Private\r\n */\r\nrouter.post(\r\n  '/signed-url',\r\n  validateRequest(generateUploadUrlSchema, 'body'),\r\n  generateUploadUrl\r\n);\r\n\r\n/**\r\n * @route   GET /api/uploads/health\r\n * @desc    Health check for upload service\r\n * @access  Private\r\n */\r\nrouter.get('/health', (req, res) => {\r\n  res.json({\r\n    success: true,\r\n    message: 'Upload service is healthy',\r\n    timestamp: new Date().toISOString(),\r\n    services: {\r\n      cloudinary: 'connected',\r\n      imageOptimization: 'available',\r\n      fileValidation: 'active'\r\n    }\r\n  });\r\n});\r\n\r\nexport default router;\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2c232287c1e9016b8b0832aeb0aaf2920d547b99"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_os2dsi2td = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_os2dsi2td();
cov_os2dsi2td().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[1]++, require("express"));
const upload_controller_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[2]++, require("../controllers/upload.controller"));
const auth_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[3]++, require("../middleware/auth"));
const validation_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[4]++, require("../middleware/validation"));
const upload_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[5]++, require("../middleware/upload"));
const upload_validators_1 =
/* istanbul ignore next */
(cov_os2dsi2td().s[6]++, require("../validators/upload.validators"));
const router =
/* istanbul ignore next */
(cov_os2dsi2td().s[7]++, (0, express_1.Router)());
// All upload routes require authentication
/* istanbul ignore next */
cov_os2dsi2td().s[8]++;
router.use(auth_1.authenticate);
/**
 * @route   POST /api/uploads/image
 * @desc    Upload single image
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[9]++;
router.post('/image', upload_1.uploadSingleImage, upload_1.handleUploadError, (0, validation_1.validateRequest)(upload_validators_1.uploadImageSchema, 'body'), upload_controller_1.uploadSingleImage);
/**
 * @route   POST /api/uploads/avatar
 * @desc    Upload user avatar
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[10]++;
router.post('/avatar', upload_1.uploadAvatar, upload_1.handleUploadError, (0, validation_1.validateRequest)(upload_validators_1.uploadAvatarSchema, 'body'), upload_controller_1.uploadAvatar);
/**
 * @route   POST /api/uploads/property-photos
 * @desc    Upload property photos (bulk)
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[11]++;
router.post('/property-photos', upload_1.uploadPropertyPhotos, upload_1.handleUploadError, (0, validation_1.validateRequest)(upload_validators_1.uploadPropertyPhotosSchema, 'body'), upload_controller_1.uploadPropertyPhotos);
/**
 * @route   POST /api/uploads/message-attachment
 * @desc    Upload message attachment
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[12]++;
router.post('/message-attachment', upload_1.uploadMessageFile, upload_1.handleUploadError, (0, validation_1.validateRequest)(upload_validators_1.uploadMessageAttachmentSchema, 'body'), upload_controller_1.uploadMessageAttachment);
/**
 * @route   POST /api/uploads/bulk
 * @desc    Bulk upload images
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[13]++;
router.post('/bulk', upload_1.uploadMultipleImages, upload_1.handleUploadError, (0, validation_1.validateRequest)(upload_validators_1.bulkUploadSchema, 'body'), upload_controller_1.bulkUploadImages);
/**
 * @route   DELETE /api/uploads/:publicId
 * @desc    Delete uploaded image
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[14]++;
router.delete('/:publicId', upload_controller_1.deleteUploadedImage);
/**
 * @route   POST /api/uploads/signed-url
 * @desc    Generate signed upload URL for direct client uploads
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[15]++;
router.post('/signed-url', (0, validation_1.validateRequest)(upload_validators_1.generateUploadUrlSchema, 'body'), upload_controller_1.generateUploadUrl);
/**
 * @route   GET /api/uploads/health
 * @desc    Health check for upload service
 * @access  Private
 */
/* istanbul ignore next */
cov_os2dsi2td().s[16]++;
router.get('/health', (req, res) => {
  /* istanbul ignore next */
  cov_os2dsi2td().f[0]++;
  cov_os2dsi2td().s[17]++;
  res.json({
    success: true,
    message: 'Upload service is healthy',
    timestamp: new Date().toISOString(),
    services: {
      cloudinary: 'connected',
      imageOptimization: 'available',
      fileValidation: 'active'
    }
  });
});
/* istanbul ignore next */
cov_os2dsi2td().s[18]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,