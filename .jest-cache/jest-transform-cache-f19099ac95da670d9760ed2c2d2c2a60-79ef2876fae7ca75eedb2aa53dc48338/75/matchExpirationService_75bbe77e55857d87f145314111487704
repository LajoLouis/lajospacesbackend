90beae113d7584f83bf8cedd7093b4ce
"use strict";

/* istanbul ignore next */
function cov_2a8za2xt6w() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchExpirationService.ts";
  var hash = "63f086b1f208ff18631aa1f451daee5766cac624";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchExpirationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 42
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "4": {
        start: {
          line: 6,
          column: 19
        },
        end: {
          line: 6,
          column: 47
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "6": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "7": {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 18,
          column: 14
        }
      },
      "8": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 19,
          column: 27
        }
      },
      "9": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "10": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 26
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 45,
          column: 13
        }
      },
      "12": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 44,
          column: 17
        }
      },
      "13": {
        start: {
          line: 25,
          column: 41
        },
        end: {
          line: 25,
          column: 76
        }
      },
      "14": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 39,
          column: 21
        }
      },
      "15": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 50
        }
      },
      "16": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 43
        }
      },
      "17": {
        start: {
          line: 30,
          column: 24
        },
        end: {
          line: 30,
          column: 35
        }
      },
      "18": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 101
        }
      },
      "19": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 49
        }
      },
      "20": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "21": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "22": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 38,
          column: 100
        }
      },
      "23": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 97
        }
      },
      "24": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 29
        }
      },
      "25": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "26": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 82
        }
      },
      "27": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "28": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 78
        }
      },
      "29": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 84
        }
      },
      "30": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "31": {
        start: {
          line: 66,
          column: 36
        },
        end: {
          line: 66,
          column: 109
        }
      },
      "32": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "33": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "34": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 24
        }
      },
      "36": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "37": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "38": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "39": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "40": {
        start: {
          line: 86,
          column: 34
        },
        end: {
          line: 86,
          column: 44
        }
      },
      "41": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 64
        }
      },
      "42": {
        start: {
          line: 88,
          column: 27
        },
        end: {
          line: 91,
          column: 14
        }
      },
      "43": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 90
        }
      },
      "44": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 96,
          column: 14
        }
      },
      "45": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 75
        }
      },
      "46": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 103,
          column: 14
        }
      },
      "47": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "48": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 34
        }
      },
      "49": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 112,
          column: 74
        }
      },
      "50": {
        start: {
          line: 113,
          column: 112
        },
        end: {
          line: 156,
          column: 14
        }
      },
      "51": {
        start: {
          line: 157,
          column: 41
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "52": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 167,
          column: 14
        }
      },
      "53": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 76
        }
      },
      "54": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 86
        }
      },
      "55": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "56": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 181,
          column: 13
        }
      },
      "57": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 94
        }
      },
      "58": {
        start: {
          line: 182,
          column: 26
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "59": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "60": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 92
        }
      },
      "61": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 41
        }
      },
      "62": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "63": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 41
        }
      },
      "64": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 31
        }
      },
      "65": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 97
        }
      },
      "66": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 25
        }
      },
      "67": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 67
        }
      },
      "68": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 120
        }
      },
      "69": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "70": {
        start: {
          line: 210,
          column: 24
        },
        end: {
          line: 210,
          column: 34
        }
      },
      "71": {
        start: {
          line: 211,
          column: 31
        },
        end: {
          line: 211,
          column: 84
        }
      },
      "72": {
        start: {
          line: 212,
          column: 33
        },
        end: {
          line: 222,
          column: 23
        }
      },
      "73": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 231,
          column: 16
        }
      },
      "74": {
        start: {
          line: 223,
          column: 46
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "75": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 85
        }
      },
      "76": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 81
        }
      },
      "77": {
        start: {
          line: 243,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "78": {
        start: {
          line: 245,
          column: 37
        },
        end: {
          line: 245,
          column: 71
        }
      },
      "79": {
        start: {
          line: 247,
          column: 24
        },
        end: {
          line: 247,
          column: 34
        }
      },
      "80": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "81": {
        start: {
          line: 249,
          column: 38
        },
        end: {
          line: 249,
          column: 68
        }
      },
      "82": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 83
        }
      },
      "83": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 96
        }
      },
      "84": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 86
        }
      },
      "85": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 302,
          column: 9
        }
      },
      "86": {
        start: {
          line: 264,
          column: 36
        },
        end: {
          line: 264,
          column: 77
        }
      },
      "87": {
        start: {
          line: 265,
          column: 36
        },
        end: {
          line: 279,
          column: 23
        }
      },
      "88": {
        start: {
          line: 281,
          column: 38
        },
        end: {
          line: 281,
          column: 47
        }
      },
      "89": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 291,
          column: 15
        }
      },
      "90": {
        start: {
          line: 283,
          column: 31
        },
        end: {
          line: 283,
          column: 58
        }
      },
      "91": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 289,
          column: 17
        }
      },
      "92": {
        start: {
          line: 285,
          column: 20
        },
        end: {
          line: 288,
          column: 23
        }
      },
      "93": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 66
        }
      },
      "94": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "95": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 136
        }
      },
      "96": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 107
        }
      },
      "97": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 84
        }
      },
      "98": {
        start: {
          line: 305,
          column: 0
        },
        end: {
          line: 305,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 41
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 42
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 63
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 37
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 84
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 109
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 56
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 177
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 65
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 208
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 223,
            column: 36
          },
          end: {
            line: 223,
            column: 37
          }
        },
        loc: {
          start: {
            line: 223,
            column: 46
          },
          end: {
            line: 231,
            column: 13
          }
        },
        line: 223
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 48
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 242
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 47
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 261
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 282,
            column: 36
          },
          end: {
            line: 282,
            column: 37
          }
        },
        loc: {
          start: {
            line: 282,
            column: 45
          },
          end: {
            line: 291,
            column: 13
          }
        },
        line: 282
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 20
          },
          end: {
            line: 39,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 20
          },
          end: {
            line: 39,
            column: 21
          }
        }, {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 39,
            column: 21
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 65,
            column: 42
          }
        }, {
          start: {
            line: 65,
            column: 46
          },
          end: {
            line: 65,
            column: 60
          }
        }],
        line: 65
      },
      "3": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "4": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 76,
            column: 42
          }
        }, {
          start: {
            line: 76,
            column: 46
          },
          end: {
            line: 76,
            column: 65
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 94,
            column: 25
          },
          end: {
            line: 94,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 94,
            column: 25
          },
          end: {
            line: 94,
            column: 44
          }
        }, {
          start: {
            line: 94,
            column: 48
          },
          end: {
            line: 94,
            column: 49
          }
        }],
        line: 94
      },
      "8": {
        loc: {
          start: {
            line: 157,
            column: 41
          },
          end: {
            line: 159,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 18
          },
          end: {
            line: 158,
            column: 75
          }
        }, {
          start: {
            line: 159,
            column: 18
          },
          end: {
            line: 159,
            column: 19
          }
        }],
        line: 157
      },
      "9": {
        loc: {
          start: {
            line: 177,
            column: 46
          },
          end: {
            line: 177,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 53
          },
          end: {
            line: 177,
            column: 54
          }
        }],
        line: 177
      },
      "10": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 181,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "11": {
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 179,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 179,
            column: 24
          }
        }, {
          start: {
            line: 179,
            column: 28
          },
          end: {
            line: 179,
            column: 37
          }
        }],
        line: 179
      },
      "12": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "13": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "14": {
        loc: {
          start: {
            line: 202,
            column: 18
          },
          end: {
            line: 202,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 57
          },
          end: {
            line: 202,
            column: 62
          }
        }, {
          start: {
            line: 202,
            column: 65
          },
          end: {
            line: 202,
            column: 119
          }
        }],
        line: 202
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 48
          },
          end: {
            line: 208,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 208,
            column: 61
          },
          end: {
            line: 208,
            column: 63
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "17": {
        loc: {
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchExpirationService.ts",
      mappings: ";;;AAAA,2CAAwC;AACxC,4CAAyC;AACzC,gDAA6C;AAE7C,MAAa,sBAAsB;IAEjC;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,qBAAqB;QAMhC,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YAEvB,2DAA2D;YAC3D,MAAM,cAAc,GAAG,MAAM,aAAK,CAAC,IAAI,CAAC;gBACtC,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;aACxB,CAAC,CAAC;YAEH,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,MAAM,GAAG,CAAC,CAAC;YAEf,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE,CAAC;gBACnC,IAAI,CAAC;oBACH,sDAAsD;oBACtD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;oBAEzD,IAAI,YAAY,EAAE,CAAC;wBACjB,yBAAyB;wBACzB,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;wBACnB,QAAQ,EAAE,CAAC;wBAEX,eAAM,CAAC,IAAI,CAAC,kBAAkB,KAAK,CAAC,GAAG,aAAa,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;oBACtE,CAAC;yBAAM,CAAC;wBACN,kBAAkB;wBAClB,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;wBACzB,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;wBACnB,OAAO,EAAE,CAAC;wBAEV,eAAM,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,GAAG,aAAa,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;oBACrE,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,eAAM,CAAC,KAAK,CAAC,kCAAkC,KAAK,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;oBACpE,MAAM,EAAE,CAAC;gBACX,CAAC;YACH,CAAC;YAED,MAAM,MAAM,GAAG;gBACb,SAAS,EAAE,cAAc,CAAC,MAAM;gBAChC,OAAO;gBACP,QAAQ;gBACR,MAAM;aACP,CAAC;YAEF,eAAM,CAAC,IAAI,CAAC,uCAAuC,EAAE,MAAM,CAAC,CAAC;YAE7D,OAAO,MAAM,CAAC;QAChB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,IAAI,mBAAQ,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAU;QAC/C,wEAAwE;QACxE,IAAI,KAAK,CAAC,kBAAkB,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;YACrD,MAAM,eAAe,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAClG,IAAI,eAAe,IAAI,CAAC,EAAE,CAAC;gBACzB,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,yDAAyD;QACzD,IAAI,KAAK,CAAC,kBAAkB,IAAI,EAAE,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mEAAmE;QACnE,IAAI,KAAK,CAAC,kBAAkB,IAAI,EAAE,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;YAC1D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,iBAAiB;QAI5B,IAAI,CAAC;YACH,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;YACjC,aAAa,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,aAAK,CAAC,UAAU,CAAC;gBACpC,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE;aAClC,CAAC,CAAC;YAEH,eAAM,CAAC,IAAI,CAAC,cAAc,MAAM,CAAC,YAAY,sBAAsB,CAAC,CAAC;YAErE,OAAO;gBACL,OAAO,EAAE,MAAM,CAAC,YAAY,IAAI,CAAC;gBACjC,MAAM,EAAE,CAAC;aACV,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACtD,OAAO;gBACL,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,CAAC;aACV,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,kBAAkB;QAQ7B,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAE/D,MAAM,CACJ,YAAY,EACZ,cAAc,EACd,cAAc,EACd,aAAa,EACb,YAAY,EACZ,cAAc,CACf,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACpB,aAAK,CAAC,cAAc,CAAC,EAAE,CAAC;gBACxB,aAAK,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;gBAC3C,aAAK,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;gBAC3C,aAAK,CAAC,cAAc,CAAC;oBACnB,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE;wBACT,IAAI,EAAE,GAAG;wBACT,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;qBACpE;iBACF,CAAC;gBACF,aAAK,CAAC,cAAc,CAAC;oBACnB,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE;wBACT,IAAI,EAAE,GAAG;wBACT,GAAG,EAAE,QAAQ;qBACd;iBACF,CAAC;gBACF,aAAK,CAAC,SAAS,CAAC;oBACd;wBACE,MAAM,EAAE;4BACN,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,EAAE;4BACnD,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;4BAC5B,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;yBACrC;qBACF;oBACD;wBACE,QAAQ,EAAE;4BACR,QAAQ,EAAE;gCACR,OAAO,EAAE;oCACP,EAAE,SAAS,EAAE,CAAC,oBAAoB,EAAE,YAAY,CAAC,EAAE;oCACnD,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,mBAAmB;iCACnC;6BACF;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE;4BACN,GAAG,EAAE,IAAI;4BACT,eAAe,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;yBACvC;qBACF;iBACF,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC;gBACpD,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,GAAG,CAAC,GAAG,GAAG;gBAC3D,CAAC,CAAC,CAAC,CAAC;YAEN,OAAO;gBACL,YAAY;gBACZ,cAAc;gBACd,cAAc;gBACd,aAAa;gBACb,YAAY;gBACZ,oBAAoB;aACrB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,IAAI,mBAAQ,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,WAAW,CACtB,OAAe,EACf,MAAc,EACd,OAAe,CAAC;QAEhB,IAAI,CAAC;YACH,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE,CAAC;gBAC1B,MAAM,IAAI,mBAAQ,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,KAAK,GAAG,MAAM,aAAK,CAAC,OAAO,CAAC;gBAChC,GAAG,EAAE,OAAO;gBACZ,MAAM;gBACN,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;aACxC,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,mBAAQ,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;YACnE,CAAC;YAED,mBAAmB;YACnB,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAE7B,sCAAsC;YACtC,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;gBAC/B,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;YAC3B,CAAC;YAED,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;YAEnB,eAAM,CAAC,IAAI,CAAC,kBAAkB,OAAO,OAAO,IAAI,kBAAkB,MAAM,EAAE,CAAC,CAAC;YAE5E,OAAO,KAAK,CAAC;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,KAAK,YAAY,mBAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,mBAAQ,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,sBAAsB,CACjC,MAAc,EACd,aAAqB,EAAE;QAEvB,IAAI,CAAC;YACH,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAEzE,MAAM,YAAY,GAAG,MAAM,aAAK,CAAC,IAAI,CAAC;gBACpC,MAAM;gBACN,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE;oBACT,IAAI,EAAE,GAAG;oBACT,GAAG,EAAE,UAAU;iBAChB;aACF,CAAC;iBACD,QAAQ,CAAC,UAAU,EAAE,gDAAgD,CAAC;iBACtE,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;iBACtB,IAAI,EAAE,CAAC;YAER,OAAO,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAChC,EAAE,EAAE,KAAK,CAAC,GAAG;gBACb,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,kBAAkB,EAAE,KAAK,CAAC,kBAAkB;gBAC5C,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;aAC7F,CAAC,CAAC,CAAC;QACN,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,IAAI,mBAAQ,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,4BAA4B;QACvC,IAAI,CAAC;YACH,0BAA0B;YAC1B,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAE5D,6CAA6C;YAC7C,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,sBAAsB;gBAChD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACrD,eAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC;YAED,eAAM,CAAC,IAAI,CAAC,2CAA2C,EAAE,gBAAgB,CAAC,CAAC;QAC7E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,2BAA2B;QACtC,IAAI,CAAC;YACH,0DAA0D;YAC1D,MAAM,eAAe,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAElE,MAAM,eAAe,GAAG,MAAM,aAAK,CAAC,IAAI,CAAC;gBACvC,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE;oBACT,IAAI,EAAE,IAAI,IAAI,EAAE;oBAChB,GAAG,EAAE,eAAe;iBACrB;gBACD,8DAA8D;gBAC9D,GAAG,EAAE;oBACH,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;oBAChC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,6BAA6B;iBAC/F;aACF,CAAC;iBACD,QAAQ,CAAC,QAAQ,EAAE,iBAAiB,CAAC;iBACrC,QAAQ,CAAC,UAAU,EAAE,iBAAiB,CAAC;iBACvC,IAAI,EAAE,CAAC;YAER,gBAAgB;YAChB,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;YAEpC,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC9B,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;gBAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oBACnC,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE;wBAC5B,IAAI,EAAE,KAAK,CAAC,MAAM;wBAClB,OAAO,EAAE,EAAE;qBACZ,CAAC,CAAC;gBACL,CAAC;gBACD,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YAEH,2EAA2E;YAC3E,KAAK,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,iBAAiB,EAAE,CAAC;gBACvD,eAAM,CAAC,IAAI,CAAC,8CAA8C,MAAM,QAAQ,YAAY,CAAC,OAAO,CAAC,MAAM,UAAU,CAAC,CAAC;gBAC/G,4CAA4C;gBAC5C,sGAAsG;YACxG,CAAC;YAED,eAAM,CAAC,IAAI,CAAC,0CAA0C,iBAAiB,CAAC,IAAI,QAAQ,CAAC,CAAC;QACxF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;CACF;AAvWD,wDAuWC",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchExpirationService.ts"],
      sourcesContent: ["import { Match } from '../models/Match';\r\nimport { logger } from '../utils/logger';\r\nimport { AppError } from '../utils/appError';\r\n\r\nexport class MatchExpirationService {\r\n  \r\n  /**\r\n   * Process expired matches and update their status\r\n   */\r\n  static async processExpiredMatches(): Promise<{\r\n    processed: number;\r\n    expired: number;\r\n    extended: number;\r\n    errors: number;\r\n  }> {\r\n    try {\r\n      const now = new Date();\r\n      \r\n      // Find all matches that have expired but are still pending\r\n      const expiredMatches = await Match.find({\r\n        status: 'pending',\r\n        expiresAt: { $lt: now }\r\n      });\r\n\r\n      let expired = 0;\r\n      let extended = 0;\r\n      let errors = 0;\r\n\r\n      for (const match of expiredMatches) {\r\n        try {\r\n          // Check if match should be extended based on activity\r\n          const shouldExtend = await this.shouldExtendMatch(match);\r\n          \r\n          if (shouldExtend) {\r\n            // Extend match by 3 days\r\n            match.extendExpiration(3);\r\n            await match.save();\r\n            extended++;\r\n            \r\n            logger.info(`Extended match ${match._id} for user ${match.userId}`);\r\n          } else {\r\n            // Mark as expired\r\n            match.status = 'expired';\r\n            await match.save();\r\n            expired++;\r\n            \r\n            logger.info(`Expired match ${match._id} for user ${match.userId}`);\r\n          }\r\n        } catch (error) {\r\n          logger.error(`Error processing expired match ${match._id}:`, error);\r\n          errors++;\r\n        }\r\n      }\r\n\r\n      const result = {\r\n        processed: expiredMatches.length,\r\n        expired,\r\n        extended,\r\n        errors\r\n      };\r\n\r\n      logger.info('Match expiration processing completed', result);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      logger.error('Error processing expired matches:', error);\r\n      throw new AppError('Failed to process expired matches', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a match should be extended based on user activity\r\n   */\r\n  private static async shouldExtendMatch(match: any): Promise<boolean> {\r\n    // Extend if match has high compatibility (>85%) and was viewed recently\r\n    if (match.compatibilityScore >= 85 && match.viewedAt) {\r\n      const daysSinceViewed = (new Date().getTime() - match.viewedAt.getTime()) / (1000 * 60 * 60 * 24);\r\n      if (daysSinceViewed <= 2) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Extend if it's a super high compatibility match (>90%)\r\n    if (match.compatibilityScore >= 90) {\r\n      return true;\r\n    }\r\n\r\n    // Extend if user has been active recently and this is a good match\r\n    if (match.compatibilityScore >= 80 && match.viewCount > 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Clean up old expired matches (older than 30 days)\r\n   */\r\n  static async cleanupOldMatches(): Promise<{\r\n    deleted: number;\r\n    errors: number;\r\n  }> {\r\n    try {\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n\r\n      const result = await Match.deleteMany({\r\n        status: 'expired',\r\n        updatedAt: { $lt: thirtyDaysAgo }\r\n      });\r\n\r\n      logger.info(`Cleaned up ${result.deletedCount} old expired matches`);\r\n\r\n      return {\r\n        deleted: result.deletedCount || 0,\r\n        errors: 0\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error cleaning up old matches:', error);\r\n      return {\r\n        deleted: 0,\r\n        errors: 1\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get match expiration statistics\r\n   */\r\n  static async getExpirationStats(): Promise<{\r\n    totalMatches: number;\r\n    pendingMatches: number;\r\n    expiredMatches: number;\r\n    expiringToday: number;\r\n    expiringSoon: number; // within 24 hours\r\n    averageMatchDuration: number; // in hours\r\n  }> {\r\n    try {\r\n      const now = new Date();\r\n      const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r\n\r\n      const [\r\n        totalMatches,\r\n        pendingMatches,\r\n        expiredMatches,\r\n        expiringToday,\r\n        expiringSoon,\r\n        matchDurations\r\n      ] = await Promise.all([\r\n        Match.countDocuments({}),\r\n        Match.countDocuments({ status: 'pending' }),\r\n        Match.countDocuments({ status: 'expired' }),\r\n        Match.countDocuments({\r\n          status: 'pending',\r\n          expiresAt: {\r\n            $gte: now,\r\n            $lt: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1)\r\n          }\r\n        }),\r\n        Match.countDocuments({\r\n          status: 'pending',\r\n          expiresAt: {\r\n            $gte: now,\r\n            $lt: tomorrow\r\n          }\r\n        }),\r\n        Match.aggregate([\r\n          {\r\n            $match: {\r\n              status: { $in: ['matched', 'expired', 'rejected'] },\r\n              createdAt: { $exists: true },\r\n              lastInteractionAt: { $exists: true }\r\n            }\r\n          },\r\n          {\r\n            $project: {\r\n              duration: {\r\n                $divide: [\r\n                  { $subtract: ['$lastInteractionAt', '$createdAt'] },\r\n                  1000 * 60 * 60 // Convert to hours\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          {\r\n            $group: {\r\n              _id: null,\r\n              averageDuration: { $avg: '$duration' }\r\n            }\r\n          }\r\n        ])\r\n      ]);\r\n\r\n      const averageMatchDuration = matchDurations.length > 0 \r\n        ? Math.round(matchDurations[0].averageDuration * 100) / 100 \r\n        : 0;\r\n\r\n      return {\r\n        totalMatches,\r\n        pendingMatches,\r\n        expiredMatches,\r\n        expiringToday,\r\n        expiringSoon,\r\n        averageMatchDuration\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error getting expiration stats:', error);\r\n      throw new AppError('Failed to get expiration statistics', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extend a specific match\r\n   */\r\n  static async extendMatch(\r\n    matchId: string,\r\n    userId: string,\r\n    days: number = 7\r\n  ): Promise<any> {\r\n    try {\r\n      if (days < 1 || days > 30) {\r\n        throw new AppError('Extension days must be between 1 and 30', 400);\r\n      }\r\n\r\n      const match = await Match.findOne({\r\n        _id: matchId,\r\n        userId,\r\n        status: { $in: ['pending', 'expired'] }\r\n      });\r\n\r\n      if (!match) {\r\n        throw new AppError('Match not found or cannot be extended', 404);\r\n      }\r\n\r\n      // Extend the match\r\n      match.extendExpiration(days);\r\n      \r\n      // If match was expired, reactivate it\r\n      if (match.status === 'expired') {\r\n        match.status = 'pending';\r\n      }\r\n\r\n      await match.save();\r\n\r\n      logger.info(`Extended match ${matchId} by ${days} days for user ${userId}`);\r\n\r\n      return match;\r\n    } catch (error) {\r\n      logger.error('Error extending match:', error);\r\n      throw error instanceof AppError ? error : new AppError('Failed to extend match', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get matches expiring soon for a user\r\n   */\r\n  static async getExpiringSoonForUser(\r\n    userId: string,\r\n    hoursAhead: number = 24\r\n  ): Promise<any[]> {\r\n    try {\r\n      const now = new Date();\r\n      const futureTime = new Date(now.getTime() + hoursAhead * 60 * 60 * 1000);\r\n\r\n      const expiringSoon = await Match.find({\r\n        userId,\r\n        status: 'pending',\r\n        expiresAt: {\r\n          $gte: now,\r\n          $lt: futureTime\r\n        }\r\n      })\r\n      .populate('targetId', 'firstName lastName title propertyType location')\r\n      .sort({ expiresAt: 1 })\r\n      .lean();\r\n\r\n      return expiringSoon.map(match => ({\r\n        id: match._id,\r\n        targetId: match.targetId,\r\n        targetType: match.targetType,\r\n        matchType: match.matchType,\r\n        compatibilityScore: match.compatibilityScore,\r\n        expiresAt: match.expiresAt,\r\n        hoursUntilExpiry: Math.round((match.expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60))\r\n      }));\r\n    } catch (error) {\r\n      logger.error('Error getting expiring matches for user:', error);\r\n      throw new AppError('Failed to get expiring matches', 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule automatic match expiration processing\r\n   * This would typically be called by a cron job or scheduler\r\n   */\r\n  static async scheduleExpirationProcessing(): Promise<void> {\r\n    try {\r\n      // Process expired matches\r\n      const expirationResult = await this.processExpiredMatches();\r\n      \r\n      // Clean up old matches (run less frequently)\r\n      const now = new Date();\r\n      if (now.getHours() === 2) { // Run cleanup at 2 AM\r\n        const cleanupResult = await this.cleanupOldMatches();\r\n        logger.info('Scheduled cleanup completed', cleanupResult);\r\n      }\r\n\r\n      logger.info('Scheduled expiration processing completed', expirationResult);\r\n    } catch (error) {\r\n      logger.error('Error in scheduled expiration processing:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send expiration notifications (placeholder for notification service)\r\n   */\r\n  static async sendExpirationNotifications(): Promise<void> {\r\n    try {\r\n      // Get all users with matches expiring in the next 6 hours\r\n      const sixHoursFromNow = new Date(Date.now() + 6 * 60 * 60 * 1000);\r\n      \r\n      const expiringMatches = await Match.find({\r\n        status: 'pending',\r\n        expiresAt: {\r\n          $gte: new Date(),\r\n          $lt: sixHoursFromNow\r\n        },\r\n        // Only send notification if match hasn't been viewed recently\r\n        $or: [\r\n          { viewedAt: { $exists: false } },\r\n          { viewedAt: { $lt: new Date(Date.now() - 2 * 60 * 60 * 1000) } } // Not viewed in last 2 hours\r\n        ]\r\n      })\r\n      .populate('userId', 'email firstName')\r\n      .populate('targetId', 'firstName title')\r\n      .lean();\r\n\r\n      // Group by user\r\n      const userNotifications = new Map();\r\n      \r\n      expiringMatches.forEach(match => {\r\n        const userId = match.userId._id.toString();\r\n        if (!userNotifications.has(userId)) {\r\n          userNotifications.set(userId, {\r\n            user: match.userId,\r\n            matches: []\r\n          });\r\n        }\r\n        userNotifications.get(userId).matches.push(match);\r\n      });\r\n\r\n      // Send notifications (this would integrate with your notification service)\r\n      for (const [userId, notification] of userNotifications) {\r\n        logger.info(`Would send expiration notification to user ${userId} for ${notification.matches.length} matches`);\r\n        // TODO: Integrate with notification service\r\n        // await NotificationService.sendMatchExpirationNotification(notification.user, notification.matches);\r\n      }\r\n\r\n      logger.info(`Processed expiration notifications for ${userNotifications.size} users`);\r\n    } catch (error) {\r\n      logger.error('Error sending expiration notifications:', error);\r\n    }\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "63f086b1f208ff18631aa1f451daee5766cac624"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2a8za2xt6w = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2a8za2xt6w();
cov_2a8za2xt6w().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2a8za2xt6w().s[1]++;
exports.MatchExpirationService = void 0;
const Match_1 =
/* istanbul ignore next */
(cov_2a8za2xt6w().s[2]++, require("../models/Match"));
const logger_1 =
/* istanbul ignore next */
(cov_2a8za2xt6w().s[3]++, require("../utils/logger"));
const appError_1 =
/* istanbul ignore next */
(cov_2a8za2xt6w().s[4]++, require("../utils/appError"));
class MatchExpirationService {
  /**
   * Process expired matches and update their status
   */
  static async processExpiredMatches() {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[0]++;
    cov_2a8za2xt6w().s[5]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[6]++, new Date());
      // Find all matches that have expired but are still pending
      const expiredMatches =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[7]++, await Match_1.Match.find({
        status: 'pending',
        expiresAt: {
          $lt: now
        }
      }));
      let expired =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[8]++, 0);
      let extended =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[9]++, 0);
      let errors =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[10]++, 0);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[11]++;
      for (const match of expiredMatches) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().s[12]++;
        try {
          // Check if match should be extended based on activity
          const shouldExtend =
          /* istanbul ignore next */
          (cov_2a8za2xt6w().s[13]++, await this.shouldExtendMatch(match));
          /* istanbul ignore next */
          cov_2a8za2xt6w().s[14]++;
          if (shouldExtend) {
            /* istanbul ignore next */
            cov_2a8za2xt6w().b[0][0]++;
            cov_2a8za2xt6w().s[15]++;
            // Extend match by 3 days
            match.extendExpiration(3);
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[16]++;
            await match.save();
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[17]++;
            extended++;
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[18]++;
            logger_1.logger.info(`Extended match ${match._id} for user ${match.userId}`);
          } else {
            /* istanbul ignore next */
            cov_2a8za2xt6w().b[0][1]++;
            cov_2a8za2xt6w().s[19]++;
            // Mark as expired
            match.status = 'expired';
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[20]++;
            await match.save();
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[21]++;
            expired++;
            /* istanbul ignore next */
            cov_2a8za2xt6w().s[22]++;
            logger_1.logger.info(`Expired match ${match._id} for user ${match.userId}`);
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2a8za2xt6w().s[23]++;
          logger_1.logger.error(`Error processing expired match ${match._id}:`, error);
          /* istanbul ignore next */
          cov_2a8za2xt6w().s[24]++;
          errors++;
        }
      }
      const result =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[25]++, {
        processed: expiredMatches.length,
        expired,
        extended,
        errors
      });
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[26]++;
      logger_1.logger.info('Match expiration processing completed', result);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[27]++;
      return result;
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[28]++;
      logger_1.logger.error('Error processing expired matches:', error);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[29]++;
      throw new appError_1.AppError('Failed to process expired matches', 500);
    }
  }
  /**
   * Check if a match should be extended based on user activity
   */
  static async shouldExtendMatch(match) {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[1]++;
    cov_2a8za2xt6w().s[30]++;
    // Extend if match has high compatibility (>85%) and was viewed recently
    if (
    /* istanbul ignore next */
    (cov_2a8za2xt6w().b[2][0]++, match.compatibilityScore >= 85) &&
    /* istanbul ignore next */
    (cov_2a8za2xt6w().b[2][1]++, match.viewedAt)) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().b[1][0]++;
      const daysSinceViewed =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[31]++, (new Date().getTime() - match.viewedAt.getTime()) / (1000 * 60 * 60 * 24));
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[32]++;
      if (daysSinceViewed <= 2) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().b[3][0]++;
        cov_2a8za2xt6w().s[33]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_2a8za2xt6w().b[3][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2a8za2xt6w().b[1][1]++;
    }
    // Extend if it's a super high compatibility match (>90%)
    cov_2a8za2xt6w().s[34]++;
    if (match.compatibilityScore >= 90) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().b[4][0]++;
      cov_2a8za2xt6w().s[35]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2a8za2xt6w().b[4][1]++;
    }
    // Extend if user has been active recently and this is a good match
    cov_2a8za2xt6w().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_2a8za2xt6w().b[6][0]++, match.compatibilityScore >= 80) &&
    /* istanbul ignore next */
    (cov_2a8za2xt6w().b[6][1]++, match.viewCount > 0)) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().b[5][0]++;
      cov_2a8za2xt6w().s[37]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_2a8za2xt6w().b[5][1]++;
    }
    cov_2a8za2xt6w().s[38]++;
    return false;
  }
  /**
   * Clean up old expired matches (older than 30 days)
   */
  static async cleanupOldMatches() {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[2]++;
    cov_2a8za2xt6w().s[39]++;
    try {
      const thirtyDaysAgo =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[40]++, new Date());
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[41]++;
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const result =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[42]++, await Match_1.Match.deleteMany({
        status: 'expired',
        updatedAt: {
          $lt: thirtyDaysAgo
        }
      }));
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[43]++;
      logger_1.logger.info(`Cleaned up ${result.deletedCount} old expired matches`);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[44]++;
      return {
        deleted:
        /* istanbul ignore next */
        (cov_2a8za2xt6w().b[7][0]++, result.deletedCount) ||
        /* istanbul ignore next */
        (cov_2a8za2xt6w().b[7][1]++, 0),
        errors: 0
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[45]++;
      logger_1.logger.error('Error cleaning up old matches:', error);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[46]++;
      return {
        deleted: 0,
        errors: 1
      };
    }
  }
  /**
   * Get match expiration statistics
   */
  static async getExpirationStats() {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[3]++;
    cov_2a8za2xt6w().s[47]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[48]++, new Date());
      const tomorrow =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[49]++, new Date(now.getTime() + 24 * 60 * 60 * 1000));
      const [totalMatches, pendingMatches, expiredMatches, expiringToday, expiringSoon, matchDurations] =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[50]++, await Promise.all([Match_1.Match.countDocuments({}), Match_1.Match.countDocuments({
        status: 'pending'
      }), Match_1.Match.countDocuments({
        status: 'expired'
      }), Match_1.Match.countDocuments({
        status: 'pending',
        expiresAt: {
          $gte: now,
          $lt: new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1)
        }
      }), Match_1.Match.countDocuments({
        status: 'pending',
        expiresAt: {
          $gte: now,
          $lt: tomorrow
        }
      }), Match_1.Match.aggregate([{
        $match: {
          status: {
            $in: ['matched', 'expired', 'rejected']
          },
          createdAt: {
            $exists: true
          },
          lastInteractionAt: {
            $exists: true
          }
        }
      }, {
        $project: {
          duration: {
            $divide: [{
              $subtract: ['$lastInteractionAt', '$createdAt']
            }, 1000 * 60 * 60 // Convert to hours
            ]
          }
        }
      }, {
        $group: {
          _id: null,
          averageDuration: {
            $avg: '$duration'
          }
        }
      }])]));
      const averageMatchDuration =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[51]++, matchDurations.length > 0 ?
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[8][0]++, Math.round(matchDurations[0].averageDuration * 100) / 100) :
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[8][1]++, 0));
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[52]++;
      return {
        totalMatches,
        pendingMatches,
        expiredMatches,
        expiringToday,
        expiringSoon,
        averageMatchDuration
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[53]++;
      logger_1.logger.error('Error getting expiration stats:', error);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[54]++;
      throw new appError_1.AppError('Failed to get expiration statistics', 500);
    }
  }
  /**
   * Extend a specific match
   */
  static async extendMatch(matchId, userId, days =
  /* istanbul ignore next */
  (cov_2a8za2xt6w().b[9][0]++, 7)) {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[4]++;
    cov_2a8za2xt6w().s[55]++;
    try {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[56]++;
      if (
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[11][0]++, days < 1) ||
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[11][1]++, days > 30)) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().b[10][0]++;
        cov_2a8za2xt6w().s[57]++;
        throw new appError_1.AppError('Extension days must be between 1 and 30', 400);
      } else
      /* istanbul ignore next */
      {
        cov_2a8za2xt6w().b[10][1]++;
      }
      const match =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[58]++, await Match_1.Match.findOne({
        _id: matchId,
        userId,
        status: {
          $in: ['pending', 'expired']
        }
      }));
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[59]++;
      if (!match) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().b[12][0]++;
        cov_2a8za2xt6w().s[60]++;
        throw new appError_1.AppError('Match not found or cannot be extended', 404);
      } else
      /* istanbul ignore next */
      {
        cov_2a8za2xt6w().b[12][1]++;
      }
      // Extend the match
      cov_2a8za2xt6w().s[61]++;
      match.extendExpiration(days);
      // If match was expired, reactivate it
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[62]++;
      if (match.status === 'expired') {
        /* istanbul ignore next */
        cov_2a8za2xt6w().b[13][0]++;
        cov_2a8za2xt6w().s[63]++;
        match.status = 'pending';
      } else
      /* istanbul ignore next */
      {
        cov_2a8za2xt6w().b[13][1]++;
      }
      cov_2a8za2xt6w().s[64]++;
      await match.save();
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[65]++;
      logger_1.logger.info(`Extended match ${matchId} by ${days} days for user ${userId}`);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[66]++;
      return match;
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[67]++;
      logger_1.logger.error('Error extending match:', error);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[68]++;
      throw error instanceof appError_1.AppError ?
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[14][0]++, error) :
      /* istanbul ignore next */
      (cov_2a8za2xt6w().b[14][1]++, new appError_1.AppError('Failed to extend match', 500));
    }
  }
  /**
   * Get matches expiring soon for a user
   */
  static async getExpiringSoonForUser(userId, hoursAhead =
  /* istanbul ignore next */
  (cov_2a8za2xt6w().b[15][0]++, 24)) {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[5]++;
    cov_2a8za2xt6w().s[69]++;
    try {
      const now =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[70]++, new Date());
      const futureTime =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[71]++, new Date(now.getTime() + hoursAhead * 60 * 60 * 1000));
      const expiringSoon =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[72]++, await Match_1.Match.find({
        userId,
        status: 'pending',
        expiresAt: {
          $gte: now,
          $lt: futureTime
        }
      }).populate('targetId', 'firstName lastName title propertyType location').sort({
        expiresAt: 1
      }).lean());
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[73]++;
      return expiringSoon.map(match => {
        /* istanbul ignore next */
        cov_2a8za2xt6w().f[6]++;
        cov_2a8za2xt6w().s[74]++;
        return {
          id: match._id,
          targetId: match.targetId,
          targetType: match.targetType,
          matchType: match.matchType,
          compatibilityScore: match.compatibilityScore,
          expiresAt: match.expiresAt,
          hoursUntilExpiry: Math.round((match.expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60))
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[75]++;
      logger_1.logger.error('Error getting expiring matches for user:', error);
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[76]++;
      throw new appError_1.AppError('Failed to get expiring matches', 500);
    }
  }
  /**
   * Schedule automatic match expiration processing
   * This would typically be called by a cron job or scheduler
   */
  static async scheduleExpirationProcessing() {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[7]++;
    cov_2a8za2xt6w().s[77]++;
    try {
      // Process expired matches
      const expirationResult =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[78]++, await this.processExpiredMatches());
      // Clean up old matches (run less frequently)
      const now =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[79]++, new Date());
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[80]++;
      if (now.getHours() === 2) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().b[16][0]++;
        // Run cleanup at 2 AM
        const cleanupResult =
        /* istanbul ignore next */
        (cov_2a8za2xt6w().s[81]++, await this.cleanupOldMatches());
        /* istanbul ignore next */
        cov_2a8za2xt6w().s[82]++;
        logger_1.logger.info('Scheduled cleanup completed', cleanupResult);
      } else
      /* istanbul ignore next */
      {
        cov_2a8za2xt6w().b[16][1]++;
      }
      cov_2a8za2xt6w().s[83]++;
      logger_1.logger.info('Scheduled expiration processing completed', expirationResult);
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[84]++;
      logger_1.logger.error('Error in scheduled expiration processing:', error);
    }
  }
  /**
   * Send expiration notifications (placeholder for notification service)
   */
  static async sendExpirationNotifications() {
    /* istanbul ignore next */
    cov_2a8za2xt6w().f[8]++;
    cov_2a8za2xt6w().s[85]++;
    try {
      // Get all users with matches expiring in the next 6 hours
      const sixHoursFromNow =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[86]++, new Date(Date.now() + 6 * 60 * 60 * 1000));
      const expiringMatches =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[87]++, await Match_1.Match.find({
        status: 'pending',
        expiresAt: {
          $gte: new Date(),
          $lt: sixHoursFromNow
        },
        // Only send notification if match hasn't been viewed recently
        $or: [{
          viewedAt: {
            $exists: false
          }
        }, {
          viewedAt: {
            $lt: new Date(Date.now() - 2 * 60 * 60 * 1000)
          }
        } // Not viewed in last 2 hours
        ]
      }).populate('userId', 'email firstName').populate('targetId', 'firstName title').lean());
      // Group by user
      const userNotifications =
      /* istanbul ignore next */
      (cov_2a8za2xt6w().s[88]++, new Map());
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[89]++;
      expiringMatches.forEach(match => {
        /* istanbul ignore next */
        cov_2a8za2xt6w().f[9]++;
        const userId =
        /* istanbul ignore next */
        (cov_2a8za2xt6w().s[90]++, match.userId._id.toString());
        /* istanbul ignore next */
        cov_2a8za2xt6w().s[91]++;
        if (!userNotifications.has(userId)) {
          /* istanbul ignore next */
          cov_2a8za2xt6w().b[17][0]++;
          cov_2a8za2xt6w().s[92]++;
          userNotifications.set(userId, {
            user: match.userId,
            matches: []
          });
        } else
        /* istanbul ignore next */
        {
          cov_2a8za2xt6w().b[17][1]++;
        }
        cov_2a8za2xt6w().s[93]++;
        userNotifications.get(userId).matches.push(match);
      });
      // Send notifications (this would integrate with your notification service)
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[94]++;
      for (const [userId, notification] of userNotifications) {
        /* istanbul ignore next */
        cov_2a8za2xt6w().s[95]++;
        logger_1.logger.info(`Would send expiration notification to user ${userId} for ${notification.matches.length} matches`);
        // TODO: Integrate with notification service
        // await NotificationService.sendMatchExpirationNotification(notification.user, notification.matches);
      }
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[96]++;
      logger_1.logger.info(`Processed expiration notifications for ${userNotifications.size} users`);
    } catch (error) {
      /* istanbul ignore next */
      cov_2a8za2xt6w().s[97]++;
      logger_1.logger.error('Error sending expiration notifications:', error);
    }
  }
}
/* istanbul ignore next */
cov_2a8za2xt6w().s[98]++;
exports.MatchExpirationService = MatchExpirationService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,