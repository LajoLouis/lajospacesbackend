9cf90010f6fc981b5485de1b2c31a0d6
"use strict";

/* istanbul ignore next */
function cov_f3c4du3yo() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\imageOptimizationService.ts";
  var hash = "fbd78dc032f75071faaeab4f325e462dc25c0885";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\imageOptimizationService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 56
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 38
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 48
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "8": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "9": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "10": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "11": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 56
        }
      },
      "12": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "13": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "14": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "15": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 49
        }
      },
      "16": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "17": {
        start: {
          line: 20,
          column: 19
        },
        end: {
          line: 20,
          column: 47
        }
      },
      "18": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "19": {
        start: {
          line: 46,
          column: 0
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "20": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "21": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "22": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 50
        }
      },
      "23": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 66,
          column: 11
        }
      },
      "24": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "25": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 49
        }
      },
      "26": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "27": {
        start: {
          line: 73,
          column: 34
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "28": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "29": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 62
        }
      },
      "30": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 54
        }
      },
      "31": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "32": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 51
        }
      },
      "33": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "34": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 42
        }
      },
      "35": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 44
        }
      },
      "37": {
        start: {
          line: 95,
          column: 23
        },
        end: {
          line: 95,
          column: 47
        }
      },
      "38": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 76
        }
      },
      "39": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "40": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 102,
          column: 15
        }
      },
      "41": {
        start: {
          line: 104,
          column: 13
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "42": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 15
        }
      },
      "43": {
        start: {
          line: 109,
          column: 13
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "44": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 113,
          column: 15
        }
      },
      "45": {
        start: {
          line: 115,
          column: 32
        },
        end: {
          line: 115,
          column: 57
        }
      },
      "46": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 31
        }
      },
      "48": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 66
        }
      },
      "49": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 71
        }
      },
      "50": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "51": {
        start: {
          line: 133,
          column: 22
        },
        end: {
          line: 133,
          column: 55
        }
      },
      "52": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 26
        }
      },
      "53": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "54": {
        start: {
          line: 136,
          column: 36
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "55": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 48
        }
      },
      "56": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 23
        }
      },
      "57": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 70
        }
      },
      "58": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "59": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 162,
          column: 7
        }
      },
      "60": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "61": {
        start: {
          line: 169,
          column: 25
        },
        end: {
          line: 169,
          column: 75
        }
      },
      "62": {
        start: {
          line: 171,
          column: 29
        },
        end: {
          line: 171,
          column: 72
        }
      },
      "63": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 178,
          column: 11
        }
      },
      "64": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 63
        }
      },
      "65": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 182,
          column: 79
        }
      },
      "66": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "67": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 196,
          column: 24
        }
      },
      "68": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 73
        }
      },
      "69": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 80
        }
      },
      "70": {
        start: {
          line: 207,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "71": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 213,
          column: 24
        }
      },
      "72": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 63
        }
      },
      "73": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 72
        }
      },
      "74": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 239,
          column: 5
        }
      },
      "75": {
        start: {
          line: 225,
          column: 25
        },
        end: {
          line: 225,
          column: 75
        }
      },
      "76": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 234,
          column: 10
        }
      },
      "77": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 67
        }
      },
      "78": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 79
        }
      },
      "79": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 265,
          column: 5
        }
      },
      "80": {
        start: {
          line: 247,
          column: 25
        },
        end: {
          line: 247,
          column: 75
        }
      },
      "81": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "82": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 25
        }
      },
      "83": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "84": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "85": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 259,
          column: 24
        }
      },
      "86": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 20
        }
      },
      "87": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 74
        }
      },
      "88": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 21
        }
      },
      "89": {
        start: {
          line: 271,
          column: 4
        },
        end: {
          line: 279,
          column: 5
        }
      },
      "90": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 274,
          column: 24
        }
      },
      "91": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 64
        }
      },
      "92": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 74
        }
      },
      "93": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "94": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 288,
          column: 24
        }
      },
      "95": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 66
        }
      },
      "96": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 71
        }
      },
      "97": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 306,
          column: 5
        }
      },
      "98": {
        start: {
          line: 300,
          column: 25
        },
        end: {
          line: 300,
          column: 92
        }
      },
      "99": {
        start: {
          line: 300,
          column: 61
        },
        end: {
          line: 300,
          column: 91
        }
      },
      "100": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 43
        }
      },
      "101": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 304,
          column: 66
        }
      },
      "102": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 78
        }
      },
      "103": {
        start: {
          line: 308,
          column: 0
        },
        end: {
          line: 322,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "optimizeImage",
        decl: {
          start: {
            line: 56,
            column: 15
          },
          end: {
            line: 56,
            column: 28
          }
        },
        loc: {
          start: {
            line: 56,
            column: 56
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "generateImageSizes",
        decl: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 131,
            column: 33
          }
        },
        loc: {
          start: {
            line: 131,
            column: 61
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 131
      },
      "3": {
        name: "createThumbnail",
        decl: {
          start: {
            line: 154,
            column: 15
          },
          end: {
            line: 154,
            column: 30
          }
        },
        loc: {
          start: {
            line: 154,
            column: 71
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 154
      },
      "4": {
        name: "compressForWeb",
        decl: {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 167,
            column: 29
          }
        },
        loc: {
          start: {
            line: 167,
            column: 105
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 167
      },
      "5": {
        name: "createProgressiveJPEG",
        decl: {
          start: {
            line: 188,
            column: 15
          },
          end: {
            line: 188,
            column: 36
          }
        },
        loc: {
          start: {
            line: 188,
            column: 95
          },
          end: {
            line: 202,
            column: 1
          }
        },
        line: 188
      },
      "6": {
        name: "convertToWebP",
        decl: {
          start: {
            line: 206,
            column: 15
          },
          end: {
            line: 206,
            column: 28
          }
        },
        loc: {
          start: {
            line: 206,
            column: 87
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 206
      },
      "7": {
        name: "extractImageMetadata",
        decl: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 35
          }
        },
        loc: {
          start: {
            line: 223,
            column: 49
          },
          end: {
            line: 240,
            column: 1
          }
        },
        line: 223
      },
      "8": {
        name: "validateImageIntegrity",
        decl: {
          start: {
            line: 244,
            column: 15
          },
          end: {
            line: 244,
            column: 37
          }
        },
        loc: {
          start: {
            line: 244,
            column: 51
          },
          end: {
            line: 266,
            column: 1
          }
        },
        line: 244
      },
      "9": {
        name: "autoOrientImage",
        decl: {
          start: {
            line: 270,
            column: 15
          },
          end: {
            line: 270,
            column: 30
          }
        },
        loc: {
          start: {
            line: 270,
            column: 44
          },
          end: {
            line: 280,
            column: 1
          }
        },
        line: 270
      },
      "10": {
        name: "sanitizeImage",
        decl: {
          start: {
            line: 284,
            column: 15
          },
          end: {
            line: 284,
            column: 28
          }
        },
        loc: {
          start: {
            line: 284,
            column: 42
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 284
      },
      "11": {
        name: "batchOptimizeImages",
        decl: {
          start: {
            line: 298,
            column: 15
          },
          end: {
            line: 298,
            column: 34
          }
        },
        loc: {
          start: {
            line: 298,
            column: 43
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 298
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 300,
            column: 36
          },
          end: {
            line: 300,
            column: 37
          }
        },
        loc: {
          start: {
            line: 300,
            column: 61
          },
          end: {
            line: 300,
            column: 91
          }
        },
        line: 300
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 42
          },
          end: {
            line: 56,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 56,
            column: 52
          },
          end: {
            line: 56,
            column: 54
          }
        }],
        line: 56
      },
      "4": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 25
          }
        }, {
          start: {
            line: 72,
            column: 29
          },
          end: {
            line: 72,
            column: 43
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 76,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 76,
            column: 33
          }
        }, {
          start: {
            line: 76,
            column: 37
          },
          end: {
            line: 76,
            column: 44
          }
        }],
        line: 76
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 87,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "11": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "12": {
        loc: {
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 23
          },
          end: {
            line: 95,
            column: 37
          }
        }, {
          start: {
            line: 95,
            column: 41
          },
          end: {
            line: 95,
            column: 47
          }
        }],
        line: 95
      },
      "13": {
        loc: {
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 24
          },
          end: {
            line: 96,
            column: 39
          }
        }, {
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 76
          }
        }],
        line: 96
      },
      "14": {
        loc: {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 97
      },
      "15": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 29
          }
        }, {
          start: {
            line: 97,
            column: 34
          },
          end: {
            line: 97,
            column: 51
          }
        }, {
          start: {
            line: 97,
            column: 55
          },
          end: {
            line: 97,
            column: 80
          }
        }],
        line: 97
      },
      "16": {
        loc: {
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        }],
        line: 104
      },
      "17": {
        loc: {
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "18": {
        loc: {
          start: {
            line: 154,
            column: 44
          },
          end: {
            line: 154,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 154,
            column: 52
          },
          end: {
            line: 154,
            column: 55
          }
        }],
        line: 154
      },
      "19": {
        loc: {
          start: {
            line: 154,
            column: 57
          },
          end: {
            line: 154,
            column: 69
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 154,
            column: 66
          },
          end: {
            line: 154,
            column: 69
          }
        }],
        line: 154
      },
      "20": {
        loc: {
          start: {
            line: 167,
            column: 43
          },
          end: {
            line: 167,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 54
          },
          end: {
            line: 167,
            column: 58
          }
        }],
        line: 167
      },
      "21": {
        loc: {
          start: {
            line: 167,
            column: 60
          },
          end: {
            line: 167,
            column: 103
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 70
          },
          end: {
            line: 167,
            column: 103
          }
        }],
        line: 167
      },
      "22": {
        loc: {
          start: {
            line: 171,
            column: 29
          },
          end: {
            line: 171,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 29
          },
          end: {
            line: 171,
            column: 43
          }
        }, {
          start: {
            line: 171,
            column: 47
          },
          end: {
            line: 171,
            column: 72
          }
        }],
        line: 171
      },
      "23": {
        loc: {
          start: {
            line: 173,
            column: 19
          },
          end: {
            line: 173,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 34
          },
          end: {
            line: 173,
            column: 42
          }
        }, {
          start: {
            line: 173,
            column: 45
          },
          end: {
            line: 173,
            column: 54
          }
        }],
        line: 173
      },
      "24": {
        loc: {
          start: {
            line: 188,
            column: 50
          },
          end: {
            line: 188,
            column: 93
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 188,
            column: 60
          },
          end: {
            line: 188,
            column: 93
          }
        }],
        line: 188
      },
      "25": {
        loc: {
          start: {
            line: 206,
            column: 42
          },
          end: {
            line: 206,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 206,
            column: 52
          },
          end: {
            line: 206,
            column: 85
          }
        }],
        line: 206
      },
      "26": {
        loc: {
          start: {
            line: 227,
            column: 19
          },
          end: {
            line: 227,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 19
          },
          end: {
            line: 227,
            column: 33
          }
        }, {
          start: {
            line: 227,
            column: 37
          },
          end: {
            line: 227,
            column: 38
          }
        }],
        line: 227
      },
      "27": {
        loc: {
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 228,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 228,
            column: 35
          }
        }, {
          start: {
            line: 228,
            column: 39
          },
          end: {
            line: 228,
            column: 40
          }
        }],
        line: 228
      },
      "28": {
        loc: {
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 35
          }
        }, {
          start: {
            line: 229,
            column: 39
          },
          end: {
            line: 229,
            column: 48
          }
        }],
        line: 229
      },
      "29": {
        loc: {
          start: {
            line: 231,
            column: 22
          },
          end: {
            line: 231,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 22
          },
          end: {
            line: 231,
            column: 39
          }
        }, {
          start: {
            line: 231,
            column: 43
          },
          end: {
            line: 231,
            column: 48
          }
        }],
        line: 231
      },
      "30": {
        loc: {
          start: {
            line: 232,
            column: 24
          },
          end: {
            line: 232,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 24
          },
          end: {
            line: 232,
            column: 38
          }
        }, {
          start: {
            line: 232,
            column: 42
          },
          end: {
            line: 232,
            column: 51
          }
        }],
        line: 232
      },
      "31": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "32": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 249,
            column: 27
          }
        }, {
          start: {
            line: 249,
            column: 31
          },
          end: {
            line: 249,
            column: 47
          }
        }, {
          start: {
            line: 249,
            column: 51
          },
          end: {
            line: 249,
            column: 70
          }
        }, {
          start: {
            line: 249,
            column: 74
          },
          end: {
            line: 249,
            column: 94
          }
        }],
        line: 249
      },
      "33": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "34": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 252,
            column: 28
          }
        }, {
          start: {
            line: 252,
            column: 32
          },
          end: {
            line: 252,
            column: 104
          }
        }],
        line: 252
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\imageOptimizationService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\imageOptimizationService.ts"],
      sourcesContent: ["import sharp from 'sharp';\r\nimport { logger } from '../utils/logger';\r\nimport { AppError } from '../utils/appError';\r\n\r\n// Image optimization options\r\ninterface OptimizationOptions {\r\n  width?: number;\r\n  height?: number;\r\n  quality?: number;\r\n  format?: 'jpeg' | 'png' | 'webp' | 'auto';\r\n  crop?: 'cover' | 'contain' | 'fill' | 'inside' | 'outside';\r\n  background?: string;\r\n  blur?: number;\r\n  sharpen?: boolean;\r\n  grayscale?: boolean;\r\n  removeMetadata?: boolean;\r\n}\r\n\r\n// Predefined image sizes for different use cases\r\nexport const IMAGE_SIZES = {\r\n  avatar: {\r\n    thumbnail: { width: 50, height: 50, crop: 'cover' as const },\r\n    small: { width: 100, height: 100, crop: 'cover' as const },\r\n    medium: { width: 200, height: 200, crop: 'cover' as const },\r\n    large: { width: 400, height: 400, crop: 'cover' as const }\r\n  },\r\n  property: {\r\n    thumbnail: { width: 300, height: 200, crop: 'cover' as const },\r\n    small: { width: 600, height: 400, crop: 'cover' as const },\r\n    medium: { width: 1200, height: 800, crop: 'cover' as const },\r\n    large: { width: 1920, height: 1280, crop: 'inside' as const },\r\n    hero: { width: 2400, height: 1600, crop: 'cover' as const }\r\n  },\r\n  message: {\r\n    thumbnail: { width: 150, height: 150, crop: 'cover' as const },\r\n    preview: { width: 400, height: 300, crop: 'inside' as const },\r\n    full: { width: 1200, height: 900, crop: 'inside' as const }\r\n  },\r\n  document: {\r\n    preview: { width: 200, height: 260, crop: 'inside' as const }\r\n  }\r\n};\r\n\r\n// Quality settings for different use cases\r\nexport const QUALITY_SETTINGS = {\r\n  thumbnail: 70,\r\n  preview: 80,\r\n  standard: 85,\r\n  high: 90,\r\n  lossless: 100\r\n};\r\n\r\n/**\r\n * Optimize image with Sharp\r\n */\r\nexport async function optimizeImage(\r\n  inputBuffer: Buffer,\r\n  options: OptimizationOptions = {}\r\n): Promise<Buffer> {\r\n  try {\r\n    let pipeline = sharp(inputBuffer);\r\n\r\n    // Get image metadata\r\n    const metadata = await pipeline.metadata();\r\n    logger.info('Processing image:', {\r\n      width: metadata.width,\r\n      height: metadata.height,\r\n      format: metadata.format,\r\n      size: inputBuffer.length\r\n    });\r\n\r\n    // Remove metadata if requested (default: true for privacy)\r\n    if (options.removeMetadata !== false) {\r\n      pipeline = pipeline.withMetadata({});\r\n    }\r\n\r\n    // Resize image if dimensions specified\r\n    if (options.width || options.height) {\r\n      const resizeOptions: sharp.ResizeOptions = {\r\n        width: options.width,\r\n        height: options.height,\r\n        fit: options.crop || 'cover',\r\n        withoutEnlargement: true\r\n      };\r\n\r\n      if (options.background) {\r\n        resizeOptions.background = options.background;\r\n      }\r\n\r\n      pipeline = pipeline.resize(resizeOptions);\r\n    }\r\n\r\n    // Apply filters\r\n    if (options.blur) {\r\n      pipeline = pipeline.blur(options.blur);\r\n    }\r\n\r\n    if (options.sharpen) {\r\n      pipeline = pipeline.sharpen();\r\n    }\r\n\r\n    if (options.grayscale) {\r\n      pipeline = pipeline.grayscale();\r\n    }\r\n\r\n    // Set output format and quality\r\n    const format = options.format || 'auto';\r\n    const quality = options.quality || QUALITY_SETTINGS.standard;\r\n\r\n    if (format === 'jpeg' || (format === 'auto' && metadata.format !== 'png')) {\r\n      pipeline = pipeline.jpeg({\r\n        quality,\r\n        progressive: true,\r\n        mozjpeg: true\r\n      });\r\n    } else if (format === 'png') {\r\n      pipeline = pipeline.png({\r\n        compressionLevel: 9\r\n      });\r\n    } else if (format === 'webp') {\r\n      pipeline = pipeline.webp({\r\n        quality,\r\n        effort: 6\r\n      });\r\n    }\r\n\r\n    const optimizedBuffer = await pipeline.toBuffer();\r\n\r\n    logger.info('Image optimization completed:', {\r\n      originalSize: inputBuffer.length,\r\n      optimizedSize: optimizedBuffer.length,\r\n      compressionRatio: ((inputBuffer.length - optimizedBuffer.length) / inputBuffer.length * 100).toFixed(2) + '%'\r\n    });\r\n\r\n    return optimizedBuffer;\r\n  } catch (error) {\r\n    logger.error('Image optimization error:', error);\r\n    throw new AppError('Failed to optimize image', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Generate multiple image sizes\r\n */\r\nexport async function generateImageSizes(\r\n  inputBuffer: Buffer,\r\n  sizeCategory: 'avatar' | 'property' | 'message' | 'document'\r\n): Promise<{ [key: string]: Buffer }> {\r\n  try {\r\n    const sizes = IMAGE_SIZES[sizeCategory];\r\n    const results: { [key: string]: Buffer } = {};\r\n\r\n    for (const [sizeName, sizeOptions] of Object.entries(sizes)) {\r\n      const optimizedBuffer = await optimizeImage(inputBuffer, {\r\n        ...sizeOptions,\r\n        quality: QUALITY_SETTINGS.standard,\r\n        format: 'auto',\r\n        removeMetadata: true\r\n      });\r\n\r\n      results[sizeName] = optimizedBuffer;\r\n    }\r\n\r\n    return results;\r\n  } catch (error) {\r\n    logger.error('Error generating image sizes:', error);\r\n    throw new AppError('Failed to generate image sizes', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Create image thumbnail\r\n */\r\nexport async function createThumbnail(\r\n  inputBuffer: Buffer,\r\n  width: number = 200,\r\n  height: number = 200\r\n): Promise<Buffer> {\r\n  return optimizeImage(inputBuffer, {\r\n    width,\r\n    height,\r\n    crop: 'cover',\r\n    quality: QUALITY_SETTINGS.thumbnail,\r\n    format: 'jpeg',\r\n    removeMetadata: true\r\n  });\r\n}\r\n\r\n/**\r\n * Compress image for web\r\n */\r\nexport async function compressForWeb(\r\n  inputBuffer: Buffer,\r\n  maxWidth: number = 1200,\r\n  quality: number = QUALITY_SETTINGS.standard\r\n): Promise<Buffer> {\r\n  try {\r\n    const metadata = await sharp(inputBuffer).metadata();\r\n    \r\n    // Only resize if image is larger than maxWidth\r\n    const shouldResize = metadata.width && metadata.width > maxWidth;\r\n    \r\n    return optimizeImage(inputBuffer, {\r\n      width: shouldResize ? maxWidth : undefined,\r\n      quality,\r\n      format: 'auto',\r\n      removeMetadata: true,\r\n      sharpen: true\r\n    });\r\n  } catch (error) {\r\n    logger.error('Web compression error:', error);\r\n    throw new AppError('Failed to compress image for web', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Create progressive JPEG\r\n */\r\nexport async function createProgressiveJPEG(\r\n  inputBuffer: Buffer,\r\n  quality: number = QUALITY_SETTINGS.standard\r\n): Promise<Buffer> {\r\n  try {\r\n    return await sharp(inputBuffer)\r\n      .jpeg({\r\n        quality,\r\n        progressive: true,\r\n        mozjpeg: true\r\n      })\r\n      .toBuffer();\r\n  } catch (error) {\r\n    logger.error('Progressive JPEG creation error:', error);\r\n    throw new AppError('Failed to create progressive JPEG', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Convert to WebP format\r\n */\r\nexport async function convertToWebP(\r\n  inputBuffer: Buffer,\r\n  quality: number = QUALITY_SETTINGS.standard\r\n): Promise<Buffer> {\r\n  try {\r\n    return await sharp(inputBuffer)\r\n      .webp({\r\n        quality,\r\n        effort: 6\r\n      })\r\n      .toBuffer();\r\n  } catch (error) {\r\n    logger.error('WebP conversion error:', error);\r\n    throw new AppError('Failed to convert to WebP', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Extract image metadata\r\n */\r\nexport async function extractImageMetadata(inputBuffer: Buffer): Promise<{\r\n  width: number;\r\n  height: number;\r\n  format: string;\r\n  size: number;\r\n  hasAlpha: boolean;\r\n  colorSpace: string;\r\n  density?: number;\r\n}> {\r\n  try {\r\n    const metadata = await sharp(inputBuffer).metadata();\r\n    \r\n    return {\r\n      width: metadata.width || 0,\r\n      height: metadata.height || 0,\r\n      format: metadata.format || 'unknown',\r\n      size: inputBuffer.length,\r\n      hasAlpha: metadata.hasAlpha || false,\r\n      colorSpace: metadata.space || 'unknown',\r\n      density: metadata.density\r\n    };\r\n  } catch (error) {\r\n    logger.error('Metadata extraction error:', error);\r\n    throw new AppError('Failed to extract image metadata', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Validate image integrity\r\n */\r\nexport async function validateImageIntegrity(inputBuffer: Buffer): Promise<boolean> {\r\n  try {\r\n    // Try to process the image with Sharp\r\n    const metadata = await sharp(inputBuffer).metadata();\r\n    \r\n    // Basic validation checks\r\n    if (!metadata.width || !metadata.height || metadata.width <= 0 || metadata.height <= 0) {\r\n      return false;\r\n    }\r\n\r\n    if (!metadata.format || !['jpeg', 'png', 'webp', 'gif', 'tiff', 'svg'].includes(metadata.format)) {\r\n      return false;\r\n    }\r\n\r\n    // Try to create a small thumbnail to ensure the image can be processed\r\n    await sharp(inputBuffer)\r\n      .resize(50, 50)\r\n      .jpeg({ quality: 50 })\r\n      .toBuffer();\r\n\r\n    return true;\r\n  } catch (error) {\r\n    logger.warn('Image integrity validation failed:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Auto-orient image based on EXIF data\r\n */\r\nexport async function autoOrientImage(inputBuffer: Buffer): Promise<Buffer> {\r\n  try {\r\n    return await sharp(inputBuffer)\r\n      .rotate() // Auto-rotate based on EXIF orientation\r\n      .toBuffer();\r\n  } catch (error) {\r\n    logger.error('Auto-orientation error:', error);\r\n    throw new AppError('Failed to auto-orient image', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Remove sensitive metadata from image\r\n */\r\nexport async function sanitizeImage(inputBuffer: Buffer): Promise<Buffer> {\r\n  try {\r\n    return await sharp(inputBuffer)\r\n      .withMetadata({}) // Remove EXIF and other metadata\r\n      .toBuffer();\r\n  } catch (error) {\r\n    logger.error('Image sanitization error:', error);\r\n    throw new AppError('Failed to sanitize image', 500);\r\n  }\r\n}\r\n\r\n/**\r\n * Batch process images\r\n */\r\nexport async function batchOptimizeImages(\r\n  images: { buffer: Buffer; options?: OptimizationOptions }[]\r\n): Promise<Buffer[]> {\r\n  try {\r\n    const promises = images.map(({ buffer, options }) => \r\n      optimizeImage(buffer, options)\r\n    );\r\n\r\n    return await Promise.all(promises);\r\n  } catch (error) {\r\n    logger.error('Batch optimization error:', error);\r\n    throw new AppError('Failed to batch optimize images', 500);\r\n  }\r\n}\r\n\r\nexport default {\r\n  optimizeImage,\r\n  generateImageSizes,\r\n  createThumbnail,\r\n  compressForWeb,\r\n  createProgressiveJPEG,\r\n  convertToWebP,\r\n  extractImageMetadata,\r\n  validateImageIntegrity,\r\n  autoOrientImage,\r\n  sanitizeImage,\r\n  batchOptimizeImages,\r\n  IMAGE_SIZES,\r\n  QUALITY_SETTINGS\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fbd78dc032f75071faaeab4f325e462dc25c0885"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_f3c4du3yo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_f3c4du3yo();
var __importDefault =
/* istanbul ignore next */
(cov_f3c4du3yo().s[0]++,
/* istanbul ignore next */
(cov_f3c4du3yo().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_f3c4du3yo().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_f3c4du3yo().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[0]++;
  cov_f3c4du3yo().s[1]++;
  return /* istanbul ignore next */(cov_f3c4du3yo().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_f3c4du3yo().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_f3c4du3yo().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_f3c4du3yo().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_f3c4du3yo().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_f3c4du3yo().s[3]++;
exports.QUALITY_SETTINGS = exports.IMAGE_SIZES = void 0;
/* istanbul ignore next */
cov_f3c4du3yo().s[4]++;
exports.optimizeImage = optimizeImage;
/* istanbul ignore next */
cov_f3c4du3yo().s[5]++;
exports.generateImageSizes = generateImageSizes;
/* istanbul ignore next */
cov_f3c4du3yo().s[6]++;
exports.createThumbnail = createThumbnail;
/* istanbul ignore next */
cov_f3c4du3yo().s[7]++;
exports.compressForWeb = compressForWeb;
/* istanbul ignore next */
cov_f3c4du3yo().s[8]++;
exports.createProgressiveJPEG = createProgressiveJPEG;
/* istanbul ignore next */
cov_f3c4du3yo().s[9]++;
exports.convertToWebP = convertToWebP;
/* istanbul ignore next */
cov_f3c4du3yo().s[10]++;
exports.extractImageMetadata = extractImageMetadata;
/* istanbul ignore next */
cov_f3c4du3yo().s[11]++;
exports.validateImageIntegrity = validateImageIntegrity;
/* istanbul ignore next */
cov_f3c4du3yo().s[12]++;
exports.autoOrientImage = autoOrientImage;
/* istanbul ignore next */
cov_f3c4du3yo().s[13]++;
exports.sanitizeImage = sanitizeImage;
/* istanbul ignore next */
cov_f3c4du3yo().s[14]++;
exports.batchOptimizeImages = batchOptimizeImages;
const sharp_1 =
/* istanbul ignore next */
(cov_f3c4du3yo().s[15]++, __importDefault(require("sharp")));
const logger_1 =
/* istanbul ignore next */
(cov_f3c4du3yo().s[16]++, require("../utils/logger"));
const appError_1 =
/* istanbul ignore next */
(cov_f3c4du3yo().s[17]++, require("../utils/appError"));
// Predefined image sizes for different use cases
/* istanbul ignore next */
cov_f3c4du3yo().s[18]++;
exports.IMAGE_SIZES = {
  avatar: {
    thumbnail: {
      width: 50,
      height: 50,
      crop: 'cover'
    },
    small: {
      width: 100,
      height: 100,
      crop: 'cover'
    },
    medium: {
      width: 200,
      height: 200,
      crop: 'cover'
    },
    large: {
      width: 400,
      height: 400,
      crop: 'cover'
    }
  },
  property: {
    thumbnail: {
      width: 300,
      height: 200,
      crop: 'cover'
    },
    small: {
      width: 600,
      height: 400,
      crop: 'cover'
    },
    medium: {
      width: 1200,
      height: 800,
      crop: 'cover'
    },
    large: {
      width: 1920,
      height: 1280,
      crop: 'inside'
    },
    hero: {
      width: 2400,
      height: 1600,
      crop: 'cover'
    }
  },
  message: {
    thumbnail: {
      width: 150,
      height: 150,
      crop: 'cover'
    },
    preview: {
      width: 400,
      height: 300,
      crop: 'inside'
    },
    full: {
      width: 1200,
      height: 900,
      crop: 'inside'
    }
  },
  document: {
    preview: {
      width: 200,
      height: 260,
      crop: 'inside'
    }
  }
};
// Quality settings for different use cases
/* istanbul ignore next */
cov_f3c4du3yo().s[19]++;
exports.QUALITY_SETTINGS = {
  thumbnail: 70,
  preview: 80,
  standard: 85,
  high: 90,
  lossless: 100
};
/**
 * Optimize image with Sharp
 */
async function optimizeImage(inputBuffer, options =
/* istanbul ignore next */
(cov_f3c4du3yo().b[3][0]++, {})) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[1]++;
  cov_f3c4du3yo().s[20]++;
  try {
    let pipeline =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[21]++, (0, sharp_1.default)(inputBuffer));
    // Get image metadata
    const metadata =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[22]++, await pipeline.metadata());
    /* istanbul ignore next */
    cov_f3c4du3yo().s[23]++;
    logger_1.logger.info('Processing image:', {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format,
      size: inputBuffer.length
    });
    // Remove metadata if requested (default: true for privacy)
    /* istanbul ignore next */
    cov_f3c4du3yo().s[24]++;
    if (options.removeMetadata !== false) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[4][0]++;
      cov_f3c4du3yo().s[25]++;
      pipeline = pipeline.withMetadata({});
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[4][1]++;
    }
    // Resize image if dimensions specified
    cov_f3c4du3yo().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[6][0]++, options.width) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[6][1]++, options.height)) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[5][0]++;
      const resizeOptions =
      /* istanbul ignore next */
      (cov_f3c4du3yo().s[27]++, {
        width: options.width,
        height: options.height,
        fit:
        /* istanbul ignore next */
        (cov_f3c4du3yo().b[7][0]++, options.crop) ||
        /* istanbul ignore next */
        (cov_f3c4du3yo().b[7][1]++, 'cover'),
        withoutEnlargement: true
      });
      /* istanbul ignore next */
      cov_f3c4du3yo().s[28]++;
      if (options.background) {
        /* istanbul ignore next */
        cov_f3c4du3yo().b[8][0]++;
        cov_f3c4du3yo().s[29]++;
        resizeOptions.background = options.background;
      } else
      /* istanbul ignore next */
      {
        cov_f3c4du3yo().b[8][1]++;
      }
      cov_f3c4du3yo().s[30]++;
      pipeline = pipeline.resize(resizeOptions);
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[5][1]++;
    }
    // Apply filters
    cov_f3c4du3yo().s[31]++;
    if (options.blur) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[9][0]++;
      cov_f3c4du3yo().s[32]++;
      pipeline = pipeline.blur(options.blur);
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[9][1]++;
    }
    cov_f3c4du3yo().s[33]++;
    if (options.sharpen) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[10][0]++;
      cov_f3c4du3yo().s[34]++;
      pipeline = pipeline.sharpen();
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[10][1]++;
    }
    cov_f3c4du3yo().s[35]++;
    if (options.grayscale) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[11][0]++;
      cov_f3c4du3yo().s[36]++;
      pipeline = pipeline.grayscale();
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[11][1]++;
    }
    // Set output format and quality
    const format =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[37]++,
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[12][0]++, options.format) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[12][1]++, 'auto'));
    const quality =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[38]++,
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[13][0]++, options.quality) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[13][1]++, exports.QUALITY_SETTINGS.standard));
    /* istanbul ignore next */
    cov_f3c4du3yo().s[39]++;
    if (
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[15][0]++, format === 'jpeg') ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[15][1]++, format === 'auto') &&
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[15][2]++, metadata.format !== 'png')) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[14][0]++;
      cov_f3c4du3yo().s[40]++;
      pipeline = pipeline.jpeg({
        quality,
        progressive: true,
        mozjpeg: true
      });
    } else {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[14][1]++;
      cov_f3c4du3yo().s[41]++;
      if (format === 'png') {
        /* istanbul ignore next */
        cov_f3c4du3yo().b[16][0]++;
        cov_f3c4du3yo().s[42]++;
        pipeline = pipeline.png({
          compressionLevel: 9
        });
      } else {
        /* istanbul ignore next */
        cov_f3c4du3yo().b[16][1]++;
        cov_f3c4du3yo().s[43]++;
        if (format === 'webp') {
          /* istanbul ignore next */
          cov_f3c4du3yo().b[17][0]++;
          cov_f3c4du3yo().s[44]++;
          pipeline = pipeline.webp({
            quality,
            effort: 6
          });
        } else
        /* istanbul ignore next */
        {
          cov_f3c4du3yo().b[17][1]++;
        }
      }
    }
    const optimizedBuffer =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[45]++, await pipeline.toBuffer());
    /* istanbul ignore next */
    cov_f3c4du3yo().s[46]++;
    logger_1.logger.info('Image optimization completed:', {
      originalSize: inputBuffer.length,
      optimizedSize: optimizedBuffer.length,
      compressionRatio: ((inputBuffer.length - optimizedBuffer.length) / inputBuffer.length * 100).toFixed(2) + '%'
    });
    /* istanbul ignore next */
    cov_f3c4du3yo().s[47]++;
    return optimizedBuffer;
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[48]++;
    logger_1.logger.error('Image optimization error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[49]++;
    throw new appError_1.AppError('Failed to optimize image', 500);
  }
}
/**
 * Generate multiple image sizes
 */
async function generateImageSizes(inputBuffer, sizeCategory) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[2]++;
  cov_f3c4du3yo().s[50]++;
  try {
    const sizes =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[51]++, exports.IMAGE_SIZES[sizeCategory]);
    const results =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[52]++, {});
    /* istanbul ignore next */
    cov_f3c4du3yo().s[53]++;
    for (const [sizeName, sizeOptions] of Object.entries(sizes)) {
      const optimizedBuffer =
      /* istanbul ignore next */
      (cov_f3c4du3yo().s[54]++, await optimizeImage(inputBuffer, {
        ...sizeOptions,
        quality: exports.QUALITY_SETTINGS.standard,
        format: 'auto',
        removeMetadata: true
      }));
      /* istanbul ignore next */
      cov_f3c4du3yo().s[55]++;
      results[sizeName] = optimizedBuffer;
    }
    /* istanbul ignore next */
    cov_f3c4du3yo().s[56]++;
    return results;
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[57]++;
    logger_1.logger.error('Error generating image sizes:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[58]++;
    throw new appError_1.AppError('Failed to generate image sizes', 500);
  }
}
/**
 * Create image thumbnail
 */
async function createThumbnail(inputBuffer, width =
/* istanbul ignore next */
(cov_f3c4du3yo().b[18][0]++, 200), height =
/* istanbul ignore next */
(cov_f3c4du3yo().b[19][0]++, 200)) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[3]++;
  cov_f3c4du3yo().s[59]++;
  return optimizeImage(inputBuffer, {
    width,
    height,
    crop: 'cover',
    quality: exports.QUALITY_SETTINGS.thumbnail,
    format: 'jpeg',
    removeMetadata: true
  });
}
/**
 * Compress image for web
 */
async function compressForWeb(inputBuffer, maxWidth =
/* istanbul ignore next */
(cov_f3c4du3yo().b[20][0]++, 1200), quality =
/* istanbul ignore next */
(cov_f3c4du3yo().b[21][0]++, exports.QUALITY_SETTINGS.standard)) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[4]++;
  cov_f3c4du3yo().s[60]++;
  try {
    const metadata =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[61]++, await (0, sharp_1.default)(inputBuffer).metadata());
    // Only resize if image is larger than maxWidth
    const shouldResize =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[62]++,
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[22][0]++, metadata.width) &&
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[22][1]++, metadata.width > maxWidth));
    /* istanbul ignore next */
    cov_f3c4du3yo().s[63]++;
    return optimizeImage(inputBuffer, {
      width: shouldResize ?
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[23][0]++, maxWidth) :
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[23][1]++, undefined),
      quality,
      format: 'auto',
      removeMetadata: true,
      sharpen: true
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[64]++;
    logger_1.logger.error('Web compression error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[65]++;
    throw new appError_1.AppError('Failed to compress image for web', 500);
  }
}
/**
 * Create progressive JPEG
 */
async function createProgressiveJPEG(inputBuffer, quality =
/* istanbul ignore next */
(cov_f3c4du3yo().b[24][0]++, exports.QUALITY_SETTINGS.standard)) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[5]++;
  cov_f3c4du3yo().s[66]++;
  try {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[67]++;
    return await (0, sharp_1.default)(inputBuffer).jpeg({
      quality,
      progressive: true,
      mozjpeg: true
    }).toBuffer();
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[68]++;
    logger_1.logger.error('Progressive JPEG creation error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[69]++;
    throw new appError_1.AppError('Failed to create progressive JPEG', 500);
  }
}
/**
 * Convert to WebP format
 */
async function convertToWebP(inputBuffer, quality =
/* istanbul ignore next */
(cov_f3c4du3yo().b[25][0]++, exports.QUALITY_SETTINGS.standard)) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[6]++;
  cov_f3c4du3yo().s[70]++;
  try {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[71]++;
    return await (0, sharp_1.default)(inputBuffer).webp({
      quality,
      effort: 6
    }).toBuffer();
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[72]++;
    logger_1.logger.error('WebP conversion error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[73]++;
    throw new appError_1.AppError('Failed to convert to WebP', 500);
  }
}
/**
 * Extract image metadata
 */
async function extractImageMetadata(inputBuffer) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[7]++;
  cov_f3c4du3yo().s[74]++;
  try {
    const metadata =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[75]++, await (0, sharp_1.default)(inputBuffer).metadata());
    /* istanbul ignore next */
    cov_f3c4du3yo().s[76]++;
    return {
      width:
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[26][0]++, metadata.width) ||
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[26][1]++, 0),
      height:
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[27][0]++, metadata.height) ||
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[27][1]++, 0),
      format:
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[28][0]++, metadata.format) ||
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[28][1]++, 'unknown'),
      size: inputBuffer.length,
      hasAlpha:
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[29][0]++, metadata.hasAlpha) ||
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[29][1]++, false),
      colorSpace:
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[30][0]++, metadata.space) ||
      /* istanbul ignore next */
      (cov_f3c4du3yo().b[30][1]++, 'unknown'),
      density: metadata.density
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[77]++;
    logger_1.logger.error('Metadata extraction error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[78]++;
    throw new appError_1.AppError('Failed to extract image metadata', 500);
  }
}
/**
 * Validate image integrity
 */
async function validateImageIntegrity(inputBuffer) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[8]++;
  cov_f3c4du3yo().s[79]++;
  try {
    // Try to process the image with Sharp
    const metadata =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[80]++, await (0, sharp_1.default)(inputBuffer).metadata());
    // Basic validation checks
    /* istanbul ignore next */
    cov_f3c4du3yo().s[81]++;
    if (
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[32][0]++, !metadata.width) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[32][1]++, !metadata.height) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[32][2]++, metadata.width <= 0) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[32][3]++, metadata.height <= 0)) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[31][0]++;
      cov_f3c4du3yo().s[82]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[31][1]++;
    }
    cov_f3c4du3yo().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[34][0]++, !metadata.format) ||
    /* istanbul ignore next */
    (cov_f3c4du3yo().b[34][1]++, !['jpeg', 'png', 'webp', 'gif', 'tiff', 'svg'].includes(metadata.format))) {
      /* istanbul ignore next */
      cov_f3c4du3yo().b[33][0]++;
      cov_f3c4du3yo().s[84]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_f3c4du3yo().b[33][1]++;
    }
    // Try to create a small thumbnail to ensure the image can be processed
    cov_f3c4du3yo().s[85]++;
    await (0, sharp_1.default)(inputBuffer).resize(50, 50).jpeg({
      quality: 50
    }).toBuffer();
    /* istanbul ignore next */
    cov_f3c4du3yo().s[86]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[87]++;
    logger_1.logger.warn('Image integrity validation failed:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[88]++;
    return false;
  }
}
/**
 * Auto-orient image based on EXIF data
 */
async function autoOrientImage(inputBuffer) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[9]++;
  cov_f3c4du3yo().s[89]++;
  try {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[90]++;
    return await (0, sharp_1.default)(inputBuffer).rotate() // Auto-rotate based on EXIF orientation
    .toBuffer();
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[91]++;
    logger_1.logger.error('Auto-orientation error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[92]++;
    throw new appError_1.AppError('Failed to auto-orient image', 500);
  }
}
/**
 * Remove sensitive metadata from image
 */
async function sanitizeImage(inputBuffer) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[10]++;
  cov_f3c4du3yo().s[93]++;
  try {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[94]++;
    return await (0, sharp_1.default)(inputBuffer).withMetadata({}) // Remove EXIF and other metadata
    .toBuffer();
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[95]++;
    logger_1.logger.error('Image sanitization error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[96]++;
    throw new appError_1.AppError('Failed to sanitize image', 500);
  }
}
/**
 * Batch process images
 */
async function batchOptimizeImages(images) {
  /* istanbul ignore next */
  cov_f3c4du3yo().f[11]++;
  cov_f3c4du3yo().s[97]++;
  try {
    const promises =
    /* istanbul ignore next */
    (cov_f3c4du3yo().s[98]++, images.map(({
      buffer,
      options
    }) => {
      /* istanbul ignore next */
      cov_f3c4du3yo().f[12]++;
      cov_f3c4du3yo().s[99]++;
      return optimizeImage(buffer, options);
    }));
    /* istanbul ignore next */
    cov_f3c4du3yo().s[100]++;
    return await Promise.all(promises);
  } catch (error) {
    /* istanbul ignore next */
    cov_f3c4du3yo().s[101]++;
    logger_1.logger.error('Batch optimization error:', error);
    /* istanbul ignore next */
    cov_f3c4du3yo().s[102]++;
    throw new appError_1.AppError('Failed to batch optimize images', 500);
  }
}
/* istanbul ignore next */
cov_f3c4du3yo().s[103]++;
exports.default = {
  optimizeImage,
  generateImageSizes,
  createThumbnail,
  compressForWeb,
  createProgressiveJPEG,
  convertToWebP,
  extractImageMetadata,
  validateImageIntegrity,
  autoOrientImage,
  sanitizeImage,
  batchOptimizeImages,
  IMAGE_SIZES: exports.IMAGE_SIZES,
  QUALITY_SETTINGS: exports.QUALITY_SETTINGS
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,