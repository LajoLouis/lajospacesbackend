ea0cf09020ec172718cea1e73d301e7e
"use strict";

/* istanbul ignore next */
function cov_t778pbqqd() {
  var path = "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchingHelpers.ts";
  var hash = "af1282a2180554321f552ff01f3e2d29be23f8ed";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchingHelpers.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 6,
          column: 58
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 43
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "7": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 19,
          column: 13
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "9": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 69
        }
      },
      "10": {
        start: {
          line: 25,
          column: 32
        },
        end: {
          line: 25,
          column: 56
        }
      },
      "11": {
        start: {
          line: 26,
          column: 33
        },
        end: {
          line: 26,
          column: 69
        }
      },
      "12": {
        start: {
          line: 27,
          column: 33
        },
        end: {
          line: 27,
          column: 69
        }
      },
      "13": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 31,
          column: 14
        }
      },
      "14": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 35,
          column: 23
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 30
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 79
        }
      },
      "17": {
        start: {
          line: 40,
          column: 12
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 26
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "21": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 90
        }
      },
      "22": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "23": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 89
        }
      },
      "24": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "25": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 91
        }
      },
      "26": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "27": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 77
        }
      },
      "28": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 74,
          column: 13
        }
      },
      "29": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 76
        }
      },
      "30": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "31": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "32": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 57
        }
      },
      "33": {
        start: {
          line: 81,
          column: 31
        },
        end: {
          line: 83,
          column: 23
        }
      },
      "34": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 30
        }
      },
      "35": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 79
        }
      },
      "36": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 22
        }
      },
      "37": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "38": {
        start: {
          line: 96,
          column: 49
        },
        end: {
          line: 99,
          column: 14
        }
      },
      "39": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "40": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 27
        }
      },
      "41": {
        start: {
          line: 103,
          column: 31
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "42": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 67
        }
      },
      "43": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 107,
          column: 70
        }
      },
      "44": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 86
        }
      },
      "45": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "46": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "47": {
        start: {
          line: 119,
          column: 44
        },
        end: {
          line: 122,
          column: 14
        }
      },
      "48": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "49": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 27
        }
      },
      "50": {
        start: {
          line: 126,
          column: 31
        },
        end: {
          line: 126,
          column: 63
        }
      },
      "51": {
        start: {
          line: 127,
          column: 35
        },
        end: {
          line: 127,
          column: 64
        }
      },
      "52": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 176
        }
      },
      "53": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 84
        }
      },
      "54": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "55": {
        start: {
          line: 139,
          column: 18
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "56": {
        start: {
          line: 140,
          column: 21
        },
        end: {
          line: 140,
          column: 48
        }
      },
      "57": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 141,
          column: 48
        }
      },
      "58": {
        start: {
          line: 142,
          column: 18
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "59": {
        start: {
          line: 145,
          column: 18
        },
        end: {
          line: 145,
          column: 64
        }
      },
      "60": {
        start: {
          line: 146,
          column: 25
        },
        end: {
          line: 146,
          column: 30
        }
      },
      "61": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 48
        }
      },
      "62": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "63": {
        start: {
          line: 154,
          column: 32
        },
        end: {
          line: 154,
          column: 81
        }
      },
      "64": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "65": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 156,
          column: 97
        }
      },
      "66": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 87
        }
      },
      "67": {
        start: {
          line: 160,
          column: 33
        },
        end: {
          line: 160,
          column: 77
        }
      },
      "68": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 82
        }
      },
      "69": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 72
        }
      },
      "70": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 25
        }
      },
      "71": {
        start: {
          line: 173,
          column: 24
        },
        end: {
          line: 173,
          column: 26
        }
      },
      "72": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "73": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 57
        }
      },
      "74": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "75": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 49
        }
      },
      "76": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "77": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 58
        }
      },
      "78": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "79": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 49
        }
      },
      "80": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 188,
          column: 9
        }
      },
      "81": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 187,
          column: 59
        }
      },
      "82": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 191,
          column: 9
        }
      },
      "83": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 55
        }
      },
      "84": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "85": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 62
        }
      },
      "86": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 71
        }
      },
      "87": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 26
        }
      },
      "88": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "89": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 72
        }
      },
      "90": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "91": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 53
        }
      },
      "92": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "93": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 62
        }
      },
      "94": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "95": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 37
        }
      },
      "96": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "97": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 46
        }
      },
      "98": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "99": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 44
        }
      },
      "100": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "101": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 51
        }
      },
      "102": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 70
        }
      },
      "103": {
        start: {
          line: 229,
          column: 33
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "104": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 65
        }
      },
      "105": {
        start: {
          line: 248,
          column: 33
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "106": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 65
        }
      },
      "107": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 41
        }
      },
      "108": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 269,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 58
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 46
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 64
          },
          end: {
            line: 77,
            column: 65
          }
        },
        loc: {
          start: {
            line: 77,
            column: 75
          },
          end: {
            line: 79,
            column: 17
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 57
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 63
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 117
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 71
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 138
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        loc: {
          start: {
            line: 152,
            column: 63
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 152
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 41
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 172
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 59
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 200
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 47
          },
          end: {
            line: 243,
            column: 5
          }
        },
        line: 228
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 46
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 247
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 30
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 74,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "8": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 51
          }
        }, {
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 92
          }
        }],
        line: 100
      },
      "9": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 51
          }
        }, {
          start: {
            line: 123,
            column: 55
          },
          end: {
            line: 123,
            column: 87
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: 159,
            column: 17
          },
          end: {
            line: 162,
            column: 13
          }
        }],
        line: 155
      },
      "12": {
        loc: {
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "13": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 179,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "14": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "15": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "16": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 188,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "17": {
        loc: {
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 8
          },
          end: {
            line: 191,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "18": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 194,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "19": {
        loc: {
          start: {
            line: 195,
            column: 15
          },
          end: {
            line: 195,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 36
          },
          end: {
            line: 195,
            column: 43
          }
        }, {
          start: {
            line: 195,
            column: 46
          },
          end: {
            line: 195,
            column: 70
          }
        }],
        line: 195
      },
      "20": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "21": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "22": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "23": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "24": {
        loc: {
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "25": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "26": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "27": {
        loc: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 36
          },
          end: {
            line: 223,
            column: 43
          }
        }, {
          start: {
            line: 223,
            column: 46
          },
          end: {
            line: 223,
            column: 69
          }
        }],
        line: 223
      },
      "28": {
        loc: {
          start: {
            line: 242,
            column: 15
          },
          end: {
            line: 242,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 15
          },
          end: {
            line: 242,
            column: 55
          }
        }, {
          start: {
            line: 242,
            column: 59
          },
          end: {
            line: 242,
            column: 64
          }
        }],
        line: 242
      },
      "29": {
        loc: {
          start: {
            line: 260,
            column: 15
          },
          end: {
            line: 260,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 15
          },
          end: {
            line: 260,
            column: 55
          }
        }, {
          start: {
            line: 260,
            column: 59
          },
          end: {
            line: 260,
            column: 64
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchingHelpers.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\MY PC\\Desktop\\lajospaces\\lajospacesbackend\\src\\services\\matchingHelpers.ts"],
      sourcesContent: ["import { Types } from 'mongoose';\r\nimport { User } from '../models/User.model';\r\nimport { Property } from '../models/Property';\r\nimport { Profile } from '../models/Profile.model';\r\nimport { IMatchPreferences, CompatibilityFactors } from './matchingService';\r\nimport { logger } from '../utils/logger';\r\n\r\nexport class MatchingHelpers {\r\n  \r\n  /**\r\n   * Get potential roommate candidates for a user\r\n   */\r\n  static async getRoommateCandidates(\r\n    userId: Types.ObjectId,\r\n    userPrefs: IMatchPreferences\r\n  ): Promise<any[]> {\r\n    try {\r\n      const query: any = {\r\n        _id: { $ne: userId }, // Exclude self\r\n        accountType: 'tenant', // Only tenants looking for roommates\r\n        isEmailVerified: true,\r\n        isActive: true\r\n      };\r\n\r\n      // Add gender filter if specified\r\n      if (userPrefs.genderPreference !== 'any') {\r\n        query['profile.gender'] = userPrefs.genderPreference;\r\n      }\r\n\r\n      // Add age filter\r\n      const currentYear = new Date().getFullYear();\r\n      const minBirthYear = currentYear - userPrefs.ageRange.max;\r\n      const maxBirthYear = currentYear - userPrefs.ageRange.min;\r\n      \r\n      query['profile.dateOfBirth'] = {\r\n        $gte: new Date(`${minBirthYear}-01-01`),\r\n        $lte: new Date(`${maxBirthYear}-12-31`)\r\n      };\r\n\r\n      const candidates = await User.find(query)\r\n        .populate('profile')\r\n        .limit(100) // Limit to prevent performance issues\r\n        .lean();\r\n\r\n      return candidates;\r\n    } catch (error) {\r\n      logger.error('Error getting roommate candidates:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get potential property candidates for a user\r\n   */\r\n  static async getPropertyCandidates(\r\n    userId: Types.ObjectId,\r\n    userPrefs: IMatchPreferences\r\n  ): Promise<any[]> {\r\n    try {\r\n      const query: any = {\r\n        status: 'active',\r\n        isAvailable: true,\r\n        ownerId: { $ne: userId }, // Exclude user's own properties\r\n        'pricing.rentPerMonth': {\r\n          $gte: userPrefs.budgetRange.min,\r\n          $lte: userPrefs.budgetRange.max\r\n        }\r\n      };\r\n\r\n      // Add property type filter\r\n      if (userPrefs.propertyPreferences.propertyTypes.length > 0) {\r\n        query.propertyType = { $in: userPrefs.propertyPreferences.propertyTypes };\r\n      }\r\n\r\n      // Add bedroom/bathroom filters\r\n      if (userPrefs.propertyPreferences.minimumBedrooms > 0) {\r\n        query.bedrooms = { $gte: userPrefs.propertyPreferences.minimumBedrooms };\r\n      }\r\n\r\n      if (userPrefs.propertyPreferences.minimumBathrooms > 0) {\r\n        query.bathrooms = { $gte: userPrefs.propertyPreferences.minimumBathrooms };\r\n      }\r\n\r\n      // Add location filters\r\n      if (userPrefs.preferredStates.length > 0) {\r\n        query['location.state'] = { $in: userPrefs.preferredStates };\r\n      }\r\n\r\n      if (userPrefs.preferredCities.length > 0) {\r\n        query['location.city'] = { $in: userPrefs.preferredCities };\r\n      }\r\n\r\n      // Add amenity filters\r\n      if (userPrefs.propertyPreferences.amenities.length > 0) {\r\n        userPrefs.propertyPreferences.amenities.forEach(amenity => {\r\n          query[`amenities.${amenity}`] = true;\r\n        });\r\n      }\r\n\r\n      const properties = await Property.find(query)\r\n        .limit(100)\r\n        .lean();\r\n\r\n      return properties;\r\n    } catch (error) {\r\n      logger.error('Error getting property candidates:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two users\r\n   */\r\n  static async calculateDistance(\r\n    userId: Types.ObjectId,\r\n    targetUserId: Types.ObjectId\r\n  ): Promise<number> {\r\n    try {\r\n      const [userProfile, targetProfile] = await Promise.all([\r\n        Profile.findOne({ userId }),\r\n        Profile.findOne({ userId: targetUserId })\r\n      ]);\r\n\r\n      if (!(userProfile as any)?.location?.coordinates || !(targetProfile as any)?.location?.coordinates) {\r\n        return 999; // Return high distance if coordinates not available\r\n      }\r\n\r\n      const userCoords = (userProfile as any).location.coordinates;\r\n      const targetCoords = (targetProfile as any).location.coordinates;\r\n\r\n      return this.calculateDistanceBetweenCoordinates(\r\n        userCoords.coordinates[1], // latitude\r\n        userCoords.coordinates[0], // longitude\r\n        targetCoords.coordinates[1],\r\n        targetCoords.coordinates[0]\r\n      );\r\n    } catch (error) {\r\n      logger.error('Error calculating distance between users:', error);\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between user and property\r\n   */\r\n  static async calculatePropertyDistance(\r\n    userId: Types.ObjectId,\r\n    propertyId: Types.ObjectId\r\n  ): Promise<number> {\r\n    try {\r\n      const [userProfile, property] = await Promise.all([\r\n        Profile.findOne({ userId }),\r\n        Property.findById(propertyId)\r\n      ]);\r\n\r\n      if (!(userProfile as any)?.location?.coordinates || !property?.location?.coordinates) {\r\n        return 999;\r\n      }\r\n\r\n      const userCoords = (userProfile as any).location.coordinates;\r\n      const propertyCoords = property.location.coordinates;\r\n\r\n      return this.calculateDistanceBetweenCoordinates(\r\n        userCoords.coordinates[1],\r\n        userCoords.coordinates[0],\r\n        propertyCoords.coordinates[1],\r\n        propertyCoords.coordinates[0]\r\n      );\r\n    } catch (error) {\r\n      logger.error('Error calculating distance to property:', error);\r\n      return 999;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two coordinates using Haversine formula\r\n   */\r\n  static calculateDistanceBetweenCoordinates(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number\r\n  ): number {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRadians(lat2 - lat1);\r\n    const dLon = this.toRadians(lon2 - lon1);\r\n    \r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c;\r\n    \r\n    return Math.round(distance * 100) / 100; // Round to 2 decimal places\r\n  }\r\n\r\n  /**\r\n   * Check if two users are in the same state\r\n   */\r\n  static async checkStateMatch(\r\n    userId: Types.ObjectId,\r\n    targetId: Types.ObjectId,\r\n    targetType: 'user' | 'property'\r\n  ): Promise<boolean> {\r\n    try {\r\n      const userProfile = await Profile.findOne({ userId });\r\n      \r\n      if (targetType === 'user') {\r\n        const targetProfile = await Profile.findOne({ userId: targetId });\r\n        return (userProfile as any)?.location?.state === (targetProfile as any)?.location?.state;\r\n      } else {\r\n        const property = await Property.findById(targetId);\r\n        return (userProfile as any)?.location?.state === property?.location?.state;\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error checking state match:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate match reasons based on compatibility factors\r\n   */\r\n  static generateMatchReasons(factors: CompatibilityFactors): string[] {\r\n    const reasons: string[] = [];\r\n\r\n    if (factors.location >= 80) {\r\n      reasons.push('Great location compatibility');\r\n    }\r\n    if (factors.budget >= 80) {\r\n      reasons.push('Perfect budget match');\r\n    }\r\n    if (factors.lifestyle >= 80) {\r\n      reasons.push('Similar lifestyle preferences');\r\n    }\r\n    if (factors.schedule >= 80) {\r\n      reasons.push('Compatible schedules');\r\n    }\r\n    if (factors.cleanliness >= 80) {\r\n      reasons.push('Matching cleanliness standards');\r\n    }\r\n    if (factors.socialLevel >= 80) {\r\n      reasons.push('Similar social preferences');\r\n    }\r\n    if (factors.overall >= 90) {\r\n      reasons.push('Exceptional overall compatibility');\r\n    }\r\n\r\n    return reasons.length > 0 ? reasons : ['Good potential match'];\r\n  }\r\n\r\n  /**\r\n   * Generate property-specific match reasons\r\n   */\r\n  static generatePropertyMatchReasons(factors: CompatibilityFactors, property: any): string[] {\r\n    const reasons: string[] = [];\r\n\r\n    if (factors.location >= 80) {\r\n      reasons.push(`Great location in ${property.location.city}`);\r\n    }\r\n    if (factors.budget >= 80) {\r\n      reasons.push('Within your budget range');\r\n    }\r\n    if (factors.preferences >= 80) {\r\n      reasons.push('Matches your property preferences');\r\n    }\r\n    if (property.amenities?.wifi) {\r\n      reasons.push('Has WiFi');\r\n    }\r\n    if (property.amenities?.parking) {\r\n      reasons.push('Parking available');\r\n    }\r\n    if (property.amenities?.security) {\r\n      reasons.push('Secure building');\r\n    }\r\n    if (property.amenities?.generator) {\r\n      reasons.push('Backup power available');\r\n    }\r\n\r\n    return reasons.length > 0 ? reasons : ['Good property match'];\r\n  }\r\n\r\n  /**\r\n   * Check if two lifestyle preferences are compatible\r\n   */\r\n  static isCompatibleLifestyle(pref1: string, pref2: string): boolean {\r\n    const compatibilityMap: { [key: string]: string[] } = {\r\n      'yes': ['yes', 'occasionally'],\r\n      'no': ['no', 'rarely', 'never'],\r\n      'occasionally': ['yes', 'occasionally', 'rarely'],\r\n      'rarely': ['no', 'occasionally', 'rarely'],\r\n      'never': ['no', 'rarely', 'never'],\r\n      'love': ['love', 'okay'],\r\n      'okay': ['love', 'okay', 'rarely'],\r\n      'allergic': ['no', 'never'],\r\n      'frequent': ['frequent', 'occasional'],\r\n      'occasional': ['frequent', 'occasional', 'rare'],\r\n      'rare': ['occasional', 'rare', 'never']\r\n    };\r\n\r\n    return compatibilityMap[pref1]?.includes(pref2) || false;\r\n  }\r\n\r\n  /**\r\n   * Check if two schedule preferences are compatible\r\n   */\r\n  static isCompatibleSchedule(pref1: string, pref2: string): boolean {\r\n    const compatibilityMap: { [key: string]: string[] } = {\r\n      'day_shift': ['day_shift', 'flexible'],\r\n      'night_shift': ['night_shift', 'flexible'],\r\n      'flexible': ['day_shift', 'night_shift', 'flexible', 'student'],\r\n      'student': ['student', 'flexible'],\r\n      'early_bird': ['early_bird', 'flexible'],\r\n      'night_owl': ['night_owl', 'flexible'],\r\n      'very_social': ['very_social', 'social'],\r\n      'social': ['very_social', 'social', 'moderate'],\r\n      'moderate': ['social', 'moderate', 'private'],\r\n      'private': ['moderate', 'private']\r\n    };\r\n\r\n    return compatibilityMap[pref1]?.includes(pref2) || false;\r\n  }\r\n\r\n  /**\r\n   * Convert degrees to radians\r\n   */\r\n  private static toRadians(degrees: number): number {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "af1282a2180554321f552ff01f3e2d29be23f8ed"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t778pbqqd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t778pbqqd();
cov_t778pbqqd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_t778pbqqd().s[1]++;
exports.MatchingHelpers = void 0;
const User_model_1 =
/* istanbul ignore next */
(cov_t778pbqqd().s[2]++, require("../models/User.model"));
const Property_1 =
/* istanbul ignore next */
(cov_t778pbqqd().s[3]++, require("../models/Property"));
const Profile_model_1 =
/* istanbul ignore next */
(cov_t778pbqqd().s[4]++, require("../models/Profile.model"));
const logger_1 =
/* istanbul ignore next */
(cov_t778pbqqd().s[5]++, require("../utils/logger"));
class MatchingHelpers {
  /**
   * Get potential roommate candidates for a user
   */
  static async getRoommateCandidates(userId, userPrefs) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[0]++;
    cov_t778pbqqd().s[6]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[7]++, {
        _id: {
          $ne: userId
        },
        // Exclude self
        accountType: 'tenant',
        // Only tenants looking for roommates
        isEmailVerified: true,
        isActive: true
      });
      // Add gender filter if specified
      /* istanbul ignore next */
      cov_t778pbqqd().s[8]++;
      if (userPrefs.genderPreference !== 'any') {
        /* istanbul ignore next */
        cov_t778pbqqd().b[0][0]++;
        cov_t778pbqqd().s[9]++;
        query['profile.gender'] = userPrefs.genderPreference;
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[0][1]++;
      }
      // Add age filter
      const currentYear =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[10]++, new Date().getFullYear());
      const minBirthYear =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[11]++, currentYear - userPrefs.ageRange.max);
      const maxBirthYear =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[12]++, currentYear - userPrefs.ageRange.min);
      /* istanbul ignore next */
      cov_t778pbqqd().s[13]++;
      query['profile.dateOfBirth'] = {
        $gte: new Date(`${minBirthYear}-01-01`),
        $lte: new Date(`${maxBirthYear}-12-31`)
      };
      const candidates =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[14]++, await User_model_1.User.find(query).populate('profile').limit(100) // Limit to prevent performance issues
      .lean());
      /* istanbul ignore next */
      cov_t778pbqqd().s[15]++;
      return candidates;
    } catch (error) {
      /* istanbul ignore next */
      cov_t778pbqqd().s[16]++;
      logger_1.logger.error('Error getting roommate candidates:', error);
      /* istanbul ignore next */
      cov_t778pbqqd().s[17]++;
      return [];
    }
  }
  /**
   * Get potential property candidates for a user
   */
  static async getPropertyCandidates(userId, userPrefs) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[1]++;
    cov_t778pbqqd().s[18]++;
    try {
      const query =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[19]++, {
        status: 'active',
        isAvailable: true,
        ownerId: {
          $ne: userId
        },
        // Exclude user's own properties
        'pricing.rentPerMonth': {
          $gte: userPrefs.budgetRange.min,
          $lte: userPrefs.budgetRange.max
        }
      });
      // Add property type filter
      /* istanbul ignore next */
      cov_t778pbqqd().s[20]++;
      if (userPrefs.propertyPreferences.propertyTypes.length > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[1][0]++;
        cov_t778pbqqd().s[21]++;
        query.propertyType = {
          $in: userPrefs.propertyPreferences.propertyTypes
        };
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[1][1]++;
      }
      // Add bedroom/bathroom filters
      cov_t778pbqqd().s[22]++;
      if (userPrefs.propertyPreferences.minimumBedrooms > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[2][0]++;
        cov_t778pbqqd().s[23]++;
        query.bedrooms = {
          $gte: userPrefs.propertyPreferences.minimumBedrooms
        };
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[2][1]++;
      }
      cov_t778pbqqd().s[24]++;
      if (userPrefs.propertyPreferences.minimumBathrooms > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[3][0]++;
        cov_t778pbqqd().s[25]++;
        query.bathrooms = {
          $gte: userPrefs.propertyPreferences.minimumBathrooms
        };
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[3][1]++;
      }
      // Add location filters
      cov_t778pbqqd().s[26]++;
      if (userPrefs.preferredStates.length > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[4][0]++;
        cov_t778pbqqd().s[27]++;
        query['location.state'] = {
          $in: userPrefs.preferredStates
        };
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[4][1]++;
      }
      cov_t778pbqqd().s[28]++;
      if (userPrefs.preferredCities.length > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[5][0]++;
        cov_t778pbqqd().s[29]++;
        query['location.city'] = {
          $in: userPrefs.preferredCities
        };
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[5][1]++;
      }
      // Add amenity filters
      cov_t778pbqqd().s[30]++;
      if (userPrefs.propertyPreferences.amenities.length > 0) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[6][0]++;
        cov_t778pbqqd().s[31]++;
        userPrefs.propertyPreferences.amenities.forEach(amenity => {
          /* istanbul ignore next */
          cov_t778pbqqd().f[2]++;
          cov_t778pbqqd().s[32]++;
          query[`amenities.${amenity}`] = true;
        });
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[6][1]++;
      }
      const properties =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[33]++, await Property_1.Property.find(query).limit(100).lean());
      /* istanbul ignore next */
      cov_t778pbqqd().s[34]++;
      return properties;
    } catch (error) {
      /* istanbul ignore next */
      cov_t778pbqqd().s[35]++;
      logger_1.logger.error('Error getting property candidates:', error);
      /* istanbul ignore next */
      cov_t778pbqqd().s[36]++;
      return [];
    }
  }
  /**
   * Calculate distance between two users
   */
  static async calculateDistance(userId, targetUserId) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[3]++;
    cov_t778pbqqd().s[37]++;
    try {
      const [userProfile, targetProfile] =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[38]++, await Promise.all([Profile_model_1.Profile.findOne({
        userId
      }), Profile_model_1.Profile.findOne({
        userId: targetUserId
      })]));
      /* istanbul ignore next */
      cov_t778pbqqd().s[39]++;
      if (
      /* istanbul ignore next */
      (cov_t778pbqqd().b[8][0]++, !userProfile?.location?.coordinates) ||
      /* istanbul ignore next */
      (cov_t778pbqqd().b[8][1]++, !targetProfile?.location?.coordinates)) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[7][0]++;
        cov_t778pbqqd().s[40]++;
        return 999; // Return high distance if coordinates not available
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[7][1]++;
      }
      const userCoords =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[41]++, userProfile.location.coordinates);
      const targetCoords =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[42]++, targetProfile.location.coordinates);
      /* istanbul ignore next */
      cov_t778pbqqd().s[43]++;
      return this.calculateDistanceBetweenCoordinates(userCoords.coordinates[1],
      // latitude
      userCoords.coordinates[0],
      // longitude
      targetCoords.coordinates[1], targetCoords.coordinates[0]);
    } catch (error) {
      /* istanbul ignore next */
      cov_t778pbqqd().s[44]++;
      logger_1.logger.error('Error calculating distance between users:', error);
      /* istanbul ignore next */
      cov_t778pbqqd().s[45]++;
      return 999;
    }
  }
  /**
   * Calculate distance between user and property
   */
  static async calculatePropertyDistance(userId, propertyId) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[4]++;
    cov_t778pbqqd().s[46]++;
    try {
      const [userProfile, property] =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[47]++, await Promise.all([Profile_model_1.Profile.findOne({
        userId
      }), Property_1.Property.findById(propertyId)]));
      /* istanbul ignore next */
      cov_t778pbqqd().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_t778pbqqd().b[10][0]++, !userProfile?.location?.coordinates) ||
      /* istanbul ignore next */
      (cov_t778pbqqd().b[10][1]++, !property?.location?.coordinates)) {
        /* istanbul ignore next */
        cov_t778pbqqd().b[9][0]++;
        cov_t778pbqqd().s[49]++;
        return 999;
      } else
      /* istanbul ignore next */
      {
        cov_t778pbqqd().b[9][1]++;
      }
      const userCoords =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[50]++, userProfile.location.coordinates);
      const propertyCoords =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[51]++, property.location.coordinates);
      /* istanbul ignore next */
      cov_t778pbqqd().s[52]++;
      return this.calculateDistanceBetweenCoordinates(userCoords.coordinates[1], userCoords.coordinates[0], propertyCoords.coordinates[1], propertyCoords.coordinates[0]);
    } catch (error) {
      /* istanbul ignore next */
      cov_t778pbqqd().s[53]++;
      logger_1.logger.error('Error calculating distance to property:', error);
      /* istanbul ignore next */
      cov_t778pbqqd().s[54]++;
      return 999;
    }
  }
  /**
   * Calculate distance between two coordinates using Haversine formula
   */
  static calculateDistanceBetweenCoordinates(lat1, lon1, lat2, lon2) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[5]++;
    const R =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[55]++, 6371); // Earth's radius in kilometers
    const dLat =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[56]++, this.toRadians(lat2 - lat1));
    const dLon =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[57]++, this.toRadians(lon2 - lon1));
    const a =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[58]++, Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2));
    const c =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[59]++, 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
    const distance =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[60]++, R * c);
    /* istanbul ignore next */
    cov_t778pbqqd().s[61]++;
    return Math.round(distance * 100) / 100; // Round to 2 decimal places
  }
  /**
   * Check if two users are in the same state
   */
  static async checkStateMatch(userId, targetId, targetType) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[6]++;
    cov_t778pbqqd().s[62]++;
    try {
      const userProfile =
      /* istanbul ignore next */
      (cov_t778pbqqd().s[63]++, await Profile_model_1.Profile.findOne({
        userId
      }));
      /* istanbul ignore next */
      cov_t778pbqqd().s[64]++;
      if (targetType === 'user') {
        /* istanbul ignore next */
        cov_t778pbqqd().b[11][0]++;
        const targetProfile =
        /* istanbul ignore next */
        (cov_t778pbqqd().s[65]++, await Profile_model_1.Profile.findOne({
          userId: targetId
        }));
        /* istanbul ignore next */
        cov_t778pbqqd().s[66]++;
        return userProfile?.location?.state === targetProfile?.location?.state;
      } else {
        /* istanbul ignore next */
        cov_t778pbqqd().b[11][1]++;
        const property =
        /* istanbul ignore next */
        (cov_t778pbqqd().s[67]++, await Property_1.Property.findById(targetId));
        /* istanbul ignore next */
        cov_t778pbqqd().s[68]++;
        return userProfile?.location?.state === property?.location?.state;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_t778pbqqd().s[69]++;
      logger_1.logger.error('Error checking state match:', error);
      /* istanbul ignore next */
      cov_t778pbqqd().s[70]++;
      return false;
    }
  }
  /**
   * Generate match reasons based on compatibility factors
   */
  static generateMatchReasons(factors) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[7]++;
    const reasons =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[71]++, []);
    /* istanbul ignore next */
    cov_t778pbqqd().s[72]++;
    if (factors.location >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[12][0]++;
      cov_t778pbqqd().s[73]++;
      reasons.push('Great location compatibility');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[12][1]++;
    }
    cov_t778pbqqd().s[74]++;
    if (factors.budget >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[13][0]++;
      cov_t778pbqqd().s[75]++;
      reasons.push('Perfect budget match');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[13][1]++;
    }
    cov_t778pbqqd().s[76]++;
    if (factors.lifestyle >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[14][0]++;
      cov_t778pbqqd().s[77]++;
      reasons.push('Similar lifestyle preferences');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[14][1]++;
    }
    cov_t778pbqqd().s[78]++;
    if (factors.schedule >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[15][0]++;
      cov_t778pbqqd().s[79]++;
      reasons.push('Compatible schedules');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[15][1]++;
    }
    cov_t778pbqqd().s[80]++;
    if (factors.cleanliness >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[16][0]++;
      cov_t778pbqqd().s[81]++;
      reasons.push('Matching cleanliness standards');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[16][1]++;
    }
    cov_t778pbqqd().s[82]++;
    if (factors.socialLevel >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[17][0]++;
      cov_t778pbqqd().s[83]++;
      reasons.push('Similar social preferences');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[17][1]++;
    }
    cov_t778pbqqd().s[84]++;
    if (factors.overall >= 90) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[18][0]++;
      cov_t778pbqqd().s[85]++;
      reasons.push('Exceptional overall compatibility');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[18][1]++;
    }
    cov_t778pbqqd().s[86]++;
    return reasons.length > 0 ?
    /* istanbul ignore next */
    (cov_t778pbqqd().b[19][0]++, reasons) :
    /* istanbul ignore next */
    (cov_t778pbqqd().b[19][1]++, ['Good potential match']);
  }
  /**
   * Generate property-specific match reasons
   */
  static generatePropertyMatchReasons(factors, property) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[8]++;
    const reasons =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[87]++, []);
    /* istanbul ignore next */
    cov_t778pbqqd().s[88]++;
    if (factors.location >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[20][0]++;
      cov_t778pbqqd().s[89]++;
      reasons.push(`Great location in ${property.location.city}`);
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[20][1]++;
    }
    cov_t778pbqqd().s[90]++;
    if (factors.budget >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[21][0]++;
      cov_t778pbqqd().s[91]++;
      reasons.push('Within your budget range');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[21][1]++;
    }
    cov_t778pbqqd().s[92]++;
    if (factors.preferences >= 80) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[22][0]++;
      cov_t778pbqqd().s[93]++;
      reasons.push('Matches your property preferences');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[22][1]++;
    }
    cov_t778pbqqd().s[94]++;
    if (property.amenities?.wifi) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[23][0]++;
      cov_t778pbqqd().s[95]++;
      reasons.push('Has WiFi');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[23][1]++;
    }
    cov_t778pbqqd().s[96]++;
    if (property.amenities?.parking) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[24][0]++;
      cov_t778pbqqd().s[97]++;
      reasons.push('Parking available');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[24][1]++;
    }
    cov_t778pbqqd().s[98]++;
    if (property.amenities?.security) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[25][0]++;
      cov_t778pbqqd().s[99]++;
      reasons.push('Secure building');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[25][1]++;
    }
    cov_t778pbqqd().s[100]++;
    if (property.amenities?.generator) {
      /* istanbul ignore next */
      cov_t778pbqqd().b[26][0]++;
      cov_t778pbqqd().s[101]++;
      reasons.push('Backup power available');
    } else
    /* istanbul ignore next */
    {
      cov_t778pbqqd().b[26][1]++;
    }
    cov_t778pbqqd().s[102]++;
    return reasons.length > 0 ?
    /* istanbul ignore next */
    (cov_t778pbqqd().b[27][0]++, reasons) :
    /* istanbul ignore next */
    (cov_t778pbqqd().b[27][1]++, ['Good property match']);
  }
  /**
   * Check if two lifestyle preferences are compatible
   */
  static isCompatibleLifestyle(pref1, pref2) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[9]++;
    const compatibilityMap =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[103]++, {
      'yes': ['yes', 'occasionally'],
      'no': ['no', 'rarely', 'never'],
      'occasionally': ['yes', 'occasionally', 'rarely'],
      'rarely': ['no', 'occasionally', 'rarely'],
      'never': ['no', 'rarely', 'never'],
      'love': ['love', 'okay'],
      'okay': ['love', 'okay', 'rarely'],
      'allergic': ['no', 'never'],
      'frequent': ['frequent', 'occasional'],
      'occasional': ['frequent', 'occasional', 'rare'],
      'rare': ['occasional', 'rare', 'never']
    });
    /* istanbul ignore next */
    cov_t778pbqqd().s[104]++;
    return /* istanbul ignore next */(cov_t778pbqqd().b[28][0]++, compatibilityMap[pref1]?.includes(pref2)) ||
    /* istanbul ignore next */
    (cov_t778pbqqd().b[28][1]++, false);
  }
  /**
   * Check if two schedule preferences are compatible
   */
  static isCompatibleSchedule(pref1, pref2) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[10]++;
    const compatibilityMap =
    /* istanbul ignore next */
    (cov_t778pbqqd().s[105]++, {
      'day_shift': ['day_shift', 'flexible'],
      'night_shift': ['night_shift', 'flexible'],
      'flexible': ['day_shift', 'night_shift', 'flexible', 'student'],
      'student': ['student', 'flexible'],
      'early_bird': ['early_bird', 'flexible'],
      'night_owl': ['night_owl', 'flexible'],
      'very_social': ['very_social', 'social'],
      'social': ['very_social', 'social', 'moderate'],
      'moderate': ['social', 'moderate', 'private'],
      'private': ['moderate', 'private']
    });
    /* istanbul ignore next */
    cov_t778pbqqd().s[106]++;
    return /* istanbul ignore next */(cov_t778pbqqd().b[29][0]++, compatibilityMap[pref1]?.includes(pref2)) ||
    /* istanbul ignore next */
    (cov_t778pbqqd().b[29][1]++, false);
  }
  /**
   * Convert degrees to radians
   */
  static toRadians(degrees) {
    /* istanbul ignore next */
    cov_t778pbqqd().f[11]++;
    cov_t778pbqqd().s[107]++;
    return degrees * (Math.PI / 180);
  }
}
/* istanbul ignore next */
cov_t778pbqqd().s[108]++;
exports.MatchingHelpers = MatchingHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,